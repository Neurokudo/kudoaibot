# app/handlers/text.py
"""–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""

import logging
from aiogram import F
from aiogram.types import Message

from app.handlers.states import is_waiting_for_input
from app.handlers.video_handlers import handle_text_input
from app.handlers.commands import cmd_start
from app.core.bot import get_bot

log = logging.getLogger("kudoaibot")

def register_text_handlers():
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
    bot, dp = get_bot()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ç–æ (–¥–ª—è –ø—Ä–∏–º–µ—Ä–æ—á–Ω–æ–π)
    dp.message.register(handle_photo_message, F.photo)
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–Ω–µ –∫–æ–º–∞–Ω–¥)
    dp.message.register(handle_text_message, F.text & ~F.text.startswith("/"))
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º fallback –¥–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
    dp.message.register(handle_fallback_message)

async def handle_photo_message(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ (–¥–ª—è –ø—Ä–∏–º–µ—Ä–æ—á–Ω–æ–π)"""
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∂–¥—ë—Ç –ª–∏ –±–æ—Ç —Ñ–æ—Ç–æ –¥–ª—è –ø—Ä–∏–º–µ—Ä–æ—á–Ω–æ–π
    from app.handlers.tryon_handlers import handle_tryon_photo
    handled = await handle_tryon_photo(message)
    
    if not handled:
        # –ï—Å–ª–∏ —Ñ–æ—Ç–æ –Ω–µ –¥–ª—è –ø—Ä–∏–º–µ—Ä–æ—á–Ω–æ–π, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é
        await message.answer(
            "üì∏ –§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ, –Ω–æ —è –Ω–µ –ø–æ–Ω–∏–º–∞—é, —á—Ç–æ —Å –Ω–∏–º –¥–µ–ª–∞—Ç—å.\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –∏–∑ –º–µ–Ω—é:"
        )
        await cmd_start(message)

async def handle_text_message(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å —É—á–µ—Ç–æ–º —Ä–µ–∂–∏–º–æ–≤"""
    user_id = message.from_user.id
    text = message.text.strip()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∂–¥—ë—Ç –ª–∏ –±–æ—Ç –≤–≤–æ–¥–∞ –æ—Ç —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if is_waiting_for_input(user_id):
        await handle_text_input(message)
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –Ω–æ–≤—ã—Ö —Ä–µ–∂–∏–º–æ–≤
    from app.handlers.states import get_user_state, set_user_state
    state = get_user_state(user_id)
    
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–∂–∏–¥–∞–µ—Ç –ø—Ä–æ–º–ø—Ç –≤ –Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
    if hasattr(state, 'awaiting_prompt') and state.awaiting_prompt:
        mode = getattr(state, 'mode', 'manual')
        model = getattr(state, 'video_model', 'veo3')
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø—Ä–æ–º–ø—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞
        if mode == "helper":
            # –£–º–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ - —É–ª—É—á—à–∞–µ–º –ø—Ä–æ–º–ø—Ç —á–µ—Ä–µ–∑ GPT
            from app.services.gpt_templates import improve_scene
            improved_prompt = improve_scene(text, "complex")
            await message.reply_text(
                f"üß† **–£–ª—É—á—à–µ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç:**\n\n{improved_prompt}\n\n"
                f"–ì–µ–Ω–µ—Ä–∏—Ä—É—é –≤–∏–¥–µ–æ..."
            )
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            await handle_text_input(message, improved_prompt)
            
        elif mode == "neurokudo":
            # Neurokudo —Ä–µ–∂–∏–º - —Å–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
            from app.services.gpt_templates import improve_scene
            improved_prompt = improve_scene(text, "absurd")
            await message.reply_text(
                f"üîÆ **Neurokudo –ø—Ä–æ–º–ø—Ç:**\n\n{improved_prompt}\n\n"
                f"–ì–µ–Ω–µ—Ä–∏—Ä—É—é –≤–∏–¥–µ–æ –≤ —Å—Ç–∏–ª–µ Neurokudo..."
            )
            await handle_text_input(message, improved_prompt)
            
        elif mode == "meme":
            # –ú–µ–º–Ω—ã–π —Ä–µ–∂–∏–º - –±—ã—Å—Ç—Ä–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è
            from app.services.gpt_templates import random_meme_scene, improve_scene
            if text.lower() in ["—Å–ª—É—á–∞–π–Ω–æ", "—Å–ª—É—á–∞–π–Ω–∞—è", "random", "–º–µ–º"]:
                meme_prompt = random_meme_scene()
                await message.reply_text(
                    f"ü§° **–°–ª—É—á–∞–π–Ω–∞—è –º–µ–º–Ω–∞—è —Å—Ü–µ–Ω–∞:**\n\n{meme_prompt}\n\n"
                    f"–ì–µ–Ω–µ—Ä–∏—Ä—É—é –º–µ–º..."
                )
                await handle_text_input(message, meme_prompt)
            else:
                # –£–ª—É—á—à–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –º–µ–º–æ–≤
                meme_prompt = improve_scene(text, "absurd")
                await message.reply_text(
                    f"ü§° **–ú–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç:**\n\n{meme_prompt}\n\n"
                    f"–ì–µ–Ω–µ—Ä–∏—Ä—É—é –º–µ–º..."
                )
                await handle_text_input(message, meme_prompt)
                
        elif mode == "manual":
            # –†—É—á–Ω–æ–π —Ä–µ–∂–∏–º - –ø—Ä—è–º–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è
            await message.reply_text("üé¨ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –≤–∏–¥–µ–æ...")
            await handle_text_input(message, text)
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        set_user_state(user_id, {})
        
    else:
        # –û–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await cmd_start(message)

async def handle_fallback_message(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π (—Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ, —Å—Ç–∏–∫–µ—Ä—ã –∏ —Ç.–¥.)"""
    log.info(f"–ü–æ–ª—É—á–µ–Ω–æ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}: {message.content_type}")
    
    # –ü—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await cmd_start(message)

