"""
–°–∏—Å—Ç–µ–º–∞ –±–∏–ª–ª–∏–Ω–≥–∞
–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞–º–∏, –ø–æ–¥–ø–∏—Å–∫–∞–º–∏ –∏ –¥–æ—Å—Ç—É–ø–æ–º –∫ —Ñ—É–Ω–∫—Ü–∏—è–º
"""
import logging
from typing import Dict, Any, Optional
from datetime import datetime
from app.db import users, subscriptions
from app.config.pricing import (
    get_tariff_info,
    get_feature_cost,
    TARIFFS
)
from . import balance_manager

log = logging.getLogger("billing")

async def check_access(user_id: int, feature: str) -> Dict[str, Any]:
    """
    –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ —Ñ—É–Ω–∫—Ü–∏–∏
    
    Args:
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        feature: –ù–∞–∑–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
        
    Returns:
        Dict —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –ø—Ä–æ–≤–µ—Ä–∫–∏
    """
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        is_blocked = await users.is_user_blocked(user_id)
        if is_blocked:
            return {
                "access": False,
                "reason": "user_blocked",
                "message": "‚ùå –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω"
            }
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ñ—É–Ω–∫—Ü–∏–∏
        cost = get_feature_cost(feature)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å (–∏—Å–ø–æ–ª—å–∑—É–µ–º dual_balance)
        balance_info = await get_user_dual_balance(user_id)
        balance = balance_info['total']
        
        if balance < cost:
            return {
                "access": False,
                "reason": "insufficient_funds",
                "message": (
                    f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç–æ–∫!\n\n"
                    f"–°—Ç–æ–∏–º–æ—Å—Ç—å: {cost} –º–æ–Ω–µ—Ç\n"
                    f"–í–∞—à –±–∞–ª–∞–Ω—Å: {balance} –º–æ–Ω–µ—Ç\n"
                    f"‚îú üü¢ –ü–æ–¥–ø–∏—Å–æ—á–Ω—ã–µ: {balance_info['subscription_coins']}\n"
                    f"‚îî üü£ –ü–æ—Å—Ç–æ—è–Ω–Ω—ã–µ: {balance_info['permanent_coins']}"
                ),
                "balance": balance,
                "cost": cost,
                "balance_details": balance_info
            }
        
        return {
            "access": True,
            "reason": "ok",
            "message": "‚úÖ –î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à–µ–Ω",
            "balance": balance,
            "cost": cost,
            "balance_details": balance_info
        }
        
    except Exception as e:
        log.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞ {user_id} –∫ {feature}: {e}")
        return {
            "access": False,
            "reason": "error",
            "message": "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞"
        }

async def deduct_coins_for_feature(
    user_id: int,
    feature: str,
    custom_cost: Optional[int] = None
) -> Dict[str, Any]:
    """
    –°–ø–∏—Å–∞—Ç—å –º–æ–Ω–µ—Ç–∫–∏ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
    
    Args:
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        feature: –ù–∞–∑–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
        custom_cost: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å (–µ—Å–ª–∏ None, –±–µ—Ä–µ—Ç—Å—è –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞)
        
    Returns:
        Dict —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –æ–ø–µ—Ä–∞—Ü–∏–∏
    """
    try:
        cost = custom_cost if custom_cost is not None else get_feature_cost(feature)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø
        access_check = await check_access(user_id, feature)
        if not access_check["access"]:
            return {
                "success": False,
                "reason": access_check["reason"],
                "message": access_check["message"]
            }
        
        # –°–ø–∏—Å—ã–≤–∞–µ–º –º–æ–Ω–µ—Ç–∫–∏ (—Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º: –ø–æ–¥–ø–∏—Å–æ—á–Ω—ã–µ ‚Üí –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–µ)
        result = await deduct_coins(user_id, cost)
        
        if not result['success']:
            return {
                "success": False,
                "reason": "deduction_failed",
                "message": result.get('error', '–û—à–∏–±–∫–∞ —Å–ø–∏—Å–∞–Ω–∏—è –º–æ–Ω–µ—Ç–æ–∫')
            }
        
        # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª–∏ —Å–ø–∏—Å–∞–Ω–∏—è
        log.info(
            f"üí∞ –°–ø–∏—Å–∞–Ω–æ {cost} –º–æ–Ω–µ—Ç —É user {user_id} –∑–∞ {feature}: "
            f"{result['deducted_from_subscription']}üü¢ + "
            f"{result['deducted_from_permanent']}üü£"
        )
        
        return {
            "success": True,
            "coins_spent": cost,
            "deducted_from_subscription": result['deducted_from_subscription'],
            "deducted_from_permanent": result['deducted_from_permanent'],
            "balance_after": result['new_balance']['total'],
            "balance_details": result['new_balance'],
            "message": (
                f"‚úÖ –°–ø–∏—Å–∞–Ω–æ {cost} –º–æ–Ω–µ—Ç\n"
                f"–û—Å—Ç–∞—Ç–æ–∫: {result['new_balance']['total']} –º–æ–Ω–µ—Ç"
            )
        }
            
    except Exception as e:
        log.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–ø–∏—Å–∞–Ω–∏—è –º–æ–Ω–µ—Ç–æ–∫ {user_id} –¥–ª—è {feature}: {e}")
        return {
            "success": False,
            "reason": "error",
            "message": "‚ùå –û—à–∏–±–∫–∞ —Å–ø–∏—Å–∞–Ω–∏—è –º–æ–Ω–µ—Ç–æ–∫"
        }

async def process_subscription_payment(
    user_id: int,
    tariff_name: str,
    payment_id: str
) -> Dict[str, Any]:
    """
    –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ–ø–ª–∞—Ç—É –ø–æ–¥–ø–∏—Å–∫–∏
    
    Args:
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        tariff_name: –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–∞
        payment_id: ID –ø–ª–∞—Ç–µ–∂–∞
        
    Returns:
        Dict —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –æ–±—Ä–∞–±–æ—Ç–∫–∏
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∞—Ä–∏—Ñ–µ
        tariff = get_tariff_info(tariff_name)
        if not tariff:
            return {
                "success": False,
                "reason": "tariff_not_found",
                "message": f"‚ùå –¢–∞—Ä–∏—Ñ {tariff_name} –Ω–µ –Ω–∞–π–¥–µ–Ω"
            }
        
        # –°–æ–∑–¥–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É
        subscription = await subscriptions.create_subscription(
            user_id=user_id,
            plan=tariff_name,
            coins_granted=tariff.coins,
            price_rub=tariff.price_rub,
            duration_days=tariff.duration_days,
            payment_id=payment_id
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ü–û–î–ü–ò–°–û–ß–ù–´–ï –º–æ–Ω–µ—Ç–∫–∏ (—Å–≥–æ—Ä–∞—é—Ç —á–µ—Ä–µ–∑ 30 –¥–Ω–µ–π)
        result = await add_subscription_coins(user_id, tariff.coins)
        new_balance = result['new_balance']['total']
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ —Å—Ç–∞—Ä—É—é —Å–∏—Å—Ç–µ–º—É –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        await balance_manager.add_coins(
            user_id=user_id,
            amount=tariff.coins,
            transaction_type="subscription",
            feature=f"subscription_{tariff_name}",
            note=f"–ü–æ–¥–ø–∏—Å–∫–∞ {tariff.title} ({tariff.duration_days} –¥–Ω–µ–π)",
            payment_id=payment_id
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–ª–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await users.update_user_plan(user_id, tariff_name)
        
        log.info(
            f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞: user={user_id}, plan={tariff_name}, "
            f"coins={tariff.coins}, balance={new_balance}"
        )
        
        return {
            "success": True,
            "subscription": subscription,
            "coins_added": tariff.coins,
            "balance": new_balance,
            "message": (
                f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ {tariff.icon} <b>{tariff.title}</b> –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!\n"
                f"–î–æ–±–∞–≤–ª–µ–Ω–æ {tariff.coins} –º–æ–Ω–µ—Ç–æ–∫\n"
                f"–í–∞—à –±–∞–ª–∞–Ω—Å: {new_balance} –º–æ–Ω–µ—Ç–æ–∫"
            )
        }
        
    except Exception as e:
        log.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ {user_id}: {e}")
        return {
            "success": False,
            "reason": "error",
            "message": "‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏"
        }

async def process_topup_payment(
    user_id: int,
    coins: int,
    price_rub: int,
    payment_id: str,
    bonus_coins: int = 0
) -> Dict[str, Any]:
    """
    –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ–ø–ª–∞—Ç—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
    
    Args:
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        coins: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–Ω–µ—Ç–æ–∫
        price_rub: –¶–µ–Ω–∞ –≤ —Ä—É–±–ª—è—Ö
        payment_id: ID –ø–ª–∞—Ç–µ–∂–∞
        bonus_coins: –ë–æ–Ω—É—Å–Ω—ã–µ –º–æ–Ω–µ—Ç–∫–∏
        
    Returns:
        Dict —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –æ–±—Ä–∞–±–æ—Ç–∫–∏
    """
    try:
        total_coins = coins + bonus_coins
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ü–û–°–¢–û–Ø–ù–ù–´–ï –º–æ–Ω–µ—Ç–∫–∏ (–Ω–µ —Å–≥–æ—Ä–∞—é—Ç)
        result = await add_permanent_coins(user_id, total_coins)
        new_balance = result['new_balance']['total']
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ —Å—Ç–∞—Ä—É—é —Å–∏—Å—Ç–µ–º—É –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        await balance_manager.add_coins(
            user_id=user_id,
            amount=total_coins,
            transaction_type="topup",
            feature="topup",
            note=f"–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ: {coins} –º–æ–Ω–µ—Ç–æ–∫" + (f" + {bonus_coins} –±–æ–Ω—É—Å" if bonus_coins > 0 else ""),
            payment_id=payment_id
        )
        
        log.info(
            f"‚úÖ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: user={user_id}, coins={total_coins}, "
            f"balance={new_balance}"
        )
        
        message = f"‚úÖ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ!\n–î–æ–±–∞–≤–ª–µ–Ω–æ {coins} –º–æ–Ω–µ—Ç–æ–∫"
        if bonus_coins > 0:
            message += f" + {bonus_coins} –±–æ–Ω—É—Å–Ω—ã—Ö"
        message += f"\n–í–∞—à –±–∞–ª–∞–Ω—Å: {new_balance} –º–æ–Ω–µ—Ç–æ–∫"
        
        return {
            "success": True,
            "coins_added": total_coins,
            "balance": new_balance,
            "message": message
        }
        
    except Exception as e:
        log.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è {user_id}: {e}")
        return {
            "success": False,
            "reason": "error",
            "message": "‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è"
        }

async def get_user_subscription_status(user_id: int) -> Dict[str, Any]:
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        status = await subscriptions.check_subscription_status(user_id)
        balance = await balance_manager.get_balance(user_id)
        
        return {
            **status,
            "balance": balance
        }
    except Exception as e:
        log.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–ø–∏—Å–∫–∏ {user_id}: {e}")
        return {
            "has_active": False,
            "plan": "free",
            "balance": 0,
            "expires_at": None,
            "days_left": 0
        }
