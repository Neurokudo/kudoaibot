"""
KudoAiBot - AI-powered Telegram bot
–†–∞–∑–¥–µ–ª—ã: –í–ò–î–ï–û (SORA 2, VEO 3), –§–û–¢–û, –ü–†–ò–ú–ï–†–û–ß–ù–ê–Ø
–° —É–º–Ω—ã–º –ø–æ–º–æ—â–Ω–∏–∫–æ–º, –º–µ–º–Ω—ã–º —Ä–µ–∂–∏–º–æ–º –∏ —Ä—É—á–Ω—ã–º —Ä–µ–∂–∏–º–æ–º
"""
import os
import logging
import asyncio
import signal
import sys
from aiohttp import web

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
def setup_logging():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    os.makedirs("logs", exist_ok=True)
    
    log_to_file = os.getenv("LOG_TO_FILE", "false").lower() == "true"
    
    handlers = [logging.StreamHandler()]
    if log_to_file:
        handlers.append(logging.FileHandler('logs/bot.log', encoding='utf-8'))
    
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s [%(levelname)s] %(name)s: %(message)s',
        handlers=handlers
    )
    
    log = logging.getLogger("kudoaibot")
    log.info("‚úÖ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ")
    return log

log = setup_logging()

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv("BOT_TOKEN")
DATABASE_URL = os.getenv("DATABASE_URL")
PUBLIC_URL = os.getenv("PUBLIC_URL")
TELEGRAM_MODE = os.getenv("TELEGRAM_MODE", "webhook")
PORT = int(os.getenv("PORT", 8080))

if not BOT_TOKEN:
    raise RuntimeError("‚ùå BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

if not DATABASE_URL:
    raise RuntimeError("‚ùå DATABASE_URL –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
if not PUBLIC_URL and TELEGRAM_MODE == "webhook":
    logging.warning("‚ö†Ô∏è PUBLIC_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è webhook —Ä–µ–∂–∏–º")

if not os.getenv("YOOKASSA_SECRET_KEY"):
    logging.warning("‚ö†Ô∏è YOOKASSA_SECRET_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω - –ø–ª–∞—Ç–µ–∂–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")

if not os.getenv("OPENAI_API_KEY"):
    logging.warning("‚ö†Ô∏è OPENAI_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω - SORA 2 –∏ GPT –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")

if not os.getenv("GCP_KEY_JSON_B64"):
    logging.warning("‚ö†Ô∏è GCP_KEY_JSON_B64 –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω - VEO 3 –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")

# –ò–º–ø–æ—Ä—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –±–æ—Ç–∞
from app.core import bot, dp, setup_bot, setup_web_app, graceful_shutdown

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ (–∏–º–ø–æ—Ä—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç —á–µ—Ä–µ–∑ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä—ã)
from app.handlers import commands, callbacks, payments, text

log.info("‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")

# –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è graceful shutdown
shutdown_event = asyncio.Event()

def signal_handler(signum, frame):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è graceful shutdown"""
    log.info(f"üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signum}, –Ω–∞—á–∏–Ω–∞–µ–º graceful shutdown...")
    shutdown_event.set()

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
        await setup_bot()
        
        if TELEGRAM_MODE == "webhook":
            # –†–µ–∂–∏–º webhook –¥–ª—è production
            app = await setup_web_app(dp, bot)
            
            webhook_url = f"{PUBLIC_URL}/webhook"
            await bot.set_webhook(webhook_url)
            log.info(f"‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {webhook_url}")
            
            runner = web.AppRunner(app)
            await runner.setup()
            site = web.TCPSite(runner, '0.0.0.0', PORT)
            await site.start()
            
            log.info(f"‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ —Ä–µ–∂–∏–º–µ webhook –Ω–∞ –ø–æ—Ä—Ç—É {PORT}")
            log.info(f"üåê PUBLIC_URL: {PUBLIC_URL}")
            
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
            signal.signal(signal.SIGTERM, signal_handler)
            signal.signal(signal.SIGINT, signal_handler)
            
            # –ñ–¥–µ–º —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            await shutdown_event.wait()
            
            # Graceful shutdown
            await graceful_shutdown()
            
        else:
            # –†–µ–∂–∏–º polling –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
            await bot.delete_webhook()
            log.info("‚úÖ Polling mode –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
            
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
            signal.signal(signal.SIGTERM, signal_handler)
            signal.signal(signal.SIGINT, signal_handler)
            
            try:
                log.info("üöÄ –ó–∞–ø—É—Å–∫ polling...")
                await dp.start_polling(bot)
            except Exception as e:
                log.error(f"‚ùå –û—à–∏–±–∫–∞ polling: {e}")
            finally:
                await graceful_shutdown()
                
    except Exception as e:
        log.exception(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {e}")
        raise

if __name__ == "__main__":
    try:
        log.info("=" * 50)
        log.info("üöÄ KudoAiBot starting...")
        log.info(f"üìä Mode: {TELEGRAM_MODE}")
        log.info(f"üîß Port: {PORT}")
        log.info(f"üåê URL: {PUBLIC_URL or 'N/A (polling)'}")
        log.info("=" * 50)
        
        asyncio.run(main())
        
    except KeyboardInterrupt:
        log.info("üõë –ü–æ–ª—É—á–µ–Ω KeyboardInterrupt")
    except Exception as e:
        log.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)
