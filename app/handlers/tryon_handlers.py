# app/handlers/tryon_handlers.py
"""–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π –ø—Ä–∏–º–µ—Ä–æ—á–Ω–æ–π"""

import logging
import asyncio
from aiogram.types import CallbackQuery, Message, InlineKeyboardMarkup
from aiogram import F

from app.services import billing
from app.ui.keyboards import btn
from .states import get_user_state, set_user_state, clear_user_state
from .commands import get_user_language

log = logging.getLogger("kudoaibot")

# === –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ü–†–ò–ú–ï–†–û–ß–ù–û–ô ===

async def callback_tryon_start(callback: CallbackQuery):
    """–ù–∞—á–∞—Ç—å –ø—Ä–∏–º–µ—Ä–∫—É - –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ñ–æ—Ç–æ —á–µ–ª–æ–≤–µ–∫–∞"""
    await callback.answer()
    user_id = callback.from_user.id
    user_language = await get_user_language(user_id)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    state = get_user_state(user_id)
    state.tryon_data = {
        "person": None,
        "garment": None,
        "dressed": None,
        "stage": "await_person"
    }
    set_user_state(user_id, state)
    
    start_text = "üì∏ <b>–®–∞–≥ 1 –∏–∑ 2</b>\n\n"
    start_text += "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —á–µ–ª–æ–≤–µ–∫–∞ –¥–ª—è –ø—Ä–∏–º–µ—Ä–∫–∏.\n\n"
    start_text += "‚ö†Ô∏è –î–ª—è –ª—É—á—à–µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:\n"
    start_text += "‚Ä¢ –ü–æ—Ä—Ç—Ä–µ—Ç–Ω–æ–µ —Ñ–æ—Ç–æ –≤ –ø–æ–ª–Ω—ã–π —Ä–æ—Å—Ç\n"
    start_text += "‚Ä¢ –•–æ—Ä–æ—à–µ–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ\n"
    start_text += "‚Ä¢ –ß–µ—Ç–∫–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"
    
    keyboard = [
        [btn("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", "menu_tryon")],
        [btn("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "home")]
    ]
    
    await callback.message.edit_text(
        start_text,
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
    )

async def callback_tryon_confirm(callback: CallbackQuery):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø—Ä–∏–º–µ—Ä–∫–∏ –∏ –∑–∞–ø—É—Å–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"""
    await callback.answer()
    user_id = callback.from_user.id
    
    state = get_user_state(user_id)
    tryon_data = state.tryon_data
    
    if not tryon_data.get("person") or not tryon_data.get("garment"):
        await callback.message.edit_text(
            "‚ùå –ù—É–∂–Ω–æ –¥–≤–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: —á–µ–ª–æ–≤–µ–∫ –∏ –æ–¥–µ–∂–¥–∞.\n\n–ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [btn("üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", "menu_tryon")],
                [btn("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "home")]
            ])
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø
    access = await billing.check_access(user_id, "tryon_basic")
    if not access['access']:
        await callback.message.edit_text(
            f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç–æ–∫!\n\n"
            f"üí∞ –ù—É–∂–Ω–æ: {access.get('cost', 6)} –º–æ–Ω–µ—Ç\n"
            f"üí≥ –£ –≤–∞—Å: {access.get('balance', 0)} –º–æ–Ω–µ—Ç\n\n"
            f"–ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –≤ –ø—Ä–æ—Ñ–∏–ª–µ.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [btn("üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å", "show_topup")],
                [btn("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "home")]
            ])
        )
        return
    
    # –°–ø–∏—Å—ã–≤–∞–µ–º –º–æ–Ω–µ—Ç–∫–∏
    deduct_result = await billing.deduct_coins_for_feature(user_id, "tryon_basic")
    
    if not deduct_result['success']:
        await callback.message.edit_text(
            deduct_result['message'],
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [btn("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "home")]
            ])
        )
        return
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–ø–∏—Å–∞–Ω–∏–∏
    deduction_info = (
        f"üí∞ <b>–°–ø–∏—Å–∞–Ω–æ:</b> {deduct_result['coins_spent']} –º–æ–Ω–µ—Ç\n"
        f"üí≥ <b>–û—Å—Ç–∞—Ç–æ–∫:</b> {deduct_result['balance_after']} –º–æ–Ω–µ—Ç\n\n"
    )
    
    await callback.message.edit_text("‚è≥ –î–µ–ª–∞—é –ø—Ä–∏–º–µ—Ä–∫—É‚Ä¶ –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ 2 –º–∏–Ω—É—Ç.")
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–º–µ—Ä–∫—É
        from app.services.clients.tryon_client import virtual_tryon
        
        log.info(f"TRYON user {user_id}: Starting virtual try-on")
        
        loop = asyncio.get_event_loop()
        result_bytes = await loop.run_in_executor(
            None,
            virtual_tryon,
            tryon_data["person"],
            tryon_data["garment"],
            1
        )
        
        log.info(f"TRYON user {user_id}: Success, result size: {len(result_bytes)}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        tryon_data["dressed"] = result_bytes
        tryon_data["stage"] = "after"
        state.tryon_data = tryon_data
        set_user_state(user_id, state)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        from aiogram.types import BufferedInputFile
        photo_file = BufferedInputFile(result_bytes, filename="tryon_result.png")
        
        result_text = f"‚úÖ <b>–ì–æ—Ç–æ–≤–æ! –û–¥–µ–∂–¥–∞ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–∞ –Ω–∞ —á–µ–ª–æ–≤–µ–∫–∞.</b>\n\n{deduction_info}"
        result_text += "–ß—Ç–æ –¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?"
        
        keyboard = [
            [btn("üîÑ –î—Ä—É–≥–∞—è –æ–¥–µ–∂–¥–∞", "tryon_reset")],
            [btn("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "home")]
        ]
        
        await callback.message.answer_photo(
            photo=photo_file,
            caption=result_text,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
        )
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–î–µ–ª–∞—é –ø—Ä–∏–º–µ—Ä–∫—É..."
        try:
            await callback.message.delete()
        except:
            pass
            
    except Exception as e:
        log.exception(f"TRYON user {user_id}: Failed with error: {e}")
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –º–æ–Ω–µ—Ç–∫–∏
        try:
            from app.services.dual_balance import add_permanent_coins
            await add_permanent_coins(user_id, deduct_result['coins_spent'])
            log.info(f"TRYON user {user_id}: Refunded {deduct_result['coins_spent']} coins")
            
            await callback.message.edit_text(
                f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ—Ä–æ—á–Ω–æ–π: {str(e)}\n\n"
                f"üí∞ –í–æ–∑–≤—Ä–∞—â–µ–Ω–æ: {deduct_result['coins_spent']} –º–æ–Ω–µ—Ç\n"
                f"üí≥ –ë–∞–ª–∞–Ω—Å: {deduct_result['balance_after'] + deduct_result['coins_spent']} –º–æ–Ω–µ—Ç\n\n"
                f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [btn("üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", "menu_tryon")],
                    [btn("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "home")]
                ])
            )
        except Exception as refund_error:
            log.error(f"TRYON user {user_id}: Refund failed: {refund_error}")
            await callback.message.edit_text(
                f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ—Ä–æ—á–Ω–æ–π: {str(e)}\n\n"
                f"–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –º–æ–Ω–µ—Ç.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [btn("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "home")]
                ])
            )

async def callback_tryon_swap(callback: CallbackQuery):
    """–ü–æ–º–µ–Ω—è—Ç—å –º–µ—Å—Ç–∞–º–∏ —á–µ–ª–æ–≤–µ–∫–∞ –∏ –æ–¥–µ–∂–¥—É"""
    await callback.answer()
    user_id = callback.from_user.id
    
    state = get_user_state(user_id)
    tryon_data = state.tryon_data
    
    if tryon_data.get("person") and tryon_data.get("garment"):
        # –ú–µ–Ω—è–µ–º –º–µ—Å—Ç–∞–º–∏
        tryon_data["person"], tryon_data["garment"] = tryon_data["garment"], tryon_data["person"]
        state.tryon_data = tryon_data
        set_user_state(user_id, state)
        
        await callback.answer("üîÑ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–º–µ–Ω—è–Ω—ã –º–µ—Å—Ç–∞–º–∏", show_alert=True)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        confirm_text = "‚úÖ <b>–§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω—ã!</b>\n\n"
        confirm_text += "üì∏ –ß–µ–ª–æ–≤–µ–∫: –∑–∞–≥—Ä—É–∂–µ–Ω\n"
        confirm_text += "üëï –û–¥–µ–∂–¥–∞: –∑–∞–≥—Ä—É–∂–µ–Ω–∞\n\n"
        confirm_text += "üí∏ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> 6 –º–æ–Ω–µ—Ç\n\n"
        confirm_text += "–ì–æ—Ç–æ–≤—ã –∫ –ø—Ä–∏–º–µ—Ä–∫–µ?"
        
        keyboard = [
            [btn("‚ú® –ü—Ä–∏–º–µ—Ä–∏—Ç—å", "tryon_confirm")],
            [btn("üîÅ –ü–æ–º–µ–Ω—è—Ç—å –º–µ—Å—Ç–∞–º–∏", "tryon_swap")],
            [btn("‚ùå –°–±—Ä–æ—Å–∏—Ç—å", "tryon_reset")],
            [btn("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "home")]
        ]
        
        await callback.message.edit_text(
            confirm_text,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
        )
    else:
        await callback.answer("‚ùå –ù—É–∂–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å –æ–±–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", show_alert=True)

async def callback_tryon_reset(callback: CallbackQuery):
    """–°–±—Ä–æ—Å–∏—Ç—å –ø—Ä–∏–º–µ—Ä–∫—É –∏ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ"""
    await callback.answer()
    user_id = callback.from_user.id
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    state = get_user_state(user_id)
    state.tryon_data = {
        "person": None,
        "garment": None,
        "dressed": None,
        "stage": "await_person"
    }
    set_user_state(user_id, state)
    
    reset_text = "üîÑ <b>–ü—Ä–∏–º–µ—Ä–∫–∞ —Å–±—Ä–æ—à–µ–Ω–∞</b>\n\n"
    reset_text += "–ù–∞—á–Ω–µ–º –∑–∞–Ω–æ–≤–æ?\n\n"
    reset_text += "üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —á–µ–ª–æ–≤–µ–∫–∞ –¥–ª—è –ø—Ä–∏–º–µ—Ä–∫–∏."
    
    keyboard = [
        [btn("üì∏ –ù–∞—á–∞—Ç—å", "tryon_start")],
        [btn("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "home")]
    ]
    
    await callback.message.edit_text(
        reset_text,
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
    )

# === –û–ë–†–ê–ë–û–¢–ß–ò–ö –§–û–¢–û –î–õ–Ø –ü–†–ò–ú–ï–†–û–ß–ù–û–ô ===

async def handle_tryon_photo(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ –¥–ª—è –ø—Ä–∏–º–µ—Ä–æ—á–Ω–æ–π"""
    user_id = message.from_user.id
    state = get_user_state(user_id)
    
    if not state.tryon_data:
        # –ù–µ –≤ —Ä–µ–∂–∏–º–µ –ø—Ä–∏–º–µ—Ä–æ—á–Ω–æ–π
        return False
    
    tryon_data = state.tryon_data
    stage = tryon_data.get("stage")
    
    if stage not in ["await_person", "await_garment"]:
        # –ù–µ –æ–∂–∏–¥–∞–µ–º —Ñ–æ—Ç–æ
        return False
    
    # –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ
    try:
        from app.core.bot import get_bot
        bot, _ = get_bot()
        
        photo = message.photo[-1]  # –ë–µ—Ä–µ–º —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ —Ñ–æ—Ç–æ
        file = await bot.download(photo.file_id)
        photo_bytes = file.read()
        
        if stage == "await_person":
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ —á–µ–ª–æ–≤–µ–∫–∞
            tryon_data["person"] = photo_bytes
            tryon_data["stage"] = "await_garment"
            state.tryon_data = tryon_data
            set_user_state(user_id, state)
            
            person_text = "‚úÖ <b>–§–æ—Ç–æ —á–µ–ª–æ–≤–µ–∫–∞ –ø–æ–ª—É—á–µ–Ω–æ!</b>\n\n"
            person_text += "üëï <b>–®–∞–≥ 2 –∏–∑ 2</b>\n\n"
            person_text += "–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –æ–¥–µ–∂–¥—ã.\n\n"
            person_text += "‚ö†Ô∏è –î–ª—è –ª—É—á—à–µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:\n"
            person_text += "‚Ä¢ –û–¥–µ–∂–¥–∞ –Ω–∞ –±–µ–ª–æ–º —Ñ–æ–Ω–µ\n"
            person_text += "‚Ä¢ –ß–µ—Ç–∫–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ\n"
            person_text += "‚Ä¢ –•–æ—Ä–æ—à–æ –≤–∏–¥–Ω—ã –¥–µ—Ç–∞–ª–∏"
            
            keyboard = [
                [btn("‚ùå –°–±—Ä–æ—Å–∏—Ç—å", "tryon_reset")],
                [btn("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "home")]
            ]
            
            await message.answer(
                person_text,
                reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
            )
            
        elif stage == "await_garment":
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ –æ–¥–µ–∂–¥—ã
            tryon_data["garment"] = photo_bytes
            tryon_data["stage"] = "confirm"
            state.tryon_data = tryon_data
            set_user_state(user_id, state)
            
            confirm_text = "‚úÖ <b>–§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω—ã!</b>\n\n"
            confirm_text += "üì∏ –ß–µ–ª–æ–≤–µ–∫: –∑–∞–≥—Ä—É–∂–µ–Ω\n"
            confirm_text += "üëï –û–¥–µ–∂–¥–∞: –∑–∞–≥—Ä—É–∂–µ–Ω–∞\n\n"
            confirm_text += "üí∏ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> 6 –º–æ–Ω–µ—Ç\n\n"
            confirm_text += "–ì–æ—Ç–æ–≤—ã –∫ –ø—Ä–∏–º–µ—Ä–∫–µ?"
            
            keyboard = [
                [btn("‚ú® –ü—Ä–∏–º–µ—Ä–∏—Ç—å", "tryon_confirm")],
                [btn("üîÅ –ü–æ–º–µ–Ω—è—Ç—å –º–µ—Å—Ç–∞–º–∏", "tryon_swap")],
                [btn("‚ùå –°–±—Ä–æ—Å–∏—Ç—å", "tryon_reset")],
                [btn("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "home")]
            ]
            
            await message.answer(
                confirm_text,
                reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
            )
        
        return True
        
    except Exception as e:
        log.error(f"Error handling tryon photo for user {user_id}: {e}")
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [btn("üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", "menu_tryon")],
                [btn("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "home")]
            ])
        )
        return True

