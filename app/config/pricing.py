"""
–°–∏—Å—Ç–µ–º–∞ —Ü–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è KudoAiBot
–í—Å–µ —Ç–∞—Ä–∏—Ñ—ã, —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Ñ—É–Ω–∫—Ü–∏–π –∏ –ø–∞–∫–µ—Ç—ã –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
"""
from dataclasses import dataclass
from typing import Dict, List, Optional

@dataclass
class Tariff:
    """–¢–∞—Ä–∏—Ñ –ø–æ–¥–ø–∏—Å–∫–∏"""
    name: str
    title: str
    price_rub: int
    coins: int
    duration_days: int
    icon: str
    description: str

@dataclass
class TopupPack:
    """–ü–∞–∫–µ—Ç –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –º–æ–Ω–µ—Ç–æ–∫"""
    coins: int
    price_rub: int
    bonus_coins: int = 0  # –ë–æ–Ω—É—Å–Ω—ã–µ –º–æ–Ω–µ—Ç–∫–∏ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ

@dataclass
class FeatureCost:
    """–°—Ç–æ–∏–º–æ—Å—Ç—å —Ñ—É–Ω–∫—Ü–∏–∏"""
    feature: str
    coins: int
    description: str
    category: str

# ===== –¢–ê–†–ò–§–´ –ù–ê –ü–û–î–ü–ò–°–ö–£ (30 –¥–Ω–µ–π) =====
TARIFFS: Dict[str, Tariff] = {
    "lite": Tariff(
        name="lite",
        title="–õ–∞–π—Ç",
        price_rub=1990,
        coins=250,
        duration_days=30,
        icon="‚ú®",
        description="–ë–∞–∑–æ–≤—ã–π —Ç–∞—Ä–∏—Ñ –¥–ª—è –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö"
    ),
    "standard": Tariff(
        name="standard",
        title="–°—Ç–∞–Ω–¥–∞—Ä—Ç",
        price_rub=2990,
        coins=400,
        duration_days=30,
        icon="‚≠ê",
        description="–û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π —Ç–∞—Ä–∏—Ñ –¥–ª—è —Ä–µ–≥—É–ª—è—Ä–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"
    ),
    "pro": Tariff(
        name="pro",
        title="–ü—Ä–æ",
        price_rub=4990,
        coins=750,
        duration_days=30,
        icon="üíé",
        description="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ç–∞—Ä–∏—Ñ –¥–ª—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª–æ–≤"
    )
}

# ===== –°–¢–û–ò–ú–û–°–¢–¨ –§–£–ù–ö–¶–ò–ô –í –ú–û–ù–ï–¢–ö–ê–• =====
FEATURE_COSTS: Dict[str, int] = {
    # –í–∏–¥–µ–æ Veo 3
    "video_6s_mute": 14,      # 6 —Å–µ–∫ –±–µ–∑ –∑–≤—É–∫–∞
    "video_8s_mute": 18,      # 8 —Å–µ–∫ –±–µ–∑ –∑–≤—É–∫–∞
    "video_8s_audio": 26,     # 8 —Å–µ–∫ —Å–æ –∑–≤—É–∫–æ–º
    
    # –§–æ—Ç–æ-–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
    "image_basic": 1,         # –ë–∞–∑–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å —Ñ–æ—Ç–æ
    "image_upscale": 2,       # –£–≤–µ–ª–∏—á–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞
    "image_enhance": 3,       # –£–ª—É—á—à–µ–Ω–∏–µ —Ñ–æ—Ç–æ
    
    # –í–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è –ø—Ä–∏–º–µ—Ä–æ—á–Ω–∞—è
    "virtual_tryon": 3,       # Try-On (1 —Ä–µ–∑—É–ª—å—Ç–∞—Ç)
    "virtual_tryon_batch": 8, # Try-On (3 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞)
    
    # –î—Ä—É–≥–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
    "json_generation": 26,    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è JSON –¥–ª—è –≤–∏–¥–µ–æ
}

# ===== –û–ü–ò–°–ê–ù–ò–Ø –§–£–ù–ö–¶–ò–ô =====
FEATURE_DESCRIPTIONS: Dict[str, str] = {
    "video_6s_mute": "üé¨ –í–∏–¥–µ–æ Veo 3 (6 —Å–µ–∫, –±–µ–∑ –∑–≤—É–∫–∞)",
    "video_8s_mute": "üé¨ –í–∏–¥–µ–æ Veo 3 (8 —Å–µ–∫, –±–µ–∑ –∑–≤—É–∫–∞)",
    "video_8s_audio": "üé¨ –í–∏–¥–µ–æ Veo 3 (8 —Å–µ–∫, —Å–æ –∑–≤—É–∫–æ–º)",
    "image_basic": "üì∏ –ë–∞–∑–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å —Ñ–æ—Ç–æ",
    "image_upscale": "üì∏ –£–≤–µ–ª–∏—á–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞ —Ñ–æ—Ç–æ",
    "image_enhance": "üì∏ –£–ª—É—á—à–µ–Ω–∏–µ —Ñ–æ—Ç–æ",
    "virtual_tryon": "üëó –í–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è –ø—Ä–∏–º–µ—Ä–æ—á–Ω–∞—è (1 –æ–±—Ä–∞–∑)",
    "virtual_tryon_batch": "üëó –í–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è –ø—Ä–∏–º–µ—Ä–æ—á–Ω–∞—è (3 –æ–±—Ä–∞–∑–∞)",
    "json_generation": "üîß JSON –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–ª—è –≤–∏–¥–µ–æ",
}

# ===== –ü–ê–ö–ï–¢–´ –ü–û–ü–û–õ–ù–ï–ù–ò–Ø –ú–û–ù–ï–¢–û–ö =====
TOPUP_PACKS: List[TopupPack] = [
    TopupPack(coins=50, price_rub=990, bonus_coins=0),
    TopupPack(coins=120, price_rub=1990, bonus_coins=10),
    TopupPack(coins=250, price_rub=3990, bonus_coins=30),
    TopupPack(coins=500, price_rub=7490, bonus_coins=75),
]

# ===== –ö–ê–¢–ï–ì–û–†–ò–ò –§–£–ù–ö–¶–ò–ô =====
FEATURE_CATEGORIES: Dict[str, List[str]] = {
    "video": ["video_6s_mute", "video_8s_mute", "video_8s_audio"],
    "photo": ["image_basic", "image_upscale", "image_enhance"],
    "tryon": ["virtual_tryon", "virtual_tryon_batch"],
    "other": ["json_generation"],
}

# ===== –°–ï–ë–ï–°–¢–û–ò–ú–û–°–¢–¨ (–¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏) =====
COGS_USD: Dict[str, float] = {
    "video_6s_mute": 0.70,
    "video_8s_mute": 0.80,
    "video_8s_audio": 1.20,
    "image_basic": 0.02,
    "image_upscale": 0.04,
    "image_enhance": 0.06,
    "virtual_tryon": 0.12,
    "virtual_tryon_batch": 0.30,
}

# ===== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò =====

def get_tariff_info(tariff_name: str) -> Optional[Tariff]:
    """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∞—Ä–∏—Ñ–µ"""
    return TARIFFS.get(tariff_name)

def get_feature_cost(feature: str) -> int:
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ñ—É–Ω–∫—Ü–∏–∏ –≤ –º–æ–Ω–µ—Ç–∫–∞—Ö"""
    return FEATURE_COSTS.get(feature, 1)

def get_feature_description(feature: str) -> str:
    """–ü–æ–ª—É—á–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏"""
    return FEATURE_DESCRIPTIONS.get(feature, feature)

def get_topup_pack(coins: int) -> Optional[TopupPack]:
    """–ü–æ–ª—É—á–∏—Ç—å –ø–∞–∫–µ—Ç –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –º–æ–Ω–µ—Ç–æ–∫"""
    for pack in TOPUP_PACKS:
        if pack.coins == coins:
            return pack
    return None

def format_price(price_rub: int) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Ü–µ–Ω—É –≤ —Ä—É–±–ª—è—Ö"""
    return f"{price_rub:,} ‚ÇΩ".replace(",", " ")

def calculate_tariff_examples(coins: int) -> Dict[str, int]:
    """–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –ø—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –¥–ª—è —Ç–∞—Ä–∏—Ñ–∞"""
    return {
        "video_6s_mute": coins // FEATURE_COSTS["video_6s_mute"],
        "video_8s_mute": coins // FEATURE_COSTS["video_8s_mute"],
        "video_8s_audio": coins // FEATURE_COSTS["video_8s_audio"],
        "virtual_tryon": coins // FEATURE_COSTS["virtual_tryon"],
        "image_basic": coins // FEATURE_COSTS["image_basic"],
    }

def format_tariffs_text() -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Å —Ç–∞—Ä–∏—Ñ–∞–º–∏"""
    lines = ["üí∞ <b>–¢–∞—Ä–∏—Ñ—ã –Ω–∞ 30 –¥–Ω–µ–π</b>\n"]
    
    for key, tariff in TARIFFS.items():
        lines.append(f"{tariff.icon} <b>{tariff.title}</b> ‚Äî {format_price(tariff.price_rub)}")
        lines.append(f"‚îú {tariff.coins} –º–æ–Ω–µ—Ç–æ–∫")
        lines.append(f"‚îî {tariff.description}\n")
        
        examples = calculate_tariff_examples(tariff.coins)
        lines.append("–ß—Ç–æ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å:")
        lines.append(f"‚Ä¢ –¥–æ {examples['video_8s_audio']} –≤–∏–¥–µ–æ (8 —Å–µ–∫, —Å–æ –∑–≤—É–∫–æ–º)")
        lines.append(f"‚Ä¢ –∏–ª–∏ –¥–æ {examples['video_8s_mute']} –≤–∏–¥–µ–æ (8 —Å–µ–∫, –±–µ–∑ –∑–≤—É–∫–∞)")
        lines.append(f"‚Ä¢ –∏–ª–∏ –¥–æ {examples['virtual_tryon']} –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã—Ö –ø—Ä–∏–º–µ—Ä–æ–∫")
        lines.append(f"‚Ä¢ –∏–ª–∏ –¥–æ {examples['image_basic']} —Ñ–æ—Ç–æ-–æ–ø–µ—Ä–∞—Ü–∏–π")
        lines.append("")
    
    return "\n".join(lines)

def format_feature_costs_text() -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Å–æ —Å—Ç–æ–∏–º–æ—Å—Ç—å—é —Ñ—É–Ω–∫—Ü–∏–π"""
    lines = ["üí° <b>–°—Ç–æ–∏–º–æ—Å—Ç—å —Ñ—É–Ω–∫—Ü–∏–π:</b>\n"]
    
    # –í–∏–¥–µ–æ
    lines.append("üé¨ <b>–í–∏–¥–µ–æ Veo 3:</b>")
    lines.append(f"‚Ä¢ 6 —Å–µ–∫ –±–µ–∑ –∑–≤—É–∫–∞ ‚Äî {FEATURE_COSTS['video_6s_mute']} –º–æ–Ω–µ—Ç–æ–∫")
    lines.append(f"‚Ä¢ 8 —Å–µ–∫ –±–µ–∑ –∑–≤—É–∫–∞ ‚Äî {FEATURE_COSTS['video_8s_mute']} –º–æ–Ω–µ—Ç–æ–∫")
    lines.append(f"‚Ä¢ 8 —Å–µ–∫ —Å–æ –∑–≤—É–∫–æ–º ‚Äî {FEATURE_COSTS['video_8s_audio']} –º–æ–Ω–µ—Ç–æ–∫\n")
    
    # –§–æ—Ç–æ
    lines.append("üì∏ <b>–§–æ—Ç–æ-–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã:</b>")
    lines.append(f"‚Ä¢ –ë–∞–∑–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ ‚Äî {FEATURE_COSTS['image_basic']} –º–æ–Ω–µ—Ç–∫–∞")
    lines.append(f"‚Ä¢ –£–≤–µ–ª–∏—á–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞ ‚Äî {FEATURE_COSTS['image_upscale']} –º–æ–Ω–µ—Ç–∫–∏")
    lines.append(f"‚Ä¢ –£–ª—É—á—à–µ–Ω–∏–µ —Ñ–æ—Ç–æ ‚Äî {FEATURE_COSTS['image_enhance']} –º–æ–Ω–µ—Ç–∫–∏\n")
    
    # Try-On
    lines.append("üëó <b>–í–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è –ø—Ä–∏–º–µ—Ä–æ—á–Ω–∞—è:</b>")
    lines.append(f"‚Ä¢ 1 –æ–±—Ä–∞–∑ ‚Äî {FEATURE_COSTS['virtual_tryon']} –º–æ–Ω–µ—Ç–∫–∏")
    lines.append(f"‚Ä¢ 3 –æ–±—Ä–∞–∑–∞ ‚Äî {FEATURE_COSTS['virtual_tryon_batch']} –º–æ–Ω–µ—Ç–æ–∫\n")
    
    return "\n".join(lines)

def format_topup_packs_text() -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Å –ø–∞–∫–µ—Ç–∞–º–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è"""
    lines = ["‚ûï <b>–ü–∞–∫–µ—Ç—ã –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:</b>\n"]
    
    for pack in TOPUP_PACKS:
        total_coins = pack.coins + pack.bonus_coins
        if pack.bonus_coins > 0:
            lines.append(
                f"‚Ä¢ {total_coins} –º–æ–Ω–µ—Ç–æ–∫ ({pack.coins} + {pack.bonus_coins} –±–æ–Ω—É—Å) ‚Äî "
                f"{format_price(pack.price_rub)}"
            )
        else:
            lines.append(f"‚Ä¢ {pack.coins} –º–æ–Ω–µ—Ç–æ–∫ ‚Äî {format_price(pack.price_rub)}")
    
    lines.append("\nüí° –ú–æ–Ω–µ—Ç–∫–∏ –Ω–µ —Å–≥–æ—Ä–∞—é—Ç –∏ –¥–æ—Å—Ç—É–ø–Ω—ã –±–µ–∑ –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏!")
    
    return "\n".join(lines)

def get_full_pricing_text() -> str:
    """–ü–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç —Å —Ü–µ–Ω–∞–º–∏"""
    return "\n".join([
        format_tariffs_text(),
        format_feature_costs_text(),
        format_topup_packs_text(),
    ])
