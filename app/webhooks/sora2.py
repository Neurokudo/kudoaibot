# app/webhooks/sora2.py
"""Webhook –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback –æ—Ç SORA 2"""

import logging
from aiohttp import web

from app.db import users
from app.ui import t
from app.ui.keyboards import build_video_result_menu
from app.config.pricing import get_feature_cost
from app.services.clients.sora_client import extract_user_from_metadata
from app.core.bot import bot

log = logging.getLogger("kudoaibot")

async def sora2_callback(request):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –æ—Ç OpenAI SORA 2"""
    try:
        data = await request.json()
        log.info(f"üé¨ SORA 2 callback received: {data}")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –≤–∏–¥–µ–æ
        video_id = data.get("id")
        status = data.get("status")
        metadata = data.get("metadata", {})
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º user_id
        user_id = extract_user_from_metadata(metadata)
        
        if status == "completed" and user_id:
            # –ü–æ–ª—É—á–∞–µ–º URL –≤–∏–¥–µ–æ
            video_data = data.get("output", {})
            video_url = video_data.get("url")
            
            if video_url:
                # –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                user = await users.get_user(user_id)
                user_language = user.get('language', 'ru') if user else 'ru'
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                try:
                    await bot.send_video(
                        user_id,
                        video=video_url,
                        caption=t("video.success", cost=get_feature_cost("video_8s_audio")),
                        reply_markup=build_video_result_menu(user_language),
                        parse_mode="HTML"
                    )
                    log.info(f"‚úÖ SORA 2 video sent to user {user_id}")
                    
                except Exception as video_error:
                    log.error(f"‚ùå Failed to send SORA 2 video to user {user_id}: {video_error}")
                    
                    # Fallback - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É
                    try:
                        await bot.send_message(
                            user_id,
                            f"‚ú® <b>–í–∏–¥–µ–æ –≥–æ—Ç–æ–≤–æ!</b>\n\n"
                            f"üìπ <a href='{video_url}'>–°–º–æ—Ç—Ä–µ—Ç—å –≤–∏–¥–µ–æ</a>\n\n"
                            f"üí∞ –°–ø–∏—Å–∞–Ω–æ: {get_feature_cost('video_8s_audio')} –º–æ–Ω–µ—Ç–æ–∫",
                            parse_mode="HTML"
                        )
                    except Exception as fallback_error:
                        log.error(f"‚ùå Fallback also failed: {fallback_error}")
            else:
                log.error(f"‚ùå No video URL in SORA 2 callback for user {user_id}")
        
        elif status == "failed" and user_id:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –º–æ–Ω–µ—Ç–∫–∏
            error_data = data.get("error", {})
            error_message = error_data.get("message", "Unknown error")
            
            log.info(f"‚ùå SORA 2 generation failed for user {user_id}: {error_message}")
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –º–æ–Ω–µ—Ç–∫–∏ –Ω–∞ –±–∞–ª–∞–Ω—Å
            try:
                # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                user = await users.get_user(user_id)
                if user:
                    current_balance = user.get('videos_left', 0)
                    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤–∏–¥–µ–æ
                    cost = get_feature_cost("video_8s_audio")
                    new_balance = current_balance + cost
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
                    await users.update_user_balance(user_id, new_balance)
                    
                    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    await bot.send_message(
                        user_id,
                        f"‚ùå <b>–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ SORA 2</b>\n\n"
                        f"–ü—Ä–∏—á–∏–Ω–∞: {error_message}\n\n"
                        f"üí∞ –ú–æ–Ω–µ—Ç–∫–∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –Ω–∞ –±–∞–ª–∞–Ω—Å (+{cost})",
                        parse_mode="HTML"
                    )
                    log.info(f"‚úÖ Refunded {cost} coins to user {user_id}")
                    
            except Exception as refund_error:
                log.error(f"‚ùå Error refunding coins to user {user_id}: {refund_error}")
        
        else:
            log.info(f"‚ÑπÔ∏è SORA 2 callback status: {status} (user_id: {user_id})")
        
        return web.Response(text="OK")
        
    except Exception as e:
        log.error(f"‚ùå Error in SORA 2 callback: {e}")
        import traceback
        log.error(f"‚ùå Traceback: {traceback.format_exc()}")
        return web.Response(text="Error", status=500)

