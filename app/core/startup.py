# app/core/startup.py
"""–§—É–Ω–∫—Ü–∏–∏ –∑–∞–ø—É—Å–∫–∞ –∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–∞"""

import os
import logging
import asyncio
from aiohttp import web
from aiogram import types

from app.db import database, subscriptions
from .bot import get_bot

log = logging.getLogger("kudoaibot")

async def setup_bot():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
    log.info("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞...")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    db_ok = await database.init_db()
    if not db_ok:
        log.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ë–î")
        raise RuntimeError("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
    
    log.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
    log.info("‚úÖ –¢–∞–±–ª–∏—Ü—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω—ã/–æ–±–Ω–æ–≤–ª–µ–Ω—ã")
    
    # –ó–∞–ø—É—Å–∫ –∑–∞–¥–∞—á–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å—Ç–µ–∫—à–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫
    asyncio.create_task(check_expired_subscriptions_task())
    log.info("‚úÖ –ó–∞–¥–∞—á–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫ –∑–∞–ø—É—â–µ–Ω–∞")
    
    # –ó–∞–ø—É—Å–∫ –∑–∞–¥–∞—á–∏ –æ—á–∏—Å—Ç–∫–∏ –ø–æ–¥–ø–∏—Å–æ—á–Ω—ã—Ö –º–æ–Ω–µ—Ç
    from app.services.coin_expiration import coin_expiration_task
    asyncio.create_task(coin_expiration_task())
    log.info("‚úÖ –ó–∞–¥–∞—á–∞ –æ—á–∏—Å—Ç–∫–∏ –ø–æ–¥–ø–∏—Å–æ—á–Ω—ã—Ö –º–æ–Ω–µ—Ç –∑–∞–ø—É—â–µ–Ω–∞")

async def check_expired_subscriptions_task():
    """–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å—Ç–µ–∫—à–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫"""
    while True:
        try:
            await asyncio.sleep(3600)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π —á–∞—Å
            expired_count = await subscriptions.deactivate_expired_subscriptions()
            if expired_count > 0:
                log.info(f"‚úÖ –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ {expired_count} –∏—Å—Ç–µ–∫—à–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫")
        except Exception as e:
            log.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫: {e}")

async def graceful_shutdown():
    """Graceful shutdown —Ñ—É–Ω–∫—Ü–∏–∏"""
    log.info("üõë –ù–∞—á–∏–Ω–∞–µ–º graceful shutdown...")
    
    try:
        bot, dp = get_bot()
        TELEGRAM_MODE = os.getenv("TELEGRAM_MODE", "webhook")
        
        if TELEGRAM_MODE == "webhook":
            try:
                await bot.delete_webhook()
                log.info("‚úÖ Webhook —É–¥–∞–ª–µ–Ω")
            except Exception as e:
                log.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è webhook: {e}")
        
        try:
            await bot.session.close()
            log.info("‚úÖ –°–µ—Å—Å–∏—è –±–æ—Ç–∞ –∑–∞–∫—Ä—ã—Ç–∞")
        except Exception as e:
            log.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–µ—Å—Å–∏–∏ –±–æ—Ç–∞: {e}")
    except Exception as e:
        log.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ—Ç–∞ –¥–ª—è shutdown: {e}")
    
    try:
        await database.close_db()
        log.info("‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î –∑–∞–∫—Ä—ã—Ç–æ")
    except Exception as e:
        log.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ë–î: {e}")
    
    log.info("‚úÖ Graceful shutdown –∑–∞–≤–µ—Ä—à–µ–Ω")

async def setup_web_app(dp, bot) -> web.Application:
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è web –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    log.info("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è web –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
    
    app = web.Application()
    
    async def telegram_webhook(request):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ Telegram webhook"""
        try:
            data = await request.json()
            update = types.Update(**data)
            await dp.feed_update(bot, update)
            return web.Response(text="OK", status=200)
        except Exception as e:
            log.exception(f"Webhook error: {e}")
            return web.Response(text="Error", status=500)
    
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º webhooks
    from app.webhooks.yookassa import yookassa_webhook
    from app.webhooks.sora2 import sora2_callback
    
    # –ú–∞—Ä—à—Ä—É—Ç—ã
    app.router.add_get('/', lambda _: web.Response(text="Bot is running ‚úÖ"))
    app.router.add_post('/webhook', telegram_webhook)
    app.router.add_post('/yookassa_webhook', yookassa_webhook)
    app.router.add_post('/sora_callback', sora2_callback)
    
    log.info("‚úÖ Web –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ")
    return app

