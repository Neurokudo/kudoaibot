# app/handlers/payments.py
"""–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π –∏ –ø–æ–∫—É–ø–∫–∏ —Ç–∞—Ä–∏—Ñ–æ–≤"""

import logging
from aiogram import F, types
from aiogram.types import CallbackQuery

from app.services.yookassa_service import (
    create_subscription_payment,
    create_topup_payment
)
from app.config.pricing import get_tariff_info, get_topup_pack
from app.ui import Actions
from app.core.bot import dp

log = logging.getLogger("kudoaibot")

@dp.callback_query(F.data.startswith("buy_tariff_"))
async def handle_buy_tariff(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∫—É–ø–∫–∏ —Ç–∞—Ä–∏—Ñ–∞"""
    await callback.answer()
    
    tariff_name = callback.data.replace("buy_tariff_", "")
    user_id = callback.from_user.id
    
    tariff = get_tariff_info(tariff_name)
    
    if not tariff:
        await callback.message.edit_text("‚ùå –¢–∞—Ä–∏—Ñ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    payment_result = create_subscription_payment(
        user_id=user_id,
        tariff_name=tariff_name,
        price_rub=tariff.price_rub
    )
    
    if not payment_result['success']:
        await callback.message.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞: {payment_result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}"
        )
        return
    
    payment_text = (
        f"{tariff.icon} <b>{tariff.title}</b>\n\n"
        f"üí∞ –¶–µ–Ω–∞: {tariff.price_rub} ‚ÇΩ\n"
        f"üíé –ú–æ–Ω–µ—Ç–æ–∫: {tariff.coins}\n"
        f"üìÖ –°—Ä–æ–∫: {tariff.duration_days} –¥–Ω–µ–π\n\n"
        f"–î–ª—è –æ–ø–ª–∞—Ç—ã –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ:"
    )
    
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", url=payment_result['confirmation_url'])],
        [types.InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data=Actions.HOME)]
    ])
    
    await callback.message.edit_text(payment_text, reply_markup=keyboard)

@dp.callback_query(F.data.startswith("buy_topup_"))
async def handle_buy_topup(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∫—É–ø–∫–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è"""
    await callback.answer()
    
    coins = int(callback.data.replace("buy_topup_", ""))
    user_id = callback.from_user.id
    
    pack = get_topup_pack(coins)
    
    if not pack:
        await callback.message.edit_text("‚ùå –ü–∞–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    payment_result = create_topup_payment(
        user_id=user_id,
        coins=pack.coins,
        price_rub=pack.price_rub
    )
    
    if not payment_result['success']:
        await callback.message.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞: {payment_result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}"
        )
        return
    
    total_coins = pack.coins + pack.bonus_coins
    payment_text = (
        f"üí∞ <b>–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ {total_coins} –º–æ–Ω–µ—Ç–æ–∫</b>\n\n"
        f"üí≥ –¶–µ–Ω–∞: {pack.price_rub} ‚ÇΩ\n"
    )
    if pack.bonus_coins > 0:
        payment_text += f"üéÅ –ë–æ–Ω—É—Å: {pack.bonus_coins} –º–æ–Ω–µ—Ç–æ–∫\n\n"
    else:
        payment_text += "\n"
    
    payment_text += "–î–ª—è –æ–ø–ª–∞—Ç—ã –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ:"
    
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", url=payment_result['confirmation_url'])],
        [types.InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data=Actions.HOME)]
    ])
    
    await callback.message.edit_text(payment_text, reply_markup=keyboard)

