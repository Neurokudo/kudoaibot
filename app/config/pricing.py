"""
–°–∏—Å—Ç–µ–º–∞ —Ü–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è KudoAiBot (–æ–±–Ω–æ–≤–ª—ë–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
–î–≤–µ —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–µ—Ç–æ–∫: –ø–æ–¥–ø–∏—Å–æ—á–Ω—ã–µ (—Å–≥–æ—Ä–∞—é—Ç) –∏ –∫—É–ø–ª–µ–Ω–Ω—ã–µ (–≤–µ—á–Ω—ã–µ)
"""
from dataclasses import dataclass
from typing import Dict, List, Optional

@dataclass
class Tariff:
    """–¢–∞—Ä–∏—Ñ –ø–æ–¥–ø–∏—Å–∫–∏ (–º–æ–Ω–µ—Ç–∫–∏ —Å–≥–æ—Ä–∞—é—Ç —á–µ—Ä–µ–∑ 30 –¥–Ω–µ–π)"""
    name: str
    title: str
    price_rub: int
    coins: int              # –ü–æ–¥–ø–∏—Å–æ—á–Ω—ã–µ –º–æ–Ω–µ—Ç–∫–∏
    duration_days: int
    icon: str
    description: str
    bonus_percent: int = 0  # –ü—Ä–æ—Ü–µ–Ω—Ç –±–æ–Ω—É—Å–∞

@dataclass
class TopupPack:
    """–ü–∞–∫–µ—Ç –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è (–º–æ–Ω–µ—Ç–∫–∏ –ù–ï —Å–≥–æ—Ä–∞—é—Ç)"""
    coins: int
    price_rub: int
    bonus_coins: int = 0    # –ë–æ–Ω—É—Å–Ω—ã–µ –º–æ–Ω–µ—Ç–∫–∏ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ
    bonus_percent: int = 0  # –ü—Ä–æ—Ü–µ–Ω—Ç –±–æ–Ω—É—Å–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è

@dataclass
class FeatureCost:
    """–°—Ç–æ–∏–º–æ—Å—Ç—å —Ñ—É–Ω–∫—Ü–∏–∏"""
    feature: str
    coins: int
    description: str
    category: str
    cogs_usd: float  # –°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å –≤ USD

# ===== –¢–ê–†–ò–§–´ –ù–ê –ü–û–î–ü–ò–°–ö–£ (–º–æ–Ω–µ—Ç–∫–∏ —Å–≥–æ—Ä–∞—é—Ç —á–µ—Ä–µ–∑ 30 –¥–Ω–µ–π) =====
TARIFFS: Dict[str, Tariff] = {
    "trial": Tariff(
        name="trial",
        title="–ü—Ä–æ–±–Ω—ã–π",
        price_rub=390,
        coins=60,
        duration_days=30,
        icon="üå±",
        description="–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞",
        bonus_percent=0
    ),
    "basic": Tariff(
        name="basic",
        title="–ë–∞–∑–æ–≤—ã–π",
        price_rub=990,
        coins=180,
        duration_days=30,
        icon="‚ú®",
        description="–î–ª—è —Ä–µ–≥—É–ª—è—Ä–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è",
        bonus_percent=20
    ),
    "standard": Tariff(
        name="standard",
        title="–°—Ç–∞–Ω–¥–∞—Ä—Ç",
        price_rub=1990,
        coins=400,
        duration_days=30,
        icon="‚≠ê",
        description="–û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –≤—ã–±–æ—Ä –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
        bonus_percent=30
    ),
    "premium": Tariff(
        name="premium",
        title="–ü—Ä–µ–º–∏—É–º",
        price_rub=4990,
        coins=1100,
        duration_days=30,
        icon="üíé",
        description="–ú–∞–∫—Å–∏–º—É–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π",
        bonus_percent=40
    ),
    "pro_sora": Tariff(
        name="pro_sora",
        title="PRO Sora 2",
        price_rub=7490,
        coins=1600,
        duration_days=30,
        icon="üî•",
        description="–î–ª—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª–æ–≤ - HQ –≤–∏–¥–µ–æ Sora 2 Pro",
        bonus_percent=50
    )
}

# ===== –°–¢–û–ò–ú–û–°–¢–¨ –§–£–ù–ö–¶–ò–ô –í –ú–û–ù–ï–¢–ö–ê–• =====
# –†–∞—Å—á—ë—Ç: —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å √ó –º–∞—Ä–∂–∞ (2.5-4.5x)
FEATURE_COSTS: Dict[str, int] = {
    # === –í–ò–î–ï–û ===
    # Veo 3 Fast (9 ‚ÇΩ/—Å–µ–∫ ‚Üí 3 –º–æ–Ω/—Å–µ–∫)
    "veo3_fast_6s": 18,        # 6 —Å–µ–∫ √ó 3 = 18 –º–æ–Ω–µ—Ç
    "veo3_fast_8s": 24,        # 8 —Å–µ–∫ √ó 3 = 24 –º–æ–Ω–µ—Ç—ã
    
    # Veo 3 (18 ‚ÇΩ/—Å–µ–∫ ‚Üí 5 –º–æ–Ω/—Å–µ–∫)
    "veo3_6s": 30,             # 6 —Å–µ–∫ √ó 5 = 30 –º–æ–Ω–µ—Ç
    "veo3_8s": 40,             # 8 —Å–µ–∫ √ó 5 = 40 –º–æ–Ω–µ—Ç
    
    # Veo 3 Audio (36 ‚ÇΩ/—Å–µ–∫ ‚Üí 8 –º–æ–Ω/—Å–µ–∫)
    "veo3_audio_6s": 48,       # 6 —Å–µ–∫ √ó 8 = 48 –º–æ–Ω–µ—Ç
    "veo3_audio_8s": 64,       # 8 —Å–µ–∫ √ó 8 = 64 –º–æ–Ω–µ—Ç—ã
    
    # Sora 2 Pro (27-45 ‚ÇΩ/—Å–µ–∫ ‚Üí 12 –º–æ–Ω/—Å–µ–∫)
    "sora2_pro_5s": 60,        # 5 —Å–µ–∫ √ó 12 = 60 –º–æ–Ω–µ—Ç
    "sora2_pro_10s": 120,      # 10 —Å–µ–∫ √ó 12 = 120 –º–æ–Ω–µ—Ç
    "sora2_pro_20s": 240,      # 20 —Å–µ–∫ √ó 12 = 240 –º–æ–Ω–µ—Ç
    
    # === –§–û–¢–û ===
    # Gemini (13.5 ‚ÇΩ/–æ–ø–µ—Ä–∞—Ü–∏—è ‚Üí 4 –º–æ–Ω–µ—Ç–∫–∏)
    "photo_enhance": 4,        # –£–ª—É—á—à–µ–Ω–∏–µ —Ñ–æ—Ç–æ
    "photo_remove_bg": 4,      # –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–æ–Ω–∞
    "photo_retouch": 4,        # –†–µ—Ç—É—à—å
    "photo_style": 4,          # –°–º–µ–Ω–∞ —Å—Ç–∏–ª—è
    
    # === –ü–†–ò–ú–ï–†–û–ß–ù–ê–Ø ===
    # Imagen Try-On
    "tryon_basic": 6,          # 1 –æ–±—Ä–∞–∑ (12 ‚ÇΩ ‚Üí 6 –º–æ–Ω–µ—Ç)
    "tryon_pro": 15,           # 3 –æ–±—Ä–∞–∑–∞ (30 ‚ÇΩ ‚Üí 15 –º–æ–Ω–µ—Ç)
    "tryon_fashion": 10,       # –ú–æ–¥–Ω—ã–π —Å—Ç–∏–ª—å
    
    # –û–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å (—Å—Ç–∞—Ä—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è)
    "video_6s_mute": 30,       # Veo 3
    "video_8s_mute": 40,       # Veo 3
    "video_8s_audio": 64,      # Veo 3 Audio
    "virtual_tryon": 6,        # Try-On –±–∞–∑–æ–≤—ã–π
}

# ===== –û–ü–ò–°–ê–ù–ò–Ø –§–£–ù–ö–¶–ò–ô =====
FEATURE_DESCRIPTIONS: Dict[str, str] = {
    # –í–∏–¥–µ–æ
    "veo3_fast_6s": "üé¨ Veo 3 Fast (6 —Å–µ–∫)",
    "veo3_fast_8s": "üé¨ Veo 3 Fast (8 —Å–µ–∫)",
    "veo3_6s": "üé¨ Veo 3 (6 —Å–µ–∫)",
    "veo3_8s": "üé¨ Veo 3 (8 —Å–µ–∫)",
    "veo3_audio_6s": "üé¨ Veo 3 Audio (6 —Å–µ–∫, —Å–æ –∑–≤—É–∫–æ–º)",
    "veo3_audio_8s": "üé¨ Veo 3 Audio (8 —Å–µ–∫, —Å–æ –∑–≤—É–∫–æ–º)",
    "sora2_pro_5s": "üåü Sora 2 Pro (5 —Å–µ–∫)",
    "sora2_pro_10s": "üåü Sora 2 Pro (10 —Å–µ–∫)",
    "sora2_pro_20s": "üåü Sora 2 Pro (20 —Å–µ–∫)",
    
    # –§–æ—Ç–æ
    "photo_enhance": "üì∏ –£–ª—É—á—à–µ–Ω–∏–µ —Ñ–æ—Ç–æ",
    "photo_remove_bg": "üì∏ –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–æ–Ω–∞",
    "photo_retouch": "üì∏ –†–µ—Ç—É—à—å",
    "photo_style": "üì∏ –°–º–µ–Ω–∞ —Å—Ç–∏–ª—è",
    
    # –ü—Ä–∏–º–µ—Ä–æ—á–Ω–∞—è
    "tryon_basic": "üëó –ü—Ä–∏–º–µ—Ä–æ—á–Ω–∞—è (1 –æ–±—Ä–∞–∑)",
    "tryon_pro": "üëó –ü—Ä–∏–º–µ—Ä–æ—á–Ω–∞—è (3 –æ–±—Ä–∞–∑–∞)",
    "tryon_fashion": "üëó –ú–æ–¥–Ω—ã–π —Å—Ç–∏–ª—å",
}

# ===== –°–ï–ë–ï–°–¢–û–ò–ú–û–°–¢–¨ –í USD =====
COGS_USD: Dict[str, float] = {
    # –í–∏–¥–µ–æ (–∏–∑ –±—Ä–∏—Ñ–∞)
    "veo3_fast_6s": 0.60,      # 9 ‚ÇΩ/—Å–µ–∫ √ó 6 —Å–µ–∫ / 90
    "veo3_fast_8s": 0.80,      # 9 ‚ÇΩ/—Å–µ–∫ √ó 8 —Å–µ–∫ / 90
    "veo3_6s": 1.20,           # 18 ‚ÇΩ/—Å–µ–∫ √ó 6 —Å–µ–∫ / 90
    "veo3_8s": 1.60,           # 18 ‚ÇΩ/—Å–µ–∫ √ó 8 —Å–µ–∫ / 90
    "veo3_audio_6s": 2.40,     # 36 ‚ÇΩ/—Å–µ–∫ √ó 6 —Å–µ–∫ / 90
    "veo3_audio_8s": 3.20,     # 36 ‚ÇΩ/—Å–µ–∫ √ó 8 —Å–µ–∫ / 90
    "sora2_pro_5s": 1.50,      # 27 ‚ÇΩ/—Å–µ–∫ √ó 5 —Å–µ–∫ / 90
    "sora2_pro_10s": 3.00,     # 27 ‚ÇΩ/—Å–µ–∫ √ó 10 —Å–µ–∫ / 90
    "sora2_pro_20s": 6.00,     # 27 ‚ÇΩ/—Å–µ–∫ √ó 20 —Å–µ–∫ / 90
    
    # –§–æ—Ç–æ
    "photo_enhance": 0.15,     # 13.5 ‚ÇΩ / 90
    "photo_remove_bg": 0.15,
    "photo_retouch": 0.15,
    "photo_style": 0.15,
    
    # –ü—Ä–∏–º–µ—Ä–æ—á–Ω–∞—è
    "tryon_basic": 0.13,       # 12 ‚ÇΩ / 90
    "tryon_pro": 0.33,         # 30 ‚ÇΩ / 90
    "tryon_fashion": 0.22,
}

# ===== –ü–ê–ö–ï–¢–´ –ü–û–ü–û–õ–ù–ï–ù–ò–Ø (–º–æ–Ω–µ—Ç–∫–∏ –ù–ï —Å–≥–æ—Ä–∞—é—Ç) =====
TOPUP_PACKS: List[TopupPack] = [
    TopupPack(coins=50, price_rub=990, bonus_coins=0, bonus_percent=0),
    TopupPack(coins=120, price_rub=1990, bonus_coins=10, bonus_percent=8),
    TopupPack(coins=250, price_rub=3990, bonus_coins=30, bonus_percent=12),
    TopupPack(coins=500, price_rub=7490, bonus_coins=75, bonus_percent=15),
]

# ===== –ö–ê–¢–ï–ì–û–†–ò–ò –§–£–ù–ö–¶–ò–ô =====
FEATURE_CATEGORIES: Dict[str, List[str]] = {
    "video_fast": ["veo3_fast_6s", "veo3_fast_8s"],
    "video_standard": ["veo3_6s", "veo3_8s"],
    "video_audio": ["veo3_audio_6s", "veo3_audio_8s"],
    "video_sora": ["sora2_pro_5s", "sora2_pro_10s", "sora2_pro_20s"],
    "photo": ["photo_enhance", "photo_remove_bg", "photo_retouch", "photo_style"],
    "tryon": ["tryon_basic", "tryon_pro", "tryon_fashion"],
}

# ===== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò =====

def get_tariff_info(tariff_name: str) -> Optional[Tariff]:
    """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∞—Ä–∏—Ñ–µ"""
    return TARIFFS.get(tariff_name)

def get_feature_cost(feature: str) -> int:
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ñ—É–Ω–∫—Ü–∏–∏ –≤ –º–æ–Ω–µ—Ç–∫–∞—Ö"""
    return FEATURE_COSTS.get(feature, 1)

def get_feature_description(feature: str) -> str:
    """–ü–æ–ª—É—á–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏"""
    return FEATURE_DESCRIPTIONS.get(feature, feature)

def get_topup_pack(coins: int) -> Optional[TopupPack]:
    """–ü–æ–ª—É—á–∏—Ç—å –ø–∞–∫–µ—Ç –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –º–æ–Ω–µ—Ç–æ–∫"""
    for pack in TOPUP_PACKS:
        if pack.coins == coins:
            return pack
    return None

def format_price(price_rub: int) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Ü–µ–Ω—É –≤ —Ä—É–±–ª—è—Ö"""
    return f"{price_rub:,} ‚ÇΩ".replace(",", " ")

def calculate_video_count(coins: int, feature: str = "veo3_8s") -> int:
    """–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∏–¥–µ–æ –¥–ª—è —Ç–∞—Ä–∏—Ñ–∞"""
    cost = get_feature_cost(feature)
    return coins // cost if cost > 0 else 0

def format_tariffs_text() -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Å —Ç–∞—Ä–∏—Ñ–∞–º–∏"""
    lines = ["üíé <b>–ü–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ 30 –¥–Ω–µ–π</b>"]
    lines.append("üü¢ –ú–æ–Ω–µ—Ç–∫–∏ —Å–≥–æ—Ä–∞—é—Ç —á–µ—Ä–µ–∑ 30 –¥–Ω–µ–π\n")
    
    for key, tariff in TARIFFS.items():
        video_count = calculate_video_count(tariff.coins, "veo3_8s")
        
        lines.append(f"{tariff.icon} <b>{tariff.title}</b> ‚Äî {format_price(tariff.price_rub)}")
        lines.append(f"‚îú {tariff.coins} –º–æ–Ω–µ—Ç–æ–∫")
        
        if tariff.bonus_percent > 0:
            lines.append(f"‚îú üéÅ –ë–æ–Ω—É—Å +{tariff.bonus_percent}%")
        
        lines.append(f"‚îî –ü—Ä–∏–º–µ—Ä–Ω–æ {video_count} –≤–∏–¥–µ–æ (8 —Å–µ–∫)\n")
    
    return "\n".join(lines)

def format_topup_packs_text() -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Å –ø–∞–∫–µ—Ç–∞–º–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è"""
    lines = ["üí∞ <b>–ü–∞–∫–µ—Ç—ã –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è</b>"]
    lines.append("üü£ –ú–æ–Ω–µ—Ç–∫–∏ –ù–ï —Å–≥–æ—Ä–∞—é—Ç –Ω–∏–∫–æ–≥–¥–∞!\n")
    
    for pack in TOPUP_PACKS:
        total_coins = pack.coins + pack.bonus_coins
        if pack.bonus_coins > 0:
            lines.append(
                f"‚Ä¢ {total_coins} –º–æ–Ω–µ—Ç ({pack.coins} + {pack.bonus_coins} –±–æ–Ω—É—Å üéÅ) ‚Äî "
                f"{format_price(pack.price_rub)}"
            )
        else:
            lines.append(f"‚Ä¢ {pack.coins} –º–æ–Ω–µ—Ç ‚Äî {format_price(pack.price_rub)}")
    
    lines.append("\nüí° –ú–æ–Ω–µ—Ç–∫–∏ –æ—Å—Ç–∞—é—Ç—Å—è –Ω–∞–≤—Å–µ–≥–¥–∞ –∏ —Ä–∞–±–æ—Ç–∞—é—Ç –±–µ–∑ –ø–æ–¥–ø–∏—Å–∫–∏!")
    
    return "\n".join(lines)

def format_feature_costs_text() -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Å–æ —Å—Ç–æ–∏–º–æ—Å—Ç—å—é —Ñ—É–Ω–∫—Ü–∏–π"""
    lines = ["üí° <b>–°—Ç–æ–∏–º–æ—Å—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–π:</b>\n"]
    
    # –í–∏–¥–µ–æ
    lines.append("üé¨ <b>–í–∏–¥–µ–æ Veo 3 Fast:</b>")
    lines.append(f"‚Ä¢ 6 —Å–µ–∫ ‚Äî {FEATURE_COSTS['veo3_fast_6s']} –º–æ–Ω–µ—Ç (3 –º–æ–Ω/—Å–µ–∫)")
    lines.append(f"‚Ä¢ 8 —Å–µ–∫ ‚Äî {FEATURE_COSTS['veo3_fast_8s']} –º–æ–Ω–µ—Ç\n")
    
    lines.append("üé¨ <b>–í–∏–¥–µ–æ Veo 3:</b>")
    lines.append(f"‚Ä¢ 6 —Å–µ–∫ ‚Äî {FEATURE_COSTS['veo3_6s']} –º–æ–Ω–µ—Ç (5 –º–æ–Ω/—Å–µ–∫)")
    lines.append(f"‚Ä¢ 8 —Å–µ–∫ ‚Äî {FEATURE_COSTS['veo3_8s']} –º–æ–Ω–µ—Ç\n")
    
    lines.append("üé¨ <b>–í–∏–¥–µ–æ Veo 3 Audio:</b>")
    lines.append(f"‚Ä¢ 6 —Å–µ–∫ ‚Äî {FEATURE_COSTS['veo3_audio_6s']} –º–æ–Ω–µ—Ç (8 –º–æ–Ω/—Å–µ–∫)")
    lines.append(f"‚Ä¢ 8 —Å–µ–∫ ‚Äî {FEATURE_COSTS['veo3_audio_8s']} –º–æ–Ω–µ—Ç\n")
    
    lines.append("üåü <b>Sora 2 Pro:</b>")
    lines.append(f"‚Ä¢ 5 —Å–µ–∫ ‚Äî {FEATURE_COSTS['sora2_pro_5s']} –º–æ–Ω–µ—Ç (12 –º–æ–Ω/—Å–µ–∫)")
    lines.append(f"‚Ä¢ 10 —Å–µ–∫ ‚Äî {FEATURE_COSTS['sora2_pro_10s']} –º–æ–Ω–µ—Ç")
    lines.append(f"‚Ä¢ 20 —Å–µ–∫ ‚Äî {FEATURE_COSTS['sora2_pro_20s']} –º–æ–Ω–µ—Ç\n")
    
    # –§–æ—Ç–æ
    lines.append("üì∏ <b>–§–æ—Ç–æ (Gemini):</b>")
    lines.append(f"‚Ä¢ –£–ª—É—á—à–µ–Ω–∏–µ ‚Äî {FEATURE_COSTS['photo_enhance']} –º–æ–Ω–µ—Ç—ã")
    lines.append(f"‚Ä¢ –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–æ–Ω–∞ ‚Äî {FEATURE_COSTS['photo_remove_bg']} –º–æ–Ω–µ—Ç—ã")
    lines.append(f"‚Ä¢ –†–µ—Ç—É—à—å ‚Äî {FEATURE_COSTS['photo_retouch']} –º–æ–Ω–µ—Ç—ã\n")
    
    # –ü—Ä–∏–º–µ—Ä–æ—á–Ω–∞—è
    lines.append("üëó <b>–í–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è –ø—Ä–∏–º–µ—Ä–æ—á–Ω–∞—è:</b>")
    lines.append(f"‚Ä¢ 1 –æ–±—Ä–∞–∑ ‚Äî {FEATURE_COSTS['tryon_basic']} –º–æ–Ω–µ—Ç")
    lines.append(f"‚Ä¢ 3 –æ–±—Ä–∞–∑–∞ ‚Äî {FEATURE_COSTS['tryon_pro']} –º–æ–Ω–µ—Ç")
    lines.append(f"‚Ä¢ –ú–æ–¥–Ω—ã–π —Å—Ç–∏–ª—å ‚Äî {FEATURE_COSTS['tryon_fashion']} –º–æ–Ω–µ—Ç\n")
    
    return "\n".join(lines)

def get_full_pricing_text() -> str:
    """–ü–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç —Å —Ü–µ–Ω–∞–º–∏"""
    return "\n".join([
        format_tariffs_text(),
        "",
        format_topup_packs_text(),
        "",
        format_feature_costs_text(),
    ])

def calculate_margin(feature: str) -> float:
    """–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –º–∞—Ä–∂—É –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏"""
    cost_coins = FEATURE_COSTS.get(feature, 0)
    cogs = COGS_USD.get(feature, 0)
    
    if cogs == 0:
        return 0
    
    # –ü—Ä–∏–º–µ—Ä–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –º–æ–Ω–µ—Ç–∫–∏ ~18-20 ‚ÇΩ
    # –î–ª—è —Ä–∞—Å—á—ë—Ç–∞ –±–µ—Ä—ë–º —Å—Ä–µ–¥–Ω—é—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –∏–∑ —Ç–∞—Ä–∏—Ñ–∞ "–°—Ç–∞–Ω–¥–∞—Ä—Ç"
    coin_price_rub = TARIFFS["standard"].price_rub / TARIFFS["standard"].coins  # ~4.97 ‚ÇΩ/–º–æ–Ω–µ—Ç–∫–∞
    
    revenue_rub = cost_coins * coin_price_rub
    cogs_rub = cogs * 90  # USD ‚Üí RUB
    
    margin = ((revenue_rub - cogs_rub) / cogs_rub) * 100 if cogs_rub > 0 else 0
    
    return round(margin, 1)
