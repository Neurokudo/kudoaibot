"""
–°–∏—Å—Ç–µ–º–∞ —Ü–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è KudoAiBot (—Ñ–∏–Ω–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å–æ–≥–ª–∞—Å–Ω–æ –±—Ä–∏—Ñ—É)
–î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π —Ä–∞—Å—á—ë—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏ –º–æ–¥–µ–ª–∏
"""
from dataclasses import dataclass
from typing import Dict, List, Optional

# ===== –ö–û–ù–°–¢–ê–ù–¢–´ –î–õ–Ø –†–ê–°–ß–Å–¢–ê =====

# –°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å –≤ —Ä—É–±–ª—è—Ö –∑–∞ —Å–µ–∫—É–Ω–¥—É/–æ–ø–µ—Ä–∞—Ü–∏—é
COSTS_RUB = {
    "VEO3_FAST": 9,         # ‚ÇΩ/—Å–µ–∫
    "VEO3": 18,             # ‚ÇΩ/—Å–µ–∫
    "VEO3_AUDIO": 36,       # ‚ÇΩ/—Å–µ–∫
    "SORA2_PRO": 30,        # ‚ÇΩ/—Å–µ–∫ (27-45 —Å—Ä–µ–¥–Ω–µ–µ)
    "GEMINI": 13.5,         # ‚ÇΩ/–æ–ø–µ—Ä–∞—Ü–∏—è
    "IMAGEN_TRYON": 15      # ‚ÇΩ/–æ–ø–µ—Ä–∞—Ü–∏—è
}

# –°—Ç–æ–∏–º–æ—Å—Ç—å –º–æ–Ω–µ—Ç–∫–∏ –≤ —Ä—É–±–ª—è—Ö
COIN_RATE = 3  # 1 –º–æ–Ω–µ—Ç–∞ = 3 —Ä—É–±–ª—è

# –¶–µ–ª–µ–≤–∞—è –º–∞—Ä–∂–∞ (–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç)
TARGET_MARGIN = {
    "VEO3_FAST": 3.0,       # 3√ó –º–∞—Ä–∂–∞
    "VEO3": 2.8,            # 2.8√ó –º–∞—Ä–∂–∞
    "VEO3_AUDIO": 2.7,      # 2.7√ó –º–∞—Ä–∂–∞
    "SORA2_PRO": 4.0,       # 4√ó –º–∞—Ä–∂–∞ (–ø—Ä–µ–º–∏—É–º)
    "GEMINI": 3.0,          # 3√ó –º–∞—Ä–∂–∞
    "IMAGEN_TRYON": 3.5     # 3.5√ó –º–∞—Ä–∂–∞
}

# ===== –†–ê–°–ß–Å–¢ –°–¢–û–ò–ú–û–°–¢–ò –í –ú–û–ù–ï–¢–ê–• =====

def calculate_coins_per_second(model: str) -> int:
    """
    –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤ –º–æ–Ω–µ—Ç–∞—Ö –∑–∞ —Å–µ–∫—É–Ω–¥—É
    
    –§–æ—Ä–º—É–ª–∞: (–°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å ‚ÇΩ/—Å–µ–∫ √ó –ú–∞—Ä–∂–∞) / –°—Ç–æ–∏–º–æ—Å—Ç—å –º–æ–Ω–µ—Ç–∫–∏
    """
    cost_rub = COSTS_RUB.get(model, 0)
    margin = TARGET_MARGIN.get(model, 3.0)
    
    price_rub = cost_rub * margin
    coins = price_rub / COIN_RATE
    
    return int(round(coins))

# –ú–æ–Ω–µ—Ç –∑–∞ —Å–µ–∫—É–Ω–¥—É –¥–ª—è –∫–∞–∂–¥–æ–π –º–æ–¥–µ–ª–∏
COINS_PER_SECOND = {
    "VEO3_FAST": calculate_coins_per_second("VEO3_FAST"),    # 3 –º–æ–Ω/—Å–µ–∫ (9√ó3/3)
    "VEO3": calculate_coins_per_second("VEO3"),              # 5 –º–æ–Ω/—Å–µ–∫ (18√ó2.8/3)
    "VEO3_AUDIO": calculate_coins_per_second("VEO3_AUDIO"),  # 8 –º–æ–Ω/—Å–µ–∫ (36√ó2.7/3)
    "SORA2_PRO": calculate_coins_per_second("SORA2_PRO"),    # 12 –º–æ–Ω/—Å–µ–∫ (30√ó4/3)
}

# –ú–æ–Ω–µ—Ç –∑–∞ –æ–ø–µ—Ä–∞—Ü–∏—é –¥–ª—è —Å–µ—Ä–≤–∏—Å–æ–≤
COINS_PER_OPERATION = {
    "GEMINI": int(round(COSTS_RUB["GEMINI"] * TARGET_MARGIN["GEMINI"] / COIN_RATE)),        # 4 –º–æ–Ω
    "IMAGEN_TRYON": int(round(COSTS_RUB["IMAGEN_TRYON"] * TARGET_MARGIN["IMAGEN_TRYON"] / COIN_RATE))  # 6 –º–æ–Ω
}

@dataclass
class Tariff:
    """–¢–∞—Ä–∏—Ñ –ø–æ–¥–ø–∏—Å–∫–∏"""
    name: str
    title: str
    price_rub: int
    coins: int              # –ü–æ–¥–ø–∏—Å–æ—á–Ω—ã–µ –º–æ–Ω–µ—Ç–∫–∏ (—Å–≥–æ—Ä–∞—é—Ç —á–µ—Ä–µ–∑ 30 –¥–Ω–µ–π)
    duration_days: int
    icon: str
    description: str
    bonus_percent: int = 0

@dataclass
class TopupPack:
    """–ü–∞–∫–µ—Ç –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è (–º–æ–Ω–µ—Ç–∫–∏ –ù–ï —Å–≥–æ—Ä–∞—é—Ç)"""
    coins: int
    price_rub: int
    bonus_coins: int = 0
    bonus_percent: int = 0
    margin_percent: int = 0  # –†–µ–∞–ª—å–Ω–∞—è –º–∞—Ä–∂–∞

# ===== –¢–ê–†–ò–§–´ (–ø–æ–¥–ø–∏—Å–æ—á–Ω—ã–µ –º–æ–Ω–µ—Ç–∫–∏, —Å–≥–æ—Ä–∞—é—Ç —á–µ—Ä–µ–∑ 30 –¥–Ω–µ–π) =====
TARIFFS: Dict[str, Tariff] = {
    "trial": Tariff(
        name="trial",
        title="–ü—Ä–æ–±–Ω—ã–π",
        price_rub=390,
        coins=60,
        duration_days=30,
        icon="üå±",
        description="2-3 –≤–∏–¥–µ–æ",
        bonus_percent=0
    ),
    "basic": Tariff(
        name="basic",
        title="–ë–∞–∑–æ–≤—ã–π",
        price_rub=990,
        coins=180,
        duration_days=30,
        icon="‚ú®",
        description="5-6 –≤–∏–¥–µ–æ",
        bonus_percent=20
    ),
    "standard": Tariff(
        name="standard",
        title="–°—Ç–∞–Ω–¥–∞—Ä—Ç",
        price_rub=1990,
        coins=400,
        duration_days=30,
        icon="‚≠ê",
        description="12-15 –≤–∏–¥–µ–æ",
        bonus_percent=30
    ),
    "premium": Tariff(
        name="premium",
        title="–ü—Ä–µ–º–∏—É–º",
        price_rub=4990,
        coins=1100,
        duration_days=30,
        icon="üíé",
        description="30-40 –≤–∏–¥–µ–æ",
        bonus_percent=40
    ),
    "pro": Tariff(
        name="pro",
        title="PRO",
        price_rub=7490,
        coins=1600,
        duration_days=30,
        icon="üî•",
        description="20-25 HQ –≤–∏–¥–µ–æ",
        bonus_percent=50
    )
}

# ===== –ü–ê–ö–ï–¢–´ –ü–û–ü–û–õ–ù–ï–ù–ò–Ø (–ø–æ—Å—Ç–æ—è–Ω–Ω—ã–µ –º–æ–Ω–µ—Ç–∫–∏, –ù–ï —Å–≥–æ—Ä–∞—é—Ç) =====
# –°–æ–≥–ª–∞—Å–Ω–æ follow-up –±—Ä–∏—Ñ—É: –±–æ–Ω—É—Å—ã 0%, 8%, 12%, 15%
TOPUP_PACKS: List[TopupPack] = [
    TopupPack(coins=50, price_rub=990, bonus_coins=0, bonus_percent=0, margin_percent=40),
    TopupPack(coins=120, price_rub=1990, bonus_coins=10, bonus_percent=8, margin_percent=45),   # 120 + 10 = 130
    TopupPack(coins=250, price_rub=3990, bonus_coins=30, bonus_percent=12, margin_percent=50),  # 250 + 30 = 280
    TopupPack(coins=500, price_rub=7490, bonus_coins=75, bonus_percent=15, margin_percent=55),  # 500 + 75 = 575
]

# ===== –°–¢–û–ò–ú–û–°–¢–¨ –§–£–ù–ö–¶–ò–ô (–¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π —Ä–∞—Å—á—ë—Ç) =====

def calculate_video_cost(model: str, duration_seconds: int) -> int:
    """
    –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤–∏–¥–µ–æ –≤ –º–æ–Ω–µ—Ç–∞—Ö
    
    –§–æ—Ä–º—É–ª–∞: COINS_PER_SECOND[model] √ó duration_seconds
    
    Args:
        model: –ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ (VEO3_FAST, VEO3, VEO3_AUDIO, SORA2_PRO)
        duration_seconds: –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    
    Returns:
        –°—Ç–æ–∏–º–æ—Å—Ç—å –≤ –º–æ–Ω–µ—Ç–∞—Ö
    """
    coins_per_sec = COINS_PER_SECOND.get(model, 5)
    return coins_per_sec * duration_seconds

# –ü—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –¥–ª—è –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∫–æ–º–±–∏–Ω–∞—Ü–∏–π
FEATURE_COSTS: Dict[str, int] = {
    # === VEO 3 FAST (3 –º–æ–Ω/—Å–µ–∫) ===
    "veo3_fast_6s": calculate_video_cost("VEO3_FAST", 6),   # 18 –º–æ–Ω–µ—Ç
    "veo3_fast_8s": calculate_video_cost("VEO3_FAST", 8),   # 24 –º–æ–Ω–µ—Ç—ã
    
    # === VEO 3 (5 –º–æ–Ω/—Å–µ–∫) ===
    "veo3_6s": calculate_video_cost("VEO3", 6),             # 30 –º–æ–Ω–µ—Ç
    "veo3_8s": calculate_video_cost("VEO3", 8),             # 40 –º–æ–Ω–µ—Ç
    
    # === VEO 3 AUDIO (8 –º–æ–Ω/—Å–µ–∫) ===
    "veo3_audio_6s": calculate_video_cost("VEO3_AUDIO", 6), # 48 –º–æ–Ω–µ—Ç
    "veo3_audio_8s": calculate_video_cost("VEO3_AUDIO", 8), # 64 –º–æ–Ω–µ—Ç—ã
    
    # === SORA 2 PRO (12 –º–æ–Ω/—Å–µ–∫) ===
    "sora2_pro_5s": calculate_video_cost("SORA2_PRO", 5),   # 60 –º–æ–Ω–µ—Ç
    "sora2_pro_10s": calculate_video_cost("SORA2_PRO", 10), # 120 –º–æ–Ω–µ—Ç
    "sora2_pro_20s": calculate_video_cost("SORA2_PRO", 20), # 240 –º–æ–Ω–µ—Ç
    
    # === –§–û–¢–û (Gemini) - 4 –º–æ–Ω/–æ–ø–µ—Ä–∞—Ü–∏—è ===
    "photo_enhance": COINS_PER_OPERATION["GEMINI"],         # 4 –º–æ–Ω–µ—Ç—ã
    "photo_remove_bg": COINS_PER_OPERATION["GEMINI"],       # 4 –º–æ–Ω–µ—Ç—ã
    "photo_retouch": COINS_PER_OPERATION["GEMINI"],         # 4 –º–æ–Ω–µ—Ç—ã
    "photo_style": COINS_PER_OPERATION["GEMINI"],           # 4 –º–æ–Ω–µ—Ç—ã
    
    # === –ü–†–ò–ú–ï–†–û–ß–ù–ê–Ø (Imagen Try-On) ===
    "tryon_basic": 6,          # 1 –æ–±—Ä–∞–∑
    "tryon_fashion": 10,       # –ú–æ–¥–Ω—ã–π —Å—Ç–∏–ª—å
    "tryon_pro": 15,           # 3 –æ–±—Ä–∞–∑–∞ (Imagen Pro)
    
    # –û–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å
    "video_6s_mute": 30,       # Veo 3
    "video_8s_mute": 40,       # Veo 3
    "video_8s_audio": 64,      # Veo 3 Audio
    "virtual_tryon": 6,        # Try-On –±–∞–∑–æ–≤—ã–π
}

# ===== –û–ü–ò–°–ê–ù–ò–Ø –° –î–ï–¢–ê–õ–ò–ó–ê–¶–ò–ï–ô =====
FEATURE_DESCRIPTIONS: Dict[str, str] = {
    # –í–∏–¥–µ–æ
    "veo3_fast_6s": "‚ö° Veo 3 Fast (6 —Å–µ–∫) ‚Äî 3 –º–æ–Ω/—Å–µ–∫",
    "veo3_fast_8s": "‚ö° Veo 3 Fast (8 —Å–µ–∫) ‚Äî 3 –º–æ–Ω/—Å–µ–∫",
    "veo3_6s": "üé• Veo 3 (6 —Å–µ–∫) ‚Äî 5 –º–æ–Ω/—Å–µ–∫",
    "veo3_8s": "üé• Veo 3 (8 —Å–µ–∫) ‚Äî 5 –º–æ–Ω/—Å–µ–∫",
    "veo3_audio_6s": "üé¨ Veo 3 Audio (6 —Å–µ–∫) ‚Äî 8 –º–æ–Ω/—Å–µ–∫",
    "veo3_audio_8s": "üé¨ Veo 3 Audio (8 —Å–µ–∫) ‚Äî 8 –º–æ–Ω/—Å–µ–∫",
    "sora2_pro_5s": "üî• Sora 2 Pro (5 —Å–µ–∫) ‚Äî 12 –º–æ–Ω/—Å–µ–∫",
    "sora2_pro_10s": "üî• Sora 2 Pro (10 —Å–µ–∫) ‚Äî 12 –º–æ–Ω/—Å–µ–∫",
    "sora2_pro_20s": "üî• Sora 2 Pro (20 —Å–µ–∫) ‚Äî 12 –º–æ–Ω/—Å–µ–∫",
    
    # –§–æ—Ç–æ
    "photo_enhance": "ü™Ñ Gemini Enhance ‚Äî 4 –º–æ–Ω/–æ–ø–µ—Ä–∞—Ü–∏—è",
    "photo_remove_bg": "ü™Ñ Gemini Remove BG ‚Äî 4 –º–æ–Ω/–æ–ø–µ—Ä–∞—Ü–∏—è",
    "photo_retouch": "ü™Ñ Gemini Retouch ‚Äî 4 –º–æ–Ω/–æ–ø–µ—Ä–∞—Ü–∏—è",
    "photo_style": "ü™Ñ Gemini Style ‚Äî 4 –º–æ–Ω/–æ–ø–µ—Ä–∞—Ü–∏—è",
    
    # –ü—Ä–∏–º–µ—Ä–æ—á–Ω–∞—è
    "tryon_basic": "üëó Imagen Try-On ‚Äî 6 –º–æ–Ω (1 –æ–±—Ä–∞–∑)",
    "tryon_fashion": "üëó Imagen Fashion ‚Äî 10 –º–æ–Ω",
    "tryon_pro": "üëó Imagen Pro ‚Äî 15 –º–æ–Ω (3 –æ–±—Ä–∞–∑–∞)",
}

# ===== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò =====

def get_tariff_info(tariff_name: str) -> Optional[Tariff]:
    """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∞—Ä–∏—Ñ–µ"""
    return TARIFFS.get(tariff_name)

def get_feature_cost(feature: str) -> int:
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ñ—É–Ω–∫—Ü–∏–∏ –≤ –º–æ–Ω–µ—Ç–∫–∞—Ö"""
    return FEATURE_COSTS.get(feature, 1)

def get_dynamic_video_cost(model: str, duration: int) -> int:
    """
    –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤–∏–¥–µ–æ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏
    
    Args:
        model: VEO3_FAST, VEO3, VEO3_AUDIO, SORA2_PRO
        duration: –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    
    Returns:
        –°—Ç–æ–∏–º–æ—Å—Ç—å –≤ –º–æ–Ω–µ—Ç–∞—Ö
    """
    return calculate_video_cost(model, duration)

def get_feature_description(feature: str) -> str:
    """–ü–æ–ª—É—á–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏"""
    return FEATURE_DESCRIPTIONS.get(feature, feature)

def get_topup_pack(coins: int) -> Optional[TopupPack]:
    """–ü–æ–ª—É—á–∏—Ç—å –ø–∞–∫–µ—Ç –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –º–æ–Ω–µ—Ç–æ–∫"""
    for pack in TOPUP_PACKS:
        if pack.coins == coins:
            return pack
    return None

def format_price(price_rub: int) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Ü–µ–Ω—É –≤ —Ä—É–±–ª—è—Ö"""
    return f"{price_rub:,} ‚ÇΩ".replace(",", " ")

def calculate_margin(feature: str) -> float:
    """
    –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –º–∞—Ä–∂—É –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
    
    –§–æ—Ä–º—É–ª–∞: ((–í—ã—Ä—É—á–∫–∞ - –°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å) / –°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å) √ó 100
    """
    coins = FEATURE_COSTS.get(feature, 0)
    revenue_rub = coins * COIN_RATE
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–æ–¥–µ–ª—å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç–∏
    if "veo3_fast" in feature:
        model_key = "VEO3_FAST"
        duration = 6 if "6s" in feature else 8
        cogs_rub = COSTS_RUB[model_key] * duration
    elif "veo3_audio" in feature:
        model_key = "VEO3_AUDIO"
        duration = 6 if "6s" in feature else 8
        cogs_rub = COSTS_RUB[model_key] * duration
    elif "veo3" in feature:
        model_key = "VEO3"
        duration = 6 if "6s" in feature else 8
        cogs_rub = COSTS_RUB[model_key] * duration
    elif "sora2" in feature:
        model_key = "SORA2_PRO"
        if "5s" in feature:
            duration = 5
        elif "10s" in feature:
            duration = 10
        else:
            duration = 20
        cogs_rub = COSTS_RUB[model_key] * duration
    elif "photo" in feature:
        cogs_rub = COSTS_RUB["GEMINI"]
    elif "tryon" in feature:
        cogs_rub = COSTS_RUB["IMAGEN_TRYON"]
    else:
        return 0
    
    if cogs_rub == 0:
        return 0
    
    margin = ((revenue_rub - cogs_rub) / cogs_rub) * 100
    return round(margin, 1)

def format_tariffs_text() -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Å —Ç–∞—Ä–∏—Ñ–∞–º–∏"""
    from app.utils.formatting import format_coins
    
    lines = ["üíé <b>–ü–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ 30 –¥–Ω–µ–π</b>"]
    lines.append("üü¢ –ü–æ–¥–ø–∏—Å–æ—á–Ω—ã–µ –º–æ–Ω–µ—Ç–∫–∏ —Å–≥–æ—Ä–∞—é—Ç —á–µ—Ä–µ–∑ 30 –¥–Ω–µ–π\n")
    
    for key, tariff in TARIFFS.items():
        lines.append(f"{tariff.icon} <b>{tariff.title}</b> ‚Äî {format_price(tariff.price_rub)}")
        lines.append(f"‚îú {format_coins(tariff.coins, short=True)}")
        
        if tariff.bonus_percent > 0:
            lines.append(f"‚îú üéÅ –ë–æ–Ω—É—Å +{tariff.bonus_percent}%")
        
        lines.append(f"‚îî {tariff.description}\n")
    
    return "\n".join(lines)

def format_topup_packs_text() -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Å –ø–∞–∫–µ—Ç–∞–º–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è"""
    from app.utils.formatting import format_coins
    
    lines = ["üí∞ <b>–ü–∞–∫–µ—Ç—ã –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è</b>"]
    lines.append("üü£ –ü–æ—Å—Ç–æ—è–Ω–Ω—ã–µ –º–æ–Ω–µ—Ç–∫–∏ –ù–ï —Å–≥–æ—Ä–∞—é—Ç –Ω–∏–∫–æ–≥–¥–∞!\n")
    
    for pack in TOPUP_PACKS:
        total_coins = pack.coins + pack.bonus_coins
        if pack.bonus_coins > 0:
            lines.append(
                f"‚Ä¢ <b>{format_coins(total_coins, short=True)}</b> "
                f"({pack.coins} + {pack.bonus_coins} –±–æ–Ω—É—Å üéÅ) ‚Äî "
                f"{format_price(pack.price_rub)} | –ë–æ–Ω—É—Å: +{pack.bonus_percent}% | –ú–∞—Ä–∂–∞: ~{pack.margin_percent}%"
            )
        else:
            lines.append(
                f"‚Ä¢ <b>{format_coins(pack.coins, short=True)}</b> ‚Äî "
                f"{format_price(pack.price_rub)} | –ú–∞—Ä–∂–∞: ~{pack.margin_percent}%"
            )
    
    lines.append("\nüí° –†–∞–±–æ—Ç–∞—é—Ç –±–µ–∑ –ø–æ–¥–ø–∏—Å–∫–∏ –∏ –æ—Å—Ç–∞—é—Ç—Å—è –Ω–∞–≤—Å–µ–≥–¥–∞!")
    
    return "\n".join(lines)

def format_feature_costs_text() -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Å–æ —Å—Ç–æ–∏–º–æ—Å—Ç—å—é —Ñ—É–Ω–∫—Ü–∏–π"""
    lines = ["üí° <b>–°—Ç–æ–∏–º–æ—Å—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–π:</b>\n"]
    
    # –í–∏–¥–µ–æ
    lines.append("üé¨ <b>–í–∏–¥–µ–æ:</b>")
    lines.append(f"‚ö° Veo 3 Fast ‚Äî <b>3 –º–æ–Ω–µ—Ç–∫–∏ –∑–∞ —Å–µ–∫—É–Ω–¥—É</b> (6 —Å–µ–∫ = {FEATURE_COSTS['veo3_fast_6s']} –º–æ–Ω–µ—Ç–æ–∫, 8 —Å–µ–∫ = {FEATURE_COSTS['veo3_fast_8s']} –º–æ–Ω–µ—Ç–æ–∫)")
    lines.append(f"üé• Veo 3 ‚Äî <b>5 –º–æ–Ω–µ—Ç–æ–∫ –∑–∞ —Å–µ–∫—É–Ω–¥—É</b> (6 —Å–µ–∫ = {FEATURE_COSTS['veo3_6s']} –º–æ–Ω–µ—Ç–æ–∫, 8 —Å–µ–∫ = {FEATURE_COSTS['veo3_8s']} –º–æ–Ω–µ—Ç–æ–∫)")
    lines.append(f"üé¨ Veo 3 Audio ‚Äî <b>8 –º–æ–Ω–µ—Ç–æ–∫ –∑–∞ —Å–µ–∫—É–Ω–¥—É</b> (6 —Å–µ–∫ = {FEATURE_COSTS['veo3_audio_6s']} –º–æ–Ω–µ—Ç–æ–∫, 8 —Å–µ–∫ = {FEATURE_COSTS['veo3_audio_8s']} –º–æ–Ω–µ—Ç–æ–∫)")
    lines.append(f"üî• Sora 2 Pro ‚Äî <b>12 –º–æ–Ω–µ—Ç–æ–∫ –∑–∞ —Å–µ–∫—É–Ω–¥—É</b> (5 —Å–µ–∫ = {FEATURE_COSTS['sora2_pro_5s']} –º–æ–Ω–µ—Ç–æ–∫, 10 —Å–µ–∫ = {FEATURE_COSTS['sora2_pro_10s']} –º–æ–Ω–µ—Ç–æ–∫, 20 —Å–µ–∫ = {FEATURE_COSTS['sora2_pro_20s']} –º–æ–Ω–µ—Ç–æ–∫)\n")
    
    # –§–æ—Ç–æ
    lines.append("üì∏ <b>–§–æ—Ç–æ (Gemini):</b>")
    lines.append(f"ü™Ñ Enhance / Remove BG / Retouch / Style ‚Äî <b>4 –º–æ–Ω–µ—Ç–∫–∏ –∑–∞ –æ–ø–µ—Ä–∞—Ü–∏—é</b>\n")
    
    # –ü—Ä–∏–º–µ—Ä–æ—á–Ω–∞—è
    lines.append("üëó <b>–í–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è –ø—Ä–∏–º–µ—Ä–æ—á–Ω–∞—è:</b>")
    lines.append(f"‚Ä¢ Imagen Try-On (1 –æ–±—Ä–∞–∑) ‚Äî <b>6 –º–æ–Ω–µ—Ç–æ–∫</b>")
    lines.append(f"‚Ä¢ Imagen Fashion ‚Äî <b>10 –º–æ–Ω–µ—Ç–æ–∫</b>")
    lines.append(f"‚Ä¢ Imagen Pro (3 –æ–±—Ä–∞–∑–∞) ‚Äî <b>15 –º–æ–Ω–µ—Ç–æ–∫</b>\n")
    
    return "\n".join(lines)

def get_full_pricing_text() -> str:
    """–ü–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç —Å —Ü–µ–Ω–∞–º–∏"""
    return "\n".join([
        format_tariffs_text(),
        "",
        format_topup_packs_text(),
        "",
        format_feature_costs_text(),
    ])

# ===== –†–ê–°–ß–Å–¢ –°–ï–ë–ï–°–¢–û–ò–ú–û–°–¢–ò –ò –ú–ê–†–ñ–ò =====

def get_cost_breakdown(feature: str) -> Dict:
    """
    –ü–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω—ã–π breakdown —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∏ –º–∞—Ä–∂–∏
    
    Returns:
        {
            'coins': int,
            'revenue_rub': float,
            'cogs_rub': float,
            'margin_rub': float,
            'margin_percent': float
        }
    """
    coins = FEATURE_COSTS.get(feature, 0)
    revenue_rub = coins * COIN_RATE
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å
    if "veo3_fast" in feature:
        duration = 6 if "6s" in feature else 8
        cogs_rub = COSTS_RUB["VEO3_FAST"] * duration
    elif "veo3_audio" in feature:
        duration = 6 if "6s" in feature else 8
        cogs_rub = COSTS_RUB["VEO3_AUDIO"] * duration
    elif "veo3" in feature:
        duration = 6 if "6s" in feature else 8
        cogs_rub = COSTS_RUB["VEO3"] * duration
    elif "sora2" in feature:
        if "5s" in feature:
            duration = 5
        elif "10s" in feature:
            duration = 10
        else:
            duration = 20
        cogs_rub = COSTS_RUB["SORA2_PRO"] * duration
    elif "photo" in feature:
        cogs_rub = COSTS_RUB["GEMINI"]
    elif "tryon" in feature:
        if "pro" in feature:
            cogs_rub = COSTS_RUB["IMAGEN_TRYON"] * 3
        else:
            cogs_rub = COSTS_RUB["IMAGEN_TRYON"]
    else:
        cogs_rub = 0
    
    margin_rub = revenue_rub - cogs_rub
    margin_percent = (margin_rub / cogs_rub * 100) if cogs_rub > 0 else 0
    
    return {
        'coins': coins,
        'revenue_rub': revenue_rub,
        'cogs_rub': cogs_rub,
        'margin_rub': margin_rub,
        'margin_percent': round(margin_percent, 1)
    }
