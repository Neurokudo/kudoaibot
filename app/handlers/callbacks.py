# app/handlers/callbacks.py
"""–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback –∫–Ω–æ–ø–æ–∫"""

import logging
from aiogram import F
from aiogram.types import CallbackQuery, InlineKeyboardMarkup

from app.db import users
from app.services import billing
from app.ui import Actions, t
from app.ui.keyboards import build_main_menu, tariff_selection, topup_packs_menu, build_profile_menu, build_tariffs_menu, build_help_menu, btn
from app.core.bot import get_bot
from .commands import ensure_user_exists, get_user_language, get_user_data
from .video_handlers import (
    handle_video_menu,
    handle_orientation_choice,
    handle_audio_choice,
    handle_video_regenerate,
    handle_video_to_helper
)
from .tryon_handlers import (
    callback_tryon_start,
    callback_tryon_confirm,
    callback_tryon_swap,
    callback_tryon_reset
)

log = logging.getLogger("kudoaibot")

def register_callbacks():
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
    bot, dp = get_bot()
    
    # –í—ã–±–æ—Ä —è–∑—ã–∫–∞
    dp.callback_query.register(callback_set_language, F.data.startswith("set_language"))
    
    # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (–ø–ª–æ—Å–∫–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞)
    dp.callback_query.register(callback_home, F.data == "home")
    dp.callback_query.register(callback_create_video, F.data == "menu_create_video")
    dp.callback_query.register(callback_helper_menu, F.data == "menu_helper")
    dp.callback_query.register(callback_neurokudo_menu, F.data == "menu_neurokudo")
    dp.callback_query.register(callback_meme_menu, F.data == "menu_meme")
    dp.callback_query.register(callback_lego, F.data == "menu_lego")
    dp.callback_query.register(callback_photo, F.data == "menu_photo")
    dp.callback_query.register(callback_tryon, F.data == "menu_tryon")
    dp.callback_query.register(callback_profile, F.data == "menu_profile")
    dp.callback_query.register(callback_show_tariffs, F.data == "menu_tariffs")
    dp.callback_query.register(callback_show_help, F.data == "menu_help")
    
    # –†–µ–∂–∏–º—ã —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏–¥–µ–æ
    dp.callback_query.register(callback_video_veo3, F.data == "video_veo3")
    dp.callback_query.register(callback_video_sora2, F.data == "video_sora2")
    
    # –†–µ–∂–∏–º—ã —É–º–Ω–æ–≥–æ –ø–æ–º–æ—â–Ω–∏–∫–∞
    dp.callback_query.register(callback_helper_veo3, F.data == "helper_veo3")
    dp.callback_query.register(callback_helper_sora2, F.data == "helper_sora2")
    
    # –†–µ–∂–∏–º—ã Neurokudo
    dp.callback_query.register(callback_neurokudo_veo3, F.data == "neurokudo_veo3")
    dp.callback_query.register(callback_neurokudo_sora2, F.data == "neurokudo_sora2")
    
    # –†–µ–∂–∏–º—ã –º–µ–º–æ–≤
    dp.callback_query.register(callback_meme_veo3, F.data == "meme_veo3")
    dp.callback_query.register(callback_meme_sora2, F.data == "meme_sora2")
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–æ–∫—É–ø–∫–∏
    dp.callback_query.register(callback_show_plans, F.data == "show_plans")
    dp.callback_query.register(callback_buy_tariff, F.data.startswith("buy_tariff_"))
    dp.callback_query.register(callback_buy_topup, F.data.startswith("buy_topup_"))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø—Ä–∏–º–µ—Ä–æ—á–Ω–æ–π
    dp.callback_query.register(callback_tryon_start, F.data == "tryon_start")
    dp.callback_query.register(callback_tryon_confirm, F.data == "tryon_confirm")
    dp.callback_query.register(callback_tryon_swap, F.data == "tryon_swap")
    dp.callback_query.register(callback_tryon_reset, F.data == "tryon_reset")
    
    # Fallback –¥–ª—è –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö callback'–æ–≤ (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–º!)
    dp.callback_query.register(callback_fallback)

# === –ù–ê–í–ò–ì–ê–¶–ò–Ø ===

async def callback_home(callback: CallbackQuery):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await callback.answer()
    await ensure_user_exists(callback.message)
    user_language = await get_user_language(callback.from_user.id)
    
    user_id = callback.from_user.id
    user_data = await get_user_data(user_id)
    name = callback.from_user.first_name or "–¥—Ä—É–≥"
    
    welcome_text = f"üëã {name}\n\n"
    welcome_text += f"üí∞ –ë–∞–ª–∞–Ω—Å: <b>{user_data['videos_left']}</b> –º–æ–Ω–µ—Ç\n"
    welcome_text += f"üé¨ –ü—Ä–∏–º–µ—Ä–Ω–æ —Ö–≤–∞—Ç–∏—Ç –Ω–∞: {user_data['videos_left'] // 5} –≤–∏–¥–µ–æ\n\n"
    welcome_text += f"üé¨ <b>–ß—Ç–æ —Ç—ã –º–æ–∂–µ—à—å —Å–¥–µ–ª–∞—Ç—å:</b>\n"
    welcome_text += f"‚Äî –°–æ–∑–¥–∞–≤–∞—Ç—å –≤–∏–¥–µ–æ —Å –ø–æ–º–æ—â—å—é –ò–ò\n"
    welcome_text += f"‚Äî –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ñ–æ—Ç–æ\n"
    welcome_text += f"‚Äî –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤–∏—Ä—Ç—É–∞–ª—å–Ω—É—é –ø—Ä–∏–º–µ—Ä–æ—á–Ω—É—é\n\n"
    welcome_text += f"–í—ã–±–µ—Ä–∏ —Ä–∞–∑–¥–µ–ª –Ω–∏–∂–µ üëá"
    
    await callback.message.edit_text(
        welcome_text,
        reply_markup=build_main_menu(user_language)
    )

# === –†–ê–ó–î–ï–õ–´ ===

async def callback_generate(callback: CallbackQuery):
    """–†–∞–∑–¥–µ–ª –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–∏–¥–µ–æ (VEO 3)"""
    await callback.answer()
    await handle_generate_menu(callback)

async def callback_lego(callback: CallbackQuery):
    """–†–∞–∑–¥–µ–ª LEGO –º—É–ª—å—Ç–∏–∫–∏"""
    await callback.answer()
    await handle_lego_menu(callback)

# @dp.callback_query(F.data == Actions.MENU_PHOTO)
async def callback_photo(callback: CallbackQuery):
    """–†–∞–∑–¥–µ–ª –§–û–¢–û - –≤—Ä–µ–º–µ–Ω–Ω–∞—è –∑–∞–≥–ª—É—à–∫–∞"""
    await callback.answer()
    user_language = await get_user_language(callback.from_user.id)
    
    photo_text = "ü™Ñ <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–æ—Ç–æ</b>\n\n"
    photo_text += "‚ö†Ô∏è <b>–†–∞–∑–¥–µ–ª –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ</b>\n\n"
    photo_text += "–°–∫–æ—Ä–æ –∑–¥–µ—Å—å –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã:\n"
    photo_text += "‚Ä¢ –£–ª—É—á—à–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞\n"
    photo_text += "‚Ä¢ –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–æ–Ω–∞\n"
    photo_text += "‚Ä¢ –†–µ—Ç—É—à—å\n"
    photo_text += "‚Ä¢ –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∏–ª—è\n\n"
    photo_text += "–ê –ø–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ üé¨ –í–∏–¥–µ–æ –∏ üëó –ü—Ä–∏–º–µ—Ä–æ—á–Ω—É—é!"
    
    keyboard = [
        [btn("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "home")],
        [btn("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "home")]
    ]
    
    await callback.message.edit_text(
        photo_text,
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
    )

# @dp.callback_query(F.data == Actions.MENU_TRYON)
async def callback_tryon(callback: CallbackQuery):
    """–†–∞–∑–¥–µ–ª –ü–†–ò–ú–ï–†–û–ß–ù–ê–Ø - —Å—Ç–∞—Ä—Ç"""
    await callback.answer()
    user_id = callback.from_user.id
    user_language = await get_user_language(user_id)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–º–µ—Ä–æ—á–Ω–æ–π
    from app.handlers.states import get_user_state, set_user_state
    state = get_user_state(user_id)
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–º–µ—Ä–æ—á–Ω–æ–π
    state.tryon_data = {
        "person": None,
        "garment": None,
        "dressed": None,
        "stage": "await_person"
    }
    set_user_state(user_id, state)
    
    tryon_text = "üëó <b>–í–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è –ø—Ä–∏–º–µ—Ä–æ—á–Ω–∞—è</b>\n\n"
    tryon_text += "–î–∞–≤–∞–π—Ç–µ –ø—Ä–∏–º–µ—Ä–∏–º –æ–¥–µ–∂–¥—É –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ!\n\n"
    tryon_text += "üì∏ <b>–®–∞–≥ 1:</b> –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —á–µ–ª–æ–≤–µ–∫–∞\n"
    tryon_text += "üëï <b>–®–∞–≥ 2:</b> –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –æ–¥–µ–∂–¥—ã\n"
    tryon_text += "‚ú® <b>–®–∞–≥ 3:</b> –ü–æ–ª—É—á–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç!\n\n"
    tryon_text += "üí∏ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> 6 –º–æ–Ω–µ—Ç –∑–∞ –ø—Ä–∏–º–µ—Ä–∫—É\n\n"
    tryon_text += "‚ö†Ô∏è –î–ª—è –ª—É—á—à–µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:\n"
    tryon_text += "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–æ—Ä—Ç—Ä–µ—Ç–Ω—ã–µ —Ñ–æ—Ç–æ\n"
    tryon_text += "‚Ä¢ –§–æ—Ç–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–µ—Ç–∫–∏–º\n"
    tryon_text += "‚Ä¢ –û–¥–µ–∂–¥–∞ –Ω–∞ –±–µ–ª–æ–º —Ñ–æ–Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –ª—É—á—à–µ"
    
    keyboard = [
        [btn("üì∏ –ù–∞—á–∞—Ç—å –ø—Ä–∏–º–µ—Ä–∫—É", "tryon_start")],
        [btn("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "home")],
        [btn("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "home")]
    ]
    
    await callback.message.edit_text(
        tryon_text,
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
    )

# @dp.callback_query(F.data == Actions.MENU_PROFILE)
async def callback_profile(callback: CallbackQuery):
    """–ü—Ä–æ—Ñ–∏–ª—å"""
    await callback.answer()
    await ensure_user_exists(callback.message)
    user_id = callback.from_user.id
    user_language = await get_user_language(user_id)
    
    user_data = await get_user_data(user_id)
    name = callback.from_user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    
    user = await users.get_user(user_id)
    reg_date = user.get('created_at', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ') if user else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∞–ª–∞–Ω—Å–µ
    from app.services.dual_balance import get_user_dual_balance
    balance_info = await get_user_dual_balance(user_id)
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∏–¥–µ–æ
    total_coins = balance_info['total']
    videos_left = total_coins // 5  # –ü—Ä–∏–º–µ—Ä–Ω–æ 5 –º–æ–Ω–µ—Ç –∑–∞ —Å–µ–∫—É–Ω–¥—É –≤–∏–¥–µ–æ
    
    profile_text = f"üë§ <b>–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å</b>\n\n"
    profile_text += f"–ò–º—è: {name}\n"
    profile_text += f"üí∞ –ë–∞–ª–∞–Ω—Å: <b>{total_coins}</b> –º–æ–Ω–µ—Ç\n"
    
    if user_data['subscription_type'] != '–ë–µ–∑ –ø–æ–¥–ø–∏—Å–∫–∏':
        profile_text += f"üìÖ –ü–æ–¥–ø–∏—Å–∫–∞: {user_data['subscription_type']}\n"
    
    profile_text += f"üé¨ –ü—Ä–∏–º–µ—Ä–Ω–æ —Ö–≤–∞—Ç–∏—Ç –Ω–∞: {videos_left} –≤–∏–¥–µ–æ"
    
    await callback.message.edit_text(
        profile_text,
        reply_markup=build_profile_menu(user_language)
    )

# === –†–ï–ñ–ò–ú–´ –ì–ï–ù–ï–†–ê–¶–ò–ò ===

# @dp.callback_query(F.data == Actions.MODE_HELPER)
async def callback_mode_helper(callback: CallbackQuery):
    """–†–µ–∂–∏–º —É–º–Ω–æ–≥–æ –ø–æ–º–æ—â–Ω–∏–∫–∞"""
    await callback.answer()
    await handle_mode_helper(callback)

# @dp.callback_query(F.data == Actions.MODE_MANUAL)
async def callback_mode_manual(callback: CallbackQuery):
    """–†—É—á–Ω–æ–π —Ä–µ–∂–∏–º"""
    await callback.answer()
    await handle_mode_manual(callback)

# @dp.callback_query(F.data == Actions.MODE_MEME)
async def callback_mode_meme(callback: CallbackQuery):
    """–ú–µ–º–Ω—ã–π —Ä–µ–∂–∏–º"""
    await callback.answer()
    await handle_mode_meme(callback)

# === –ü–ê–†–ê–ú–ï–¢–†–´ –í–ò–î–ï–û ===

# @dp.callback_query(F.data == Actions.ORIENTATION_PORTRAIT)
async def callback_orientation_portrait(callback: CallbackQuery):
    """–ü–æ—Ä—Ç—Ä–µ—Ç–Ω–∞—è –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—è"""
    await callback.answer()
    await handle_orientation_choice(callback)

# @dp.callback_query(F.data == Actions.ORIENTATION_LANDSCAPE)
async def callback_orientation_landscape(callback: CallbackQuery):
    """–õ–∞–Ω–¥—à–∞—Ñ—Ç–Ω–∞—è –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—è"""
    await callback.answer()
    await handle_orientation_choice(callback)

# @dp.callback_query(F.data == Actions.AUDIO_YES)
async def callback_audio_yes(callback: CallbackQuery):
    """–°–æ –∑–≤—É–∫–æ–º"""
    await callback.answer()
    await handle_audio_choice(callback)

# @dp.callback_query(F.data == Actions.AUDIO_NO)
async def callback_audio_no(callback: CallbackQuery):
    """–ë–µ–∑ –∑–≤—É–∫–∞"""
    await callback.answer()
    await handle_audio_choice(callback)

# === –ü–û–°–õ–ï –ì–ï–ù–ï–†–ê–¶–ò–ò ===

# @dp.callback_query(F.data == Actions.VIDEO_REGENERATE)
async def callback_video_regenerate(callback: CallbackQuery):
    """–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è"""
    await callback.answer()
    await handle_video_regenerate(callback)

# @dp.callback_query(F.data == Actions.VIDEO_TO_HELPER)
async def callback_video_to_helper(callback: CallbackQuery):
    """–ü–µ—Ä–µ—Ö–æ–¥ –∫ –ø–æ–º–æ—â–Ω–∏–∫—É"""
    await callback.answer()
    await handle_video_to_helper(callback)

# === –ü–û–ö–£–ü–ö–ê –ú–û–ù–ï–¢–û–ö ===

# @dp.callback_query(F.data == Actions.PAYMENT_TOPUP)
async def callback_show_topup(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–∞–∫–µ—Ç—ã –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –º–æ–Ω–µ—Ç–æ–∫"""
    await callback.answer()
    
    from app.config.pricing import format_topup_packs_text
    
    topup_text = "üí∞ <b>–ö—É–ø–∏—Ç—å –º–æ–Ω–µ—Ç–∫–∏</b>\n\n"
    topup_text += format_topup_packs_text()
    topup_text += "\n\nüí° –í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–∫–µ—Ç:"
    
    await callback.message.edit_text(
        topup_text,
        reply_markup=topup_packs_menu()
    )

async def callback_show_tariffs(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –ø–æ–¥–ø–∏—Å–∫–∏ –∏ –º–æ–Ω–µ—Ç–æ–∫"""
    await callback.answer()
    user_language = await get_user_language(callback.from_user.id)
    
    tariffs_text = "üí≥ <b>–ü–æ–¥–ø–∏—Å–∫–∞ –∏ –º–æ–Ω–µ—Ç–∫–∏</b>\n\n"
    tariffs_text += "–í—ã–±–µ—Ä–∏, —á—Ç–æ —Ç–µ–±–µ –ø–æ–¥—Ö–æ–¥–∏—Ç:\n\n"
    tariffs_text += "üéü <b>–ü–æ–¥–ø–∏—Å–∫–∞</b> ‚Äî –º–æ–Ω–µ—Ç–∫–∏ –∫–∞–∂–¥—ã–π –º–µ—Å—è—Ü –Ω–∞ 30 –¥–Ω–µ–π\n"
    tariffs_text += "üü£ <b>–ú–æ–Ω–µ—Ç–∫–∏ –Ω–∞–≤—Å–µ–≥–¥–∞</b> ‚Äî –ø–æ–∫—É–ø–∞–µ—à—å –æ–¥–∏–Ω —Ä–∞–∑, –æ—Å—Ç–∞—é—Ç—Å—è –Ω–∞–≤—Å–µ–≥–¥–∞"
    
    await callback.message.edit_text(
        tariffs_text,
        reply_markup=build_tariffs_menu(user_language)
    )

async def callback_show_help(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∫–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç"""
    await callback.answer()
    user_language = await get_user_language(callback.from_user.id)
    
    help_text = "‚ÑπÔ∏è <b>–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç</b>\n\n"
    help_text += "–ú–æ–Ω–µ—Ç–∫–∏ ‚Äî —ç—Ç–æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –≤–∞–ª—é—Ç–∞.\n"
    help_text += "–ü–æ–¥–ø–∏—Å–∫–∞ –¥–∞—ë—Ç –º–æ–Ω–µ—Ç–∫–∏ –∫–∞–∂–¥—ã–π –º–µ—Å—è—Ü, —Ä–∞–∑–æ–≤—ã–µ –ø–æ–∫—É–ø–∫–∏ ‚Äî –Ω–∞–≤—Å–µ–≥–¥–∞.\n"
    help_text += "–ú–æ–Ω–µ—Ç–∫–∏ —Ç—Ä–∞—Ç—è—Ç—Å—è –Ω–∞ –≤–∏–¥–µ–æ, —Ñ–æ—Ç–æ –∏ –ø—Ä–∏–º–µ—Ä–∫–∏.\n\n"
    help_text += "–í—Å—ë –ø—Ä–æ—Å—Ç–æ: –º–æ–Ω–µ—Ç–∫–∏ = —Å–µ–∫—É–Ω–¥—ã –∏–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è."
    
    await callback.message.edit_text(
        help_text,
        reply_markup=build_help_menu(user_language)
    )

async def callback_show_subscriptions(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏"""
    await callback.answer()
    user_language = await get_user_language(callback.from_user.id)
    
    subscriptions_text = "üéü <b>–ü–æ–¥–ø–∏—Å–∫–∞ (–Ω–∞ 30 –¥–Ω–µ–π)</b>\n\n"
    subscriptions_text += "–£–¥–æ–±–Ω–æ, –µ—Å–ª–∏ —á–∞—Å—Ç–æ —Å–æ–∑–¥–∞—ë—à—å –≤–∏–¥–µ–æ.\n"
    subscriptions_text += "–ú–æ–Ω–µ—Ç–∫–∏ –Ω–∞—á–∏—Å–ª—è—é—Ç—Å—è –∫–∞–∂–¥—ã–π –º–µ—Å—è—Ü –∏ –¥–µ–π—Å—Ç–≤—É—é—Ç 30 –¥–Ω–µ–π.\n\n"
    subscriptions_text += "üå± <b>–ü—Ä–æ–±–Ω—ã–π</b> ‚Äî 390 ‚ÇΩ ‚Üí 60 –º–æ–Ω–µ—Ç\n"
    subscriptions_text += "‚ú® <b>–ë–∞–∑–æ–≤—ã–π</b> ‚Äî 990 ‚ÇΩ ‚Üí 180 –º–æ–Ω–µ—Ç\n"
    subscriptions_text += "‚≠ê <b>–°—Ç–∞–Ω–¥–∞—Ä—Ç</b> ‚Äî 1 990 ‚ÇΩ ‚Üí 400 –º–æ–Ω–µ—Ç\n"
    subscriptions_text += "üíé <b>–ü—Ä–µ–º–∏—É–º</b> ‚Äî 4 990 ‚ÇΩ ‚Üí 1 100 –º–æ–Ω–µ—Ç\n"
    subscriptions_text += "üî• <b>PRO</b> ‚Äî 7 490 ‚ÇΩ ‚Üí 1 600 –º–æ–Ω–µ—Ç\n\n"
    subscriptions_text += "üïê –ú–æ–Ω–µ—Ç–∫–∏ –ø–æ –ø–æ–¥–ø–∏—Å–∫–µ –¥–µ–π—Å—Ç–≤—É—é—Ç 30 –¥–Ω–µ–π."
    
    keyboard = [
        [btn("üí∞ –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", "show_plans")],
        [btn("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "menu_tariffs")],
        [btn("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "home")]
    ]
    
    await callback.message.edit_text(
        subscriptions_text,
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
    )

async def callback_show_permanent_coins(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–µ –º–æ–Ω–µ—Ç–∫–∏"""
    await callback.answer()
    user_language = await get_user_language(callback.from_user.id)
    
    coins_text = "üü£ <b>–ú–æ–Ω–µ—Ç–∫–∏ –Ω–∞–≤—Å–µ–≥–¥–∞</b>\n\n"
    coins_text += "–ü–æ–∫—É–ø–∞–µ—à—å –æ–¥–∏–Ω —Ä–∞–∑ ‚Äî –º–æ–Ω–µ—Ç–∫–∏ –æ—Å—Ç–∞—é—Ç—Å—è –Ω–∞–≤—Å–µ–≥–¥–∞.\n\n"
    coins_text += "50 –º–æ–Ω–µ—Ç ‚Äî 990 ‚ÇΩ\n"
    coins_text += "130 –º–æ–Ω–µ—Ç ‚Äî 1 990 ‚ÇΩ\n"
    coins_text += "280 –º–æ–Ω–µ—Ç ‚Äî 3 990 ‚ÇΩ\n"
    coins_text += "575 –º–æ–Ω–µ—Ç ‚Äî 7 490 ‚ÇΩ"
    
    keyboard = [
        [btn("üí≥ 50 –º–æ–Ω–µ—Ç ‚Äî 990 ‚ÇΩ", "buy_topup_50")],
        [btn("üí≥ 130 –º–æ–Ω–µ—Ç ‚Äî 1 990 ‚ÇΩ", "buy_topup_130")],
        [btn("üí≥ 280 –º–æ–Ω–µ—Ç ‚Äî 3 990 ‚ÇΩ", "buy_topup_280")],
        [btn("üí≥ 575 –º–æ–Ω–µ—Ç ‚Äî 7 490 ‚ÇΩ", "buy_topup_575")],
        [btn("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "menu_tariffs")],
        [btn("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "home")]
    ]
    
    await callback.message.edit_text(
        coins_text,
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
    )

async def callback_show_models_cost(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –º–æ–¥–µ–ª–µ–π"""
    await callback.answer()
    user_language = await get_user_language(callback.from_user.id)
    
    cost_text = "üí∏ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–π:</b>\n\n"
    cost_text += "üé• <b>–í–∏–¥–µ–æ:</b>\n"
    cost_text += "‚Ä¢ Veo 3 Fast ‚Äî 3 –º–æ–Ω/—Å–µ–∫\n"
    cost_text += "‚Ä¢ Veo 3 Pro ‚Äî 5 –º–æ–Ω/—Å–µ–∫\n"
    cost_text += "‚Ä¢ Sora 2 ‚Äî 8 –º–æ–Ω/—Å–µ–∫\n"
    cost_text += "‚Ä¢ Sora 2 Pro ‚Äî 12 –º–æ–Ω/—Å–µ–∫\n"
    cost_text += "‚Ä¢ Gemini Video ‚Äî 4 –º–æ–Ω/—Å–µ–∫\n\n"
    cost_text += "üñº <b>–§–æ—Ç–æ:</b>\n"
    cost_text += "‚Ä¢ Enhance / Retouch / Style ‚Äî 4 –º–æ–Ω–µ—Ç–∫–∏\n\n"
    cost_text += "üëó <b>–ü—Ä–∏–º–µ—Ä–æ—á–Ω–∞—è:</b>\n"
    cost_text += "‚Ä¢ Imagen Try-On ‚Äî 6 –º–æ–Ω–µ—Ç\n"
    cost_text += "‚Ä¢ Imagen Pro ‚Äî 15 –º–æ–Ω–µ—Ç\n\n"
    cost_text += "üìò <b>–ü—Ä–∏–º–µ—Ä:</b>\n"
    cost_text += "10 —Å–µ–∫—É–Ω–¥ Veo 3 Fast = 30 –º–æ–Ω–µ—Ç"
    
    keyboard = [
        [btn("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "menu_tariffs")],
        [btn("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "home")]
    ]
    
    await callback.message.edit_text(
        cost_text,
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
    )

async def callback_show_plans(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–ª–∞–Ω—ã –ø–æ–¥–ø–∏—Å–æ–∫ –¥–ª—è –ø–æ–∫—É–ø–∫–∏"""
    await callback.answer()
    user_language = await get_user_language(callback.from_user.id)
    
    from app.config.pricing import TARIFFS
    
    plans_text = "üí∞ <b>–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞–Ω –ø–æ–¥–ø–∏—Å–∫–∏:</b>\n\n"
    
    keyboard = []
    for key, tariff in TARIFFS.items():
        plans_text += f"{tariff.icon} <b>{tariff.title}</b> ‚Äî {tariff.price_rub} ‚ÇΩ\n"
        plans_text += f"‚îú {tariff.coins} –º–æ–Ω–µ—Ç –Ω–∞ {tariff.duration_days} –¥–Ω–µ–π\n"
        plans_text += f"‚îî {tariff.description}\n\n"
        
        keyboard.append([btn(f"{tariff.icon} {tariff.title} ‚Äî {tariff.price_rub} ‚ÇΩ", f"buy_tariff_{key}")])
    
    keyboard.extend([
        [btn("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "subscriptions")],
        [btn("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "home")]
    ])
    
    await callback.message.edit_text(
        plans_text,
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
    )

async def callback_buy_tariff(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∫—É–ø–∫–∏ —Ç–∞—Ä–∏—Ñ–∞"""
    await callback.answer()
    
    tariff_name = callback.data.replace("buy_tariff_", "")
    user_id = callback.from_user.id
    
    from app.config.pricing import get_tariff_info
    from app.services.yookassa_service import create_payment
    
    tariff = get_tariff_info(tariff_name)
    
    if not tariff:
        await callback.message.edit_text("‚ùå –¢–∞—Ä–∏—Ñ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    payment_result = create_payment(
        amount_rub=tariff.price_rub,
        description=f"–ü–æ–¥–ø–∏—Å–∫–∞ {tariff.title}",
        user_id=user_id,
        payment_type="subscription",
        plan_or_coins=tariff_name
    )
    
    if not payment_result['success']:
        await callback.message.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞: {payment_result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}"
        )
        return
    
    payment_text = (
        f"{tariff.icon} <b>{tariff.title}</b>\n\n"
        f"üí∞ –¶–µ–Ω–∞: {tariff.price_rub} ‚ÇΩ\n"
        f"üíé –ú–æ–Ω–µ—Ç–æ–∫: {tariff.coins}\n"
        f"üìÖ –°—Ä–æ–∫: {tariff.duration_days} –¥–Ω–µ–π\n\n"
        f"–î–ª—è –æ–ø–ª–∞—Ç—ã –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ:"
    )
    
    keyboard = [
        [btn("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", url=payment_result['confirmation_url'])],
        [btn("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "show_plans")],
        [btn("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "home")]
    ]
    
    await callback.message.edit_text(
        payment_text,
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
    )

async def callback_buy_topup(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∫—É–ø–∫–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è"""
    await callback.answer()
    
    coins = int(callback.data.replace("buy_topup_", ""))
    user_id = callback.from_user.id
    
    from app.config.pricing import TOPUP_PACKS
    from app.services.yookassa_service import create_payment
    
    # –ù–∞—Ö–æ–¥–∏–º –ø–∞–∫–µ—Ç –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –º–æ–Ω–µ—Ç
    pack = None
    for p in TOPUP_PACKS:
        if p.coins == coins:
            pack = p
            break
    
    if not pack:
        await callback.message.edit_text("‚ùå –ü–∞–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    payment_result = create_payment(
        amount_rub=pack.price_rub,
        description=f"–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ {pack.coins} –º–æ–Ω–µ—Ç",
        user_id=user_id,
        payment_type="topup",
        plan_or_coins=str(pack.coins)
    )
    
    if not payment_result['success']:
        await callback.message.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞: {payment_result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}"
        )
        return
    
    total_coins = pack.coins + pack.bonus_coins
    payment_text = (
        f"üí∞ <b>–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ {total_coins} –º–æ–Ω–µ—Ç–æ–∫</b>\n\n"
        f"üí≥ –¶–µ–Ω–∞: {pack.price_rub} ‚ÇΩ\n"
    )
    if pack.bonus_coins > 0:
        payment_text += f"üéÅ –ë–æ–Ω—É—Å: {pack.bonus_coins} –º–æ–Ω–µ—Ç–æ–∫\n\n"
    else:
        payment_text += "\n"
    
    payment_text += "–î–ª—è –æ–ø–ª–∞—Ç—ã –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ:"
    
    keyboard = [
        [btn("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", url=payment_result['confirmation_url'])],
        [btn("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "permanent_coins")],
        [btn("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "home")]
    ]

async def callback_fallback(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö callback'–æ–≤"""
    log.warning(f"–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π callback –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id}: {callback.data}")
    await callback.answer("‚ö†Ô∏è –≠—Ç–∞ –∫–Ω–æ–ø–∫–∞ –ø–æ–∫–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç", show_alert=True)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    user_language = await get_user_language(callback.from_user.id)
    await callback.message.edit_text(
        "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
        reply_markup=build_main_menu(user_language)
    )

async def callback_set_language(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞"""
    await callback.answer()
    
    # –ü–∞—Ä—Å–∏–º callback data
    from app.ui.callbacks import parse_cb
    cb = parse_cb(callback.data)
    language = cb.extra  # ru, en, es, ar, hi
    
    user_id = callback.from_user.id
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
    await users.update_user_language(user_id, language)
    
    # –ü–æ–ª—É—á–∞–µ–º –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ —Ç–µ–∫—Å—Ç—ã
    from app.ui.texts import t
    from app.ui.keyboards import build_main_menu
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
    await callback.message.edit_text(
        t("language.selected", language),
        reply_markup=build_main_menu(language)
    )

# === LEGO –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ===

async def callback_lego_single(callback: CallbackQuery):
    """LEGO –æ–¥–Ω–∞ —Å—Ü–µ–Ω–∞"""
    await callback.answer()
    # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å LEGO –æ–¥–Ω—É —Å—Ü–µ–Ω—É
    await callback.message.edit_text(
        "üé¨ <b>LEGO –æ–¥–Ω–∞ —Å—Ü–µ–Ω–∞</b>\n\n‚ö†Ô∏è –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [btn("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", Actions.HOME)]
        ])
    )

async def callback_lego_reportage(callback: CallbackQuery):
    """LEGO —Ä–µ–ø–æ—Ä—Ç–∞–∂"""
    await callback.answer()
    # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å LEGO —Ä–µ–ø–æ—Ä—Ç–∞–∂
    await callback.message.edit_text(
        "üì∞ <b>LEGO —Ä–µ–ø–æ—Ä—Ç–∞–∂</b>\n\n‚ö†Ô∏è –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [btn("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", Actions.HOME)]
        ])
    )

async def callback_lego_regenerate(callback: CallbackQuery):
    """LEGO –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å"""
    await callback.answer()
    # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å LEGO –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—é
    await callback.message.edit_text("üîÑ –ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä—É—é LEGO –≤–∏–¥–µ–æ...")

async def callback_lego_improve(callback: CallbackQuery):
    """LEGO —É–ª—É—á—à–∏—Ç—å"""
    await callback.answer()
    # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å LEGO —É–ª—É—á—à–µ–Ω–∏–µ
    await callback.message.edit_text("‚ú® –£–ª—É—á—à–∞—é LEGO –≤–∏–¥–µ–æ...")

async def callback_lego_embed_replica(callback: CallbackQuery):
    """LEGO –≤—Å—Ç—Ä–æ–∏—Ç—å —Ä–µ–ø–ª–∏–∫—É"""
    await callback.answer()
    # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å LEGO –≤—Å—Ç—Ä–∞–∏–≤–∞–Ω–∏–µ —Ä–µ–ø–ª–∏–∫–∏
    await callback.message.edit_text("üìù –í—Å—Ç—Ä–∞–∏–≤–∞—é —Ä–µ–ø–ª–∏–∫—É –≤ LEGO –≤–∏–¥–µ–æ...")

# === –ù–û–í–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –î–õ–Ø –ü–õ–û–°–ö–û–ô –°–¢–†–£–ö–¢–£–†–´ ===

async def callback_create_video(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–µ–Ω—é –±—ã—Å—Ç—Ä–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏–¥–µ–æ"""
    await callback.answer()
    from app.ui.keyboards import build_create_video_menu
    from app.ui.texts import t
    
    await callback.message.edit_text(
        t("menu.create_video"),
        reply_markup=build_create_video_menu()
    )

async def callback_helper_menu(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–µ–Ω—é —É–º–Ω–æ–≥–æ –ø–æ–º–æ—â–Ω–∏–∫–∞"""
    await callback.answer()
    from app.ui.keyboards import build_helper_menu
    from app.ui.texts import t
    
    await callback.message.edit_text(
        t("menu.helper"),
        reply_markup=build_helper_menu()
    )

async def callback_neurokudo_menu(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–µ–Ω—é Neurokudo —Ä–µ–∂–∏–º–∞"""
    await callback.answer()
    from app.ui.keyboards import build_neurokudo_menu
    from app.ui.texts import t
    
    await callback.message.edit_text(
        t("menu.neurokudo"),
        reply_markup=build_neurokudo_menu()
    )

async def callback_meme_menu(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–µ–Ω—é –º–µ–º–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞"""
    await callback.answer()
    from app.ui.keyboards import build_meme_menu
    from app.ui.texts import t
    
    await callback.message.edit_text(
        t("menu.meme"),
        reply_markup=build_meme_menu()
    )

# === –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –†–ï–ñ–ò–ú–û–í –°–û–ó–î–ê–ù–ò–Ø –í–ò–î–ï–û ===

async def callback_video_veo3(callback: CallbackQuery):
    """–ë—ã—Å—Ç—Ä–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –≤–∏–¥–µ–æ VEO 3"""
    await callback.answer()
    from app.handlers.states import set_user_state
    
    user_id = callback.from_user.id
    set_user_state(user_id, {
        "mode": "manual",
        "model": "veo3",
        "awaiting_prompt": True
    })
    
    await callback.message.edit_text(
        "üé¨ **–ë—ã—Å—Ç—Ä–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –≤–∏–¥–µ–æ VEO 3**\n\n"
        "–ù–∞–ø–∏—à–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å—Ü–µ–Ω—ã –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ.\n"
        "–ü—Ä–∏–º–µ—Ä: \"–ë–∞–±—É—à–∫–∞ –∫–æ—Ä–º–∏—Ç –∫—É—Ä –≤–æ –¥–≤–æ—Ä–µ\""
    )

async def callback_video_sora2(callback: CallbackQuery):
    """–ë—ã—Å—Ç—Ä–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –≤–∏–¥–µ–æ SORA 2"""
    await callback.answer()
    from app.handlers.states import set_user_state
    
    user_id = callback.from_user.id
    set_user_state(user_id, {
        "mode": "manual",
        "model": "sora2",
        "awaiting_prompt": True
    })
    
    await callback.message.edit_text(
        "üé¨ **–ë—ã—Å—Ç—Ä–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –≤–∏–¥–µ–æ SORA 2**\n\n"
        "–ù–∞–ø–∏—à–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å—Ü–µ–Ω—ã –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ.\n"
        "–ü—Ä–∏–º–µ—Ä: \"–ë–∞–±—É—à–∫–∞ –∫–æ—Ä–º–∏—Ç –∫—É—Ä –≤–æ –¥–≤–æ—Ä–µ\""
    )

# === –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –†–ï–ñ–ò–ú–û–í –£–ú–ù–û–ì–û –ü–û–ú–û–©–ù–ò–ö–ê ===

async def callback_helper_veo3(callback: CallbackQuery):
    """–£–º–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ VEO 3"""
    await callback.answer()
    from app.handlers.states import set_user_state
    
    user_id = callback.from_user.id
    set_user_state(user_id, {
        "mode": "helper",
        "model": "veo3",
        "awaiting_prompt": True
    })
    
    await callback.message.edit_text(
        "üß† **–£–º–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ VEO 3**\n\n"
        "–ù–∞–ø–∏—à–∏—Ç–µ –∏–¥–µ—é –¥–ª—è –≤–∏–¥–µ–æ. GPT —É–ª—É—á—à–∏—Ç –≤–∞—à –ø—Ä–æ–º–ø—Ç –∏ —Å–æ–∑–¥–∞—Å—Ç –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –≤–∏–¥–µ–æ.\n"
        "–ü—Ä–∏–º–µ—Ä: \"–ë–∞–±—É—à–∫–∞ —Å –∂–∏–≤–æ—Ç–Ω—ã–º–∏\""
    )

async def callback_helper_sora2(callback: CallbackQuery):
    """–£–º–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ SORA 2"""
    await callback.answer()
    from app.handlers.states import set_user_state
    
    user_id = callback.from_user.id
    set_user_state(user_id, {
        "mode": "helper",
        "model": "sora2",
        "awaiting_prompt": True
    })
    
    await callback.message.edit_text(
        "üß† **–£–º–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ SORA 2**\n\n"
        "–ù–∞–ø–∏—à–∏—Ç–µ –∏–¥–µ—é –¥–ª—è –≤–∏–¥–µ–æ. GPT —É–ª—É—á—à–∏—Ç –≤–∞—à –ø—Ä–æ–º–ø—Ç –∏ —Å–æ–∑–¥–∞—Å—Ç –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –≤–∏–¥–µ–æ.\n"
        "–ü—Ä–∏–º–µ—Ä: \"–ë–∞–±—É—à–∫–∞ —Å –∂–∏–≤–æ—Ç–Ω—ã–º–∏\""
    )

# === –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –†–ï–ñ–ò–ú–û–í NEUROKUDO ===

async def callback_neurokudo_veo3(callback: CallbackQuery):
    """Neurokudo —Ä–µ–∂–∏–º VEO 3"""
    await callback.answer()
    from app.handlers.states import set_user_state
    
    user_id = callback.from_user.id
    set_user_state(user_id, {
        "mode": "neurokudo",
        "model": "veo3",
        "awaiting_prompt": True
    })
    
    await callback.message.edit_text(
        "üîÆ **–ö–∞–∫ —É Neurokudo VEO 3**\n\n"
        "–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º —Å –±–∞–±—É—à–∫–æ–π –∏ –∞–±—Å—É—Ä–¥–Ω—ã–º–∏ —Å–∏—Ç—É–∞—Ü–∏—è–º–∏.\n"
        "–ù–∞–ø–∏—à–∏—Ç–µ –∏–¥–µ—é: \"–ë–∞–±—É—à–∫–∞ —Å –¥–∏–Ω–æ–∑–∞–≤—Ä–∞–º–∏\""
    )

async def callback_neurokudo_sora2(callback: CallbackQuery):
    """Neurokudo —Ä–µ–∂–∏–º SORA 2"""
    await callback.answer()
    from app.handlers.states import set_user_state
    
    user_id = callback.from_user.id
    set_user_state(user_id, {
        "mode": "neurokudo",
        "model": "sora2",
        "awaiting_prompt": True
    })
    
    await callback.message.edit_text(
        "üîÆ **–ö–∞–∫ —É Neurokudo SORA 2**\n\n"
        "–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º —Å –±–∞–±—É—à–∫–æ–π –∏ –∞–±—Å—É—Ä–¥–Ω—ã–º–∏ —Å–∏—Ç—É–∞—Ü–∏—è–º–∏.\n"
        "–ù–∞–ø–∏—à–∏—Ç–µ –∏–¥–µ—é: \"–ë–∞–±—É—à–∫–∞ —Å –¥–∏–Ω–æ–∑–∞–≤—Ä–∞–º–∏\""
    )

# === –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –†–ï–ñ–ò–ú–û–í –ú–ï–ú–û–í ===

async def callback_meme_veo3(callback: CallbackQuery):
    """–ú–µ–º–Ω—ã–π —Ä–µ–∂–∏–º VEO 3"""
    await callback.answer()
    from app.handlers.states import set_user_state
    
    user_id = callback.from_user.id
    set_user_state(user_id, {
        "mode": "meme",
        "model": "veo3",
        "awaiting_prompt": True
    })
    
    await callback.message.edit_text(
        "ü§° **–ú–µ–º–Ω—ã–π —Ä–µ–∂–∏–º VEO 3**\n\n"
        "–ë—ã—Å—Ç—Ä–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–º–µ—à–Ω—ã—Ö —Å—Ü–µ–Ω.\n"
        "–ù–∞–ø–∏—à–∏—Ç–µ –∏–¥–µ—é –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è —Å–ª—É—á–∞–π–Ω–æ–π —Å—Ü–µ–Ω—ã."
    )

async def callback_meme_sora2(callback: CallbackQuery):
    """–ú–µ–º–Ω—ã–π —Ä–µ–∂–∏–º SORA 2"""
    await callback.answer()
    from app.handlers.states import set_user_state
    
    user_id = callback.from_user.id
    set_user_state(user_id, {
        "mode": "meme",
        "model": "sora2",
        "awaiting_prompt": True
    })
    
    await callback.message.edit_text(
        "ü§° **–ú–µ–º–Ω—ã–π —Ä–µ–∂–∏–º SORA 2**\n\n"
        "–ë—ã—Å—Ç—Ä–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–º–µ—à–Ω—ã—Ö —Å—Ü–µ–Ω.\n"
        "–ù–∞–ø–∏—à–∏—Ç–µ –∏–¥–µ—é –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è —Å–ª—É—á–∞–π–Ω–æ–π —Å—Ü–µ–Ω—ã."
    )

