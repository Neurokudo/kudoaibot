# app/core/features.py
"""–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Ñ—É–Ω–∫—Ü–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ API –∫–ª—é—á–µ–π"""

import os
import logging

log = logging.getLogger("features")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ API –∫–ª—é—á–µ–π
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
GCP_KEY_JSON_B64 = os.getenv("GCP_KEY_JSON_B64")
YOOKASSA_SECRET_KEY = os.getenv("YOOKASSA_SECRET_KEY")

class FeatureFlags:
    """–§–ª–∞–≥–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Ñ—É–Ω–∫—Ü–∏–π"""
    
    @staticmethod
    def has_openai() -> bool:
        """–î–æ—Å—Ç—É–ø–µ–Ω –ª–∏ OpenAI (GPT + SORA 2)"""
        return bool(OPENAI_API_KEY)
    
    @staticmethod
    def has_gpt_helper() -> bool:
        """–î–æ—Å—Ç—É–ø–µ–Ω –ª–∏ —É–º–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫"""
        return bool(OPENAI_API_KEY)
    
    @staticmethod
    def has_sora2() -> bool:
        """–î–æ—Å—Ç—É–ø–µ–Ω –ª–∏ SORA 2"""
        return bool(OPENAI_API_KEY)
    
    @staticmethod
    def has_veo3() -> bool:
        """–î–æ—Å—Ç—É–ø–µ–Ω –ª–∏ VEO 3"""
        return bool(GCP_KEY_JSON_B64)
    
    @staticmethod
    def has_payments() -> bool:
        """–î–æ—Å—Ç—É–ø–Ω—ã –ª–∏ –ø–ª–∞—Ç–µ–∂–∏"""
        return bool(YOOKASSA_SECRET_KEY)
    
    @staticmethod
    def get_available_video_models() -> list:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π –≤–∏–¥–µ–æ"""
        models = []
        
        if FeatureFlags.has_veo3():
            models.extend(["veo3_fast", "veo3", "veo3_audio"])
        
        if FeatureFlags.has_sora2():
            models.extend(["sora2", "sora2_pro"])
        
        return models
    
    @staticmethod
    def get_available_modes(model: str) -> list:
        """–ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ–∂–∏–º—ã –¥–ª—è –º–æ–¥–µ–ª–∏"""
        modes = ["manual"]  # –†—É—á–Ω–æ–π —Ä–µ–∂–∏–º –≤—Å–µ–≥–¥–∞ –¥–æ—Å—Ç—É–ø–µ–Ω
        
        if FeatureFlags.has_gpt_helper():
            modes.extend(["helper", "meme"])  # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∂–∏–º—ã —Å GPT
        
        return modes
    
    @staticmethod
    def get_status_message() -> str:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å—Ç–∞—Ç—É—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π"""
        lines = ["üîß <b>–°—Ç–∞—Ç—É—Å —Ñ—É–Ω–∫—Ü–∏–π:</b>\n"]
        
        # OpenAI
        if FeatureFlags.has_openai():
            lines.append("‚úÖ OpenAI: –¥–æ—Å—Ç—É–ø–µ–Ω")
            lines.append("  ‚îú ü§ñ –£–º–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫: –î–ê")
            lines.append("  ‚îú üòÑ –ú–µ–º–Ω—ã–π —Ä–µ–∂–∏–º: –î–ê")
            lines.append("  ‚îî üåü SORA 2: –î–ê")
        else:
            lines.append("‚ö†Ô∏è OpenAI: –ù–ï –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            lines.append("  ‚îú ü§ñ –£–º–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫: –ù–ï–¢")
            lines.append("  ‚îú üòÑ –ú–µ–º–Ω—ã–π —Ä–µ–∂–∏–º: –ù–ï–¢")
            lines.append("  ‚îî üåü SORA 2: –ù–ï–¢")
        
        # Google Cloud
        if FeatureFlags.has_veo3():
            lines.append("\n‚úÖ Google Cloud: –¥–æ—Å—Ç—É–ø–µ–Ω")
            lines.append("  ‚îî üé• VEO 3: –î–ê")
        else:
            lines.append("\n‚ö†Ô∏è Google Cloud: –ù–ï –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            lines.append("  ‚îî üé• VEO 3: –ù–ï–¢")
        
        # –ü–ª–∞—Ç–µ–∂–∏
        if FeatureFlags.has_payments():
            lines.append("\n‚úÖ –ü–ª–∞—Ç–µ–∂–∏: –¥–æ—Å—Ç—É–ø–Ω—ã")
        else:
            lines.append("\n‚ö†Ô∏è –ü–ª–∞—Ç–µ–∂–∏: –ù–ï –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
        
        # –ß—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤—Å–µ–≥–¥–∞
        lines.append("\n‚úÖ –î–æ—Å—Ç—É–ø–Ω–æ –≤—Å–µ–≥–¥–∞:")
        lines.append("  ‚îú ‚úã –†—É—á–Ω–æ–π —Ä–µ–∂–∏–º")
        lines.append("  ‚îú üëó –ü—Ä–∏–º–µ—Ä–æ—á–Ω–∞—è")
        lines.append("  ‚îî üì∏ –§–æ—Ç–æ")
        
        return "\n".join(lines)

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ
def log_feature_status():
    """–í—ã–≤–µ—Å—Ç–∏ —Å—Ç–∞—Ç—É—Å —Ñ—É–Ω–∫—Ü–∏–π –≤ –ª–æ–≥"""
    log.info("=" * 50)
    log.info("üîß –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Ñ—É–Ω–∫—Ü–∏–π:")
    log.info(f"  OpenAI (GPT + SORA 2): {'‚úÖ' if FeatureFlags.has_openai() else '‚ùå'}")
    log.info(f"  Google Cloud (VEO 3): {'‚úÖ' if FeatureFlags.has_veo3() else '‚ùå'}")
    log.info(f"  –ü–ª–∞—Ç–µ–∂–∏ (YooKassa): {'‚úÖ' if FeatureFlags.has_payments() else '‚ùå'}")
    log.info("=" * 50)

# –í—ã–∑—ã–≤–∞–µ–º –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ
log_feature_status()

