# app/handlers/video_handlers.py
"""–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ"""

import os
import logging
from aiogram import types
from aiogram.types import Message, CallbackQuery, FSInputFile

from app.ui import parse_cb, Actions, t
from app.ui.keyboards import (
    build_video_menu,
    build_veo3_modes,
    build_sora2_modes,
    build_orientation_menu,
    build_audio_menu,
    build_video_result_menu,
    build_main_menu
)
from app.handlers.states import get_user_state, clear_user_state
from app.services.ai_helper import improve_prompt_async
from app.services.clients import generate_video_veo3_async, generate_video_sora2_async
from app.services import billing
from app.config.pricing import get_feature_cost

log = logging.getLogger("video_handlers")

MAX_PROMPT_LENGTH = 3000

async def handle_video_menu(callback: CallbackQuery):
    """–ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ –≤–∏–¥–µ–æ –º–æ–¥–µ–ª–∏"""
    user_id = callback.from_user.id
    state = get_user_state(user_id)
    state.current_screen = "video"
    
    await callback.message.edit_text(
        t("menu.video"),
        reply_markup=build_video_menu()
    )

async def handle_generate_menu(callback: CallbackQuery):
    """–ú–µ–Ω—é —Ä–µ–∂–∏–º–æ–≤ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ VEO 3 (–∫–∞–∫ –≤ babka-bot-clean)"""
    user_id = callback.from_user.id
    state = get_user_state(user_id)
    state.video_model = "veo3"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é VEO 3
    state.current_screen = "generate_modes"
    
    await callback.message.edit_text(
        t("menu.generate"),
        reply_markup=build_generate_menu()
    )

async def handle_lego_menu(callback: CallbackQuery):
    """–ú–µ–Ω—é LEGO –º—É–ª—å—Ç–∏–∫–æ–≤"""
    user_id = callback.from_user.id
    state = get_user_state(user_id)
    state.current_screen = "lego_menu"
    
    await callback.message.edit_text(
        t("menu.lego"),
        reply_markup=build_lego_menu()
    )

async def handle_mode_helper(callback: CallbackQuery):
    """–ê–∫—Ç–∏–≤–∞—Ü–∏—è —Ä–µ–∂–∏–º–∞ —É–º–Ω–æ–≥–æ –ø–æ–º–æ—â–Ω–∏–∫–∞"""
    user_id = callback.from_user.id
    state = get_user_state(user_id)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–æ–¥–µ–ª—å –∏–∑ callback.data
    cb = parse_cb(callback.data)
    if cb.id == "sora2":
        state.video_model = "sora2"
        text_key = "sora2.helper"
    else:
        state.video_model = "veo3"
        text_key = "veo3.helper"
    
    state.video_mode = "helper"
    state.waiting_for = "prompt_input"
    
    await callback.message.edit_text(
        t("helper.input"),
        reply_markup=build_main_menu()
    )

async def handle_mode_manual(callback: CallbackQuery):
    """–ê–∫—Ç–∏–≤–∞—Ü–∏—è —Ä—É—á–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞"""
    user_id = callback.from_user.id
    state = get_user_state(user_id)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–æ–¥–µ–ª—å –∏–∑ callback.data
    cb = parse_cb(callback.data)
    if cb.id == "sora2":
        state.video_model = "sora2"
        text_key = "sora2.manual"
    else:
        state.video_model = "veo3"
        text_key = "veo3.manual"
    
    state.video_mode = "manual"
    state.waiting_for = "prompt_input"
    
    await callback.message.edit_text(
        t(text_key),
        reply_markup=build_main_menu()
    )

async def handle_mode_meme(callback: CallbackQuery):
    """–ê–∫—Ç–∏–≤–∞—Ü–∏—è –º–µ–º–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞"""
    user_id = callback.from_user.id
    state = get_user_state(user_id)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–æ–¥–µ–ª—å –∏–∑ callback.data
    cb = parse_cb(callback.data)
    if cb.id == "sora2":
        state.video_model = "sora2"
        text_key = "sora2.meme"
    else:
        state.video_model = "veo3"
        text_key = "veo3.meme"
    
    state.video_mode = "meme"
    state.waiting_for = "prompt_input"
    
    await callback.message.edit_text(
        t("meme.input"),
        reply_markup=build_main_menu()
    )

async def handle_text_input(message: Message, custom_prompt: str = None):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = message.from_user.id
    state = get_user_state(user_id)
    
    log.info(f"üìù handle_text_input: user_id={user_id}, waiting_for={getattr(state, 'waiting_for', 'None')}, awaiting_prompt={getattr(state, 'awaiting_prompt', 'None')}")
    
    if not state.waiting_for and not state.awaiting_prompt and not custom_prompt:
        log.info(f"‚ùå handle_text_input: –ù–µ –æ–∂–∏–¥–∞–µ–º –≤–≤–æ–¥ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        return
    
    if state.waiting_for == "prompt_input" or state.awaiting_prompt or custom_prompt:
        prompt = custom_prompt or message.text.strip()
        await process_prompt_input(message, state, prompt)
    
    state.waiting_for = None
    state.awaiting_prompt = False

async def process_prompt_input(message: Message, state, prompt: str):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–º–ø—Ç–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = message.from_user.id
    
    log.info(f"üîç process_prompt_input: user_id={user_id}, mode={getattr(state, 'video_mode', 'None')}, prompt='{prompt[:50]}...'")
    
    if len(prompt) > MAX_PROMPT_LENGTH:
        await message.answer(
            t("error.invalid_prompt"),
            reply_markup=build_main_menu()
        )
        return
    
    # –í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø—Ä–æ–º–ø—Ç
    if state.video_mode == "helper":
        # –£–ª—É—á—à–∞–µ–º –ø—Ä–æ–º–ø—Ç —á–µ—Ä–µ–∑ GPT
        status_msg = await message.answer(t("helper.thinking"))
        
        try:
            improved_prompt = await improve_prompt_async(prompt, mode="helper")
            state.last_prompt = improved_prompt
            
            await status_msg.delete()
            
            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤–∏–¥–µ–æ
            await ask_orientation(message, state, improved_prompt)
            
        except Exception as e:
            log.error(f"–û—à–∏–±–∫–∞ —É–ª—É—á—à–µ–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞: {e}")
            await status_msg.edit_text(
                t("error.generation"),
                reply_markup=build_main_menu()
            )
    
    elif state.video_mode == "meme":
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –º–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç
        status_msg = await message.answer(t("meme.generating"))
        
        try:
            meme_prompt = await improve_prompt_async(prompt, mode="meme")
            state.last_prompt = meme_prompt
            
            # –î–ª—è –º–µ–º–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º –±—ã—Å—Ç—Ä—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: 6 —Å–µ–∫, 9:16, –±–µ–∑ –∑–≤—É–∫–∞
            state.video_params = {
                "duration": 6,
                "aspect_ratio": "9:16",
                "with_audio": False
            }
            
            await status_msg.delete()
            await generate_video(message, state)
            
        except Exception as e:
            log.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º–µ–º–∞: {e}")
            await status_msg.edit_text(
                t("error.generation"),
                reply_markup=build_main_menu()
            )
    
    elif state.video_mode == "manual":
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–º–ø—Ç –∫–∞–∫ –µ—Å—Ç—å –∏ —Å—Ä–∞–∑—É –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º
        state.last_prompt = prompt
        await generate_video(message, state)
    
    else:
        # –ï—Å–ª–∏ —Ä–µ–∂–∏–º –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –≤—ã–±–æ—Ä–∞
        log.warning(f"‚ö†Ô∏è process_prompt_input: video_mode –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        await message.answer(
            t("error.no_mode_selected"),
            reply_markup=build_main_menu()
        )
        clear_user_state(user_id)

async def ask_orientation(message: Message, state, prompt: str):
    """–ó–∞–ø—Ä–æ—Å –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏ –≤–∏–¥–µ–æ"""
    state.waiting_for = "orientation"
    
    await message.answer(
        t("video.orientation"),
        reply_markup=build_orientation_menu()
    )

async def handle_orientation_choice(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏"""
    user_id = callback.from_user.id
    state = get_user_state(user_id)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º video_params –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    if not hasattr(state, 'video_params') or state.video_params is None:
        state.video_params = {}
    
    cb = parse_cb(callback.data)
    
    if cb.action == Actions.ORIENTATION_PORTRAIT:
        state.video_params["aspect_ratio"] = "9:16"
    else:  # ORIENTATION_LANDSCAPE
        state.video_params["aspect_ratio"] = "16:9"
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞—É–¥–∏–æ
    await callback.message.edit_text(
        t("video.audio"),
        reply_markup=build_audio_menu()
    )

async def handle_audio_choice(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∞—É–¥–∏–æ"""
    user_id = callback.from_user.id
    state = get_user_state(user_id)
    
    cb = parse_cb(callback.data)
    
    if cb.action == Actions.AUDIO_YES:
        state.video_params["with_audio"] = True
    else:  # AUDIO_NO
        state.video_params["with_audio"] = False
    
    # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 8 —Å–µ–∫—É–Ω–¥
    state.video_params["duration"] = 8
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞
    state.awaiting_prompt = True
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø—Ä–æ–º–ø—Ç
    await callback.message.edit_text(
        "üé¨ **–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –æ–ø–∏—à–∏—Ç–µ —Å—Ü–µ–Ω—É –¥–ª—è –≤–∏–¥–µ–æ:**\n\n"
        "–ü—Ä–∏–º–µ—Ä: \"–ë–∞–±—É—à–∫–∞ –∫–æ—Ä–º–∏—Ç –∫—É—Ä –≤–æ –¥–≤–æ—Ä–µ\"\n"
        "–ò–ª–∏: \"–ö–æ—Ç –∏–≥—Ä–∞–µ—Ç —Å –º—è—á–∏–∫–æ–º –≤ –≥–æ—Å—Ç–∏–Ω–æ–π\""
    )

async def generate_video(message: Message, state):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–¥–µ–æ"""
    user_id = message.from_user.id if hasattr(message, 'from_user') else message.chat.id
    
    log.info(f"üé¨ generate_video: user_id={user_id}, model={getattr(state, 'video_model', 'None')}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø
    feature_name = "video_8s_mute" if not state.video_params.get("with_audio", False) else "video_8s_audio"
    access = await billing.check_access(user_id, feature_name)
    
    if not access['access']:
        await message.answer(
            t("error.no_balance", cost=access.get('cost', 0), balance=access.get('balance', 0)),
            reply_markup=build_main_menu()
        )
        clear_user_state(user_id)
        return
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –Ω–∞—á–∞–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    status_msg = await message.answer(t("video.generating"))
    
    try:
        # –°–ø–∏—Å—ã–≤–∞–µ–º –º–æ–Ω–µ—Ç–∫–∏
        cost = get_feature_cost(feature_name)
        deduct_result = await billing.deduct_coins_for_feature(user_id, feature_name)
        
        if not deduct_result['success']:
            await status_msg.edit_text(
                deduct_result['message'],
                reply_markup=build_main_menu()
            )
            clear_user_state(user_id)
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–ø–∏—Å–∞–Ω–∏–∏
        deduction_info = (
            f"üí∞ <b>–°–ø–∏—Å–∞–Ω–æ:</b> {deduct_result['coins_spent']} –º–æ–Ω–µ—Ç\n"
            f"üí≥ <b>–û—Å—Ç–∞—Ç–æ–∫:</b> {deduct_result['balance_after']} –º–æ–Ω–µ—Ç\n\n"
        )
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤–∏–¥–µ–æ
        if state.video_model == "sora2":
            # SORA 2 –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —á–µ—Ä–µ–∑ callback
            from app.services.clients.sora_client import create_sora_task
            
            task_id, task_status = await create_sora_task(
                prompt=state.last_prompt,
                aspect_ratio=state.video_params.get("aspect_ratio", "9:16"),
                duration=state.video_params.get("duration", 5),
                user_id=user_id
            )
            
            if task_status == "success":
                # –ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ
                await status_msg.edit_text(
                    f"‚ú® <b>–í–∞—à–µ –≤–∏–¥–µ–æ —Å–æ–∑–¥–∞–µ—Ç—Å—è!</b>\n\n"
                    f"{deduction_info}"
                    f"üé¨ <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {state.last_prompt}\n\n"
                    f"üÜî <b>ID –∑–∞–¥–∞—á–∏:</b> <code>{task_id}</code>\n\n"
                    f"‚è≥ <b>–û–∂–∏–¥–∞–π—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–æ–≥–¥–∞ –≤–∏–¥–µ–æ –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤–æ</b>\n\n"
                    f"üìº <b>–í–∏–¥–µ–æ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —ç—Ç–æ—Ç —á–∞—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏</b>",
                    reply_markup=build_main_menu()
                )
                clear_user_state(user_id)
                return
            elif task_status == "demo_mode":
                await status_msg.edit_text(
                    "üé¨ <b>–î–µ–º–æ —Ä–µ–∂–∏–º SORA 2</b>\n\n"
                    "‚ö†Ô∏è OpenAI SORA 2 API –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω\n"
                    "üîÑ –î–æ–±–∞–≤—å—Ç–µ OPENAI_API_KEY –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è\n\n"
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ VEO 3 –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏!",
                    reply_markup=build_main_menu()
                )
                clear_user_state(user_id)
                return
            else:
                # –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏
                result = {"error": f"Failed to create SORA 2 task: {task_status}"}
        else:  # veo3 - –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è
            from app.services.clients.veo_client import create_veo3_task
            
            task_id, task_status = await create_veo3_task(
                prompt=state.last_prompt,
                duration=state.video_params.get("duration", 8),
                aspect_ratio=state.video_params.get("aspect_ratio", "9:16"),
                with_audio=state.video_params.get("with_audio", True),
                user_id=user_id
            )
            
            if task_status == "success":
                # –ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ
                await status_msg.edit_text(
                    f"‚ú® <b>–í–∞—à–µ –≤–∏–¥–µ–æ —Å–æ–∑–¥–∞–µ—Ç—Å—è!</b>\n\n"
                    f"{deduction_info}"
                    f"üé¨ <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {state.last_prompt}\n\n"
                    f"üÜî <b>ID –∑–∞–¥–∞—á–∏:</b> <code>{task_id}</code>\n\n"
                    f"‚è≥ <b>–û–∂–∏–¥–∞–π—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–æ–≥–¥–∞ –≤–∏–¥–µ–æ –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤–æ (1-2 –º–∏–Ω—É—Ç—ã)</b>\n\n"
                    f"üìº <b>–í–∏–¥–µ–æ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —ç—Ç–æ—Ç —á–∞—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏</b>",
                    reply_markup=build_main_menu()
                )
                clear_user_state(user_id)
                return
            else:
                # –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏
                result = {"error": f"Failed to create VEO 3 task: {task_status}"}
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ (–µ—Å–ª–∏ –¥–æ—à–ª–∏ —Å—é–¥–∞)
        if "error" in result:
            await status_msg.edit_text(
                t("video.error", error=result["error"]),
                reply_markup=build_main_menu()
            )
            clear_user_state(user_id)
            return
        
    except Exception as e:
        log.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ: {e}", exc_info=True)
        await status_msg.edit_text(
            t("video.error", error=str(e)),
            reply_markup=build_main_menu()
        )
        clear_user_state(user_id)

async def handle_video_regenerate(callback: CallbackQuery):
    """–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–¥–µ–æ —Å —Ç–µ–º–∏ –∂–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏"""
    user_id = callback.from_user.id
    state = get_user_state(user_id)
    
    if not state.last_prompt:
        await callback.message.edit_text(
            t("error.generation"),
            reply_markup=build_main_menu()
        )
        return
    
    await callback.message.delete()
    await generate_video(callback.message, state)

async def handle_video_to_helper(callback: CallbackQuery):
    """–ü–µ—Ä–µ–π—Ç–∏ –∫ —Ä–µ–∂–∏–º—É –ø–æ–º–æ—â–Ω–∏–∫–∞"""
    user_id = callback.from_user.id
    state = get_user_state(user_id)
    state.video_mode = "helper"
    state.waiting_for = "prompt_input"
    
    await callback.message.edit_text(
        t("helper.input"),
        reply_markup=build_main_menu()
    )

