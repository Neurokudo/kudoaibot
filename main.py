"""
KudoAiBot - AI-powered Telegram bot
–†–∞–∑–¥–µ–ª—ã: –í–ò–î–ï–û (SORA 2, VEO 3), –§–û–¢–û, –ü–†–ò–ú–ï–†–û–ß–ù–ê–Ø
–° —É–º–Ω—ã–º –ø–æ–º–æ—â–Ω–∏–∫–æ–º, –º–µ–º–Ω—ã–º —Ä–µ–∂–∏–º–æ–º –∏ —Ä—É—á–Ω—ã–º —Ä–µ–∂–∏–º–æ–º
"""
import os
import logging
import asyncio
import signal
import sys
from aiogram import Bot, Dispatcher, types, F
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.filters import Command, CommandStart
from aiogram.types import Message, CallbackQuery
from aiohttp import web

# –ò–º–ø–æ—Ä—Ç—ã –º–æ–¥—É–ª–µ–π –±–æ—Ç–∞
from app.db import database, users, subscriptions
from app.services import balance_manager, billing
from app.services.yookassa_service import (
    create_subscription_payment,
    create_topup_payment,
    get_payment_status
)
from app.config.pricing import (
    TARIFFS,
    TOPUP_PACKS,
    get_full_pricing_text,
    format_tariffs_text,
    get_feature_cost
)
from app.ui import parse_cb, Actions, t
from app.ui.keyboards import (
    build_main_menu,
    build_video_menu,
    build_veo3_modes,
    build_sora2_modes,
    tariff_selection
)
from app.handlers.states import get_user_state, is_waiting_for_input
from app.handlers.video_handlers import (
    handle_video_menu,
    handle_veo3_menu,
    handle_sora2_menu,
    handle_mode_helper,
    handle_mode_manual,
    handle_mode_meme,
    handle_text_input,
    handle_orientation_choice,
    handle_audio_choice,
    handle_video_regenerate,
    handle_video_to_helper
)

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
BOT_TOKEN = os.getenv("BOT_TOKEN")
PUBLIC_URL = os.getenv("PUBLIC_URL")
PORT = int(os.getenv("PORT", 8080))
TELEGRAM_MODE = os.getenv("TELEGRAM_MODE", "webhook")
DATABASE_URL = os.getenv("DATABASE_URL")
YOOKASSA_SECRET_KEY = os.getenv("YOOKASSA_SECRET_KEY")
YOOKASSA_SHOP_ID = os.getenv("YOOKASSA_SHOP_ID")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
if not BOT_TOKEN:
    raise RuntimeError("‚ùå BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

if not DATABASE_URL:
    raise RuntimeError("‚ùå DATABASE_URL –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è–º–∏
if not PUBLIC_URL and TELEGRAM_MODE == "webhook":
    logging.warning("‚ö†Ô∏è PUBLIC_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è webhook —Ä–µ–∂–∏–º")

if not YOOKASSA_SECRET_KEY:
    logging.warning("‚ö†Ô∏è YOOKASSA_SECRET_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω - –ø–ª–∞—Ç–µ–∂–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")

if not YOOKASSA_SHOP_ID:
    logging.warning("‚ö†Ô∏è YOOKASSA_SHOP_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω - –ø–ª–∞—Ç–µ–∂–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")

if not OPENAI_API_KEY:
    logging.warning("‚ö†Ô∏è OPENAI_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω - –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–¥–µ–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
def setup_logging():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    os.makedirs("logs", exist_ok=True)
    
    log_to_file = os.getenv("LOG_TO_FILE", "false").lower() == "true"
    
    handlers = [logging.StreamHandler()]
    if log_to_file:
        handlers.append(logging.FileHandler('logs/bot.log', encoding='utf-8'))
    
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s [%(levelname)s] %(name)s: %(message)s',
        handlers=handlers
    )
    
    log = logging.getLogger("kudoaibot")
    log.info("‚úÖ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ")
    return log

log = setup_logging()

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è graceful shutdown
shutdown_event = asyncio.Event()
runner = None

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = None
dp = None

def setup_bot_and_dispatcher():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞"""
    global bot, dp
    log.info("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞...")
    
    bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
    dp = Dispatcher()
    
    log.info("‚úÖ –ë–æ—Ç –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
    return bot, dp

bot, dp = setup_bot_and_dispatcher()

# === –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ===

async def ensure_user_exists(message: Message) -> dict:
    """–£–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –ë–î"""
    user = await users.get_user(message.from_user.id)
    if not user:
        user = await users.create_user(
            user_id=message.from_user.id,
            username=message.from_user.username,
            first_name=message.from_user.first_name,
            last_name=message.from_user.last_name,
            language='ru'
        )
        log.info(f"‚úÖ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message.from_user.id}")
    return user

async def get_user_language(user_id: int) -> str:
    """–ü–æ–ª—É—á–∏—Ç—å —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user = await users.get_user(user_id)
    return user['language'] if user else 'ru'

async def get_user_data(user_id: int) -> dict:
    """–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–∫–ª—é—á–∞—è –ø–æ–¥–ø–∏—Å–∫—É"""
    user = await users.get_user(user_id)
    if not user:
        return {'subscription_type': '–ë–µ–∑ –ø–æ–¥–ø–∏—Å–∫–∏', 'videos_left': 0}
    
    status = await billing.get_user_subscription_status(user_id)
    
    return {
        'subscription_type': status.get('subscription_type', '–ë–µ–∑ –ø–æ–¥–ø–∏—Å–∫–∏'),
        'videos_left': status.get('balance', 0),
        'created_at': user.get('created_at', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
    }

# === –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î ===

@dp.message(CommandStart())
async def cmd_start(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    await ensure_user_exists(message)
    user_language = await get_user_language(message.from_user.id)
    
    user_id = message.from_user.id
    user_data = await get_user_data(user_id)
    name = message.from_user.first_name or "–¥—Ä—É–≥"
    
    welcome_text = f"üëã –ü—Ä–∏–≤–µ—Ç, {name}!\n\n"
    welcome_text += "ü§ñ <b>KudoAiBot</b> - —Ç–≤–æ–π AI –ø–æ–º–æ—â–Ω–∏–∫\n\n"
    welcome_text += "üìä –¢–≤–æ–π –±–∞–ª–∞–Ω—Å: {videos_left} –º–æ–Ω–µ—Ç–æ–∫\n".format(**user_data)
    welcome_text += "üíº –¢–∞—Ä–∏—Ñ: {subscription_type}\n\n".format(**user_data)
    welcome_text += "–í—ã–±–µ—Ä–∏ —Ä–∞–∑–¥–µ–ª:"
    
    await message.answer(
        welcome_text,
        reply_markup=build_main_menu(user_language)
    )

@dp.message(Command("help"))
async def cmd_help(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    await ensure_user_exists(message)
    user_language = await get_user_language(message.from_user.id)
    
    help_text = """
ü§ñ <b>KudoAiBot - –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è</b>

<b>–†–ê–ó–î–ï–õ–´:</b>

üé¨ <b>–í–ò–î–ï–û</b>
‚Ä¢ SORA 2 - –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–¥–µ–æ —á–µ—Ä–µ–∑ OpenAI SORA 2
‚Ä¢ VEO 3 - –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–¥–µ–æ —á–µ—Ä–µ–∑ Google VEO 3

<b>–†–µ–∂–∏–º—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:</b>
ü§ñ –£–º–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ - –æ–ø–∏—à–∏—Ç–µ –∏–¥–µ—é, GPT —Å–æ–∑–¥–∞—Å—Ç –ø—Ä–æ–º–ø—Ç
‚úã –†—É—á–Ω–æ–π —Ä–µ–∂–∏–º - –≤–≤–µ–¥–∏—Ç–µ –≥–æ—Ç–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç
üòÑ –ú–µ–º–Ω—ã–π —Ä–µ–∂–∏–º - –±—ã—Å—Ç—Ä—ã–µ –∫–æ—Ä–æ—Ç–∫–∏–µ –º–µ–º—ã

üì∏ <b>–§–û–¢–û</b> (—Å–∫–æ—Ä–æ)
‚Ä¢ –†–∞–∑–ª–∏—á–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–æ—Ç–æ

üëó <b>–ü–†–ò–ú–ï–†–û–ß–ù–ê–Ø</b>
‚Ä¢ –í–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è –ø—Ä–∏–º–µ—Ä–æ—á–Ω–∞—è –æ–¥–µ–∂–¥—ã

üí∞ <b>–ú–æ–Ω–µ—Ç–∫–∏</b>
‚Ä¢ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–¥–µ–æ —Å—Ç–æ–∏—Ç –º–æ–Ω–µ—Ç–∫–∏
‚Ä¢ –ö—É–ø–∏—Ç—å –º–æ–∂–Ω–æ –≤ —Ä–∞–∑–¥–µ–ª–µ –ü—Ä–æ—Ñ–∏–ª—å
    """
    await message.answer(help_text)

# === –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò CALLBACK –ö–ù–û–ü–û–ö ===

@dp.callback_query(F.data == Actions.HOME)
async def callback_home(callback: CallbackQuery):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await callback.answer()
    await ensure_user_exists(callback.message)
    user_language = await get_user_language(callback.from_user.id)
    
    user_id = callback.from_user.id
    user_data = await get_user_data(user_id)
    name = callback.from_user.first_name or "–¥—Ä—É–≥"
    
    welcome_text = f"üëã {name}\n\n"
    welcome_text += "üí∞ –ë–∞–ª–∞–Ω—Å: {videos_left} –º–æ–Ω–µ—Ç–æ–∫\n".format(**user_data)
    welcome_text += "üìä –¢–∞—Ä–∏—Ñ: {subscription_type}\n\n".format(**user_data)
    welcome_text += "–í—ã–±–µ—Ä–∏ —Ä–∞–∑–¥–µ–ª:"
    
    await callback.message.edit_text(
        welcome_text,
        reply_markup=build_main_menu(user_language)
    )

@dp.callback_query(F.data == Actions.MENU_VIDEO)
async def callback_video(callback: CallbackQuery):
    """–†–∞–∑–¥–µ–ª –í–ò–î–ï–û"""
    await callback.answer()
    await handle_video_menu(callback)

@dp.callback_query(F.data == Actions.VIDEO_VEO3)
async def callback_veo3(callback: CallbackQuery):
    """VEO 3 –º–µ–Ω—é"""
    await callback.answer()
    await handle_veo3_menu(callback)

@dp.callback_query(F.data == Actions.VIDEO_SORA2)
async def callback_sora2(callback: CallbackQuery):
    """SORA 2 –º–µ–Ω—é"""
    await callback.answer()
    await handle_sora2_menu(callback)

@dp.callback_query(F.data == Actions.MODE_HELPER)
async def callback_mode_helper(callback: CallbackQuery):
    """–†–µ–∂–∏–º —É–º–Ω–æ–≥–æ –ø–æ–º–æ—â–Ω–∏–∫–∞"""
    await callback.answer()
    await handle_mode_helper(callback)

@dp.callback_query(F.data == Actions.MODE_MANUAL)
async def callback_mode_manual(callback: CallbackQuery):
    """–†—É—á–Ω–æ–π —Ä–µ–∂–∏–º"""
    await callback.answer()
    await handle_mode_manual(callback)

@dp.callback_query(F.data == Actions.MODE_MEME)
async def callback_mode_meme(callback: CallbackQuery):
    """–ú–µ–º–Ω—ã–π —Ä–µ–∂–∏–º"""
    await callback.answer()
    await handle_mode_meme(callback)

@dp.callback_query(F.data == Actions.ORIENTATION_PORTRAIT)
async def callback_orientation_portrait(callback: CallbackQuery):
    """–ü–æ—Ä—Ç—Ä–µ—Ç–Ω–∞—è –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—è"""
    await callback.answer()
    await handle_orientation_choice(callback)

@dp.callback_query(F.data == Actions.ORIENTATION_LANDSCAPE)
async def callback_orientation_landscape(callback: CallbackQuery):
    """–õ–∞–Ω–¥—à–∞—Ñ—Ç–Ω–∞—è –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—è"""
    await callback.answer()
    await handle_orientation_choice(callback)

@dp.callback_query(F.data == Actions.AUDIO_YES)
async def callback_audio_yes(callback: CallbackQuery):
    """–°–æ –∑–≤—É–∫–æ–º"""
    await callback.answer()
    await handle_audio_choice(callback)

@dp.callback_query(F.data == Actions.AUDIO_NO)
async def callback_audio_no(callback: CallbackQuery):
    """–ë–µ–∑ –∑–≤—É–∫–∞"""
    await callback.answer()
    await handle_audio_choice(callback)

@dp.callback_query(F.data == Actions.VIDEO_REGENERATE)
async def callback_video_regenerate(callback: CallbackQuery):
    """–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è"""
    await callback.answer()
    await handle_video_regenerate(callback)

@dp.callback_query(F.data == Actions.VIDEO_TO_HELPER)
async def callback_video_to_helper(callback: CallbackQuery):
    """–ü–µ—Ä–µ—Ö–æ–¥ –∫ –ø–æ–º–æ—â–Ω–∏–∫—É"""
    await callback.answer()
    await handle_video_to_helper(callback)

@dp.callback_query(F.data == Actions.MENU_PHOTO)
async def callback_photo(callback: CallbackQuery):
    """–†–∞–∑–¥–µ–ª –§–û–¢–û"""
    await callback.answer()
    await callback.message.edit_text(
        t("menu.photo"),
        reply_markup=build_main_menu()
    )

@dp.callback_query(F.data == Actions.MENU_TRYON)
async def callback_tryon(callback: CallbackQuery):
    """–†–∞–∑–¥–µ–ª –ü–†–ò–ú–ï–†–û–ß–ù–ê–Ø"""
    await callback.answer()
    await callback.message.edit_text(
        t("menu.tryon"),
        reply_markup=build_main_menu()
    )

@dp.callback_query(F.data == Actions.MENU_PROFILE)
async def callback_profile(callback: CallbackQuery):
    """–ü—Ä–æ—Ñ–∏–ª—å"""
    await callback.answer()
    await ensure_user_exists(callback.message)
    user_id = callback.from_user.id
    user_language = await get_user_language(user_id)
    
    user_data = await get_user_data(user_id)
    name = callback.from_user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    
    user = await users.get_user(user_id)
    reg_date = user.get('created_at', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ') if user else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
    
    profile_text = f"üë§ <b>–ü—Ä–æ—Ñ–∏–ª—å</b>\n\n"
    profile_text += f"–ò–º—è: {name}\n"
    profile_text += f"üí∞ –ë–∞–ª–∞–Ω—Å: {user_data['videos_left']} –º–æ–Ω–µ—Ç–æ–∫\n"
    profile_text += f"üìä –¢–∞—Ä–∏—Ñ: {user_data['subscription_type']}\n"
    profile_text += f"üìÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {reg_date}\n"
    
    await callback.message.edit_text(
        profile_text,
        reply_markup=tariff_selection(user_language)
    )

# === –û–ë–†–ê–ë–û–¢–ö–ê –¢–ï–ö–°–¢–û–í–´–• –°–û–û–ë–©–ï–ù–ò–ô ===

@dp.message(F.text & ~F.text.startswith("/"))
async def handle_text_message(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∂–¥—ë—Ç –ª–∏ –±–æ—Ç –≤–≤–æ–¥–∞ –æ—Ç —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if is_waiting_for_input(user_id):
        await handle_text_input(message)
    else:
        # –ï—Å–ª–∏ –Ω–µ –∂–¥—ë–º –≤–≤–æ–¥–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é
        await cmd_start(message)

# === –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ü–û–ö–£–ü–ö–ò –¢–ê–†–ò–§–û–í ===

@dp.callback_query(F.data.startswith("buy_tariff_"))
async def handle_buy_tariff(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∫—É–ø–∫–∏ —Ç–∞—Ä–∏—Ñ–∞"""
    await callback.answer()
    
    tariff_name = callback.data.replace("buy_tariff_", "")
    user_id = callback.from_user.id
    
    from app.config.pricing import get_tariff_info
    tariff = get_tariff_info(tariff_name)
    
    if not tariff:
        await callback.message.edit_text("‚ùå –¢–∞—Ä–∏—Ñ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    payment_result = create_subscription_payment(
        user_id=user_id,
        tariff_name=tariff_name,
        price_rub=tariff.price_rub
    )
    
    if not payment_result['success']:
        await callback.message.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞: {payment_result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}"
        )
        return
    
    payment_text = (
        f"{tariff.icon} <b>{tariff.title}</b>\n\n"
        f"üí∞ –¶–µ–Ω–∞: {tariff.price_rub} ‚ÇΩ\n"
        f"üíé –ú–æ–Ω–µ—Ç–æ–∫: {tariff.coins}\n"
        f"üìÖ –°—Ä–æ–∫: {tariff.duration_days} –¥–Ω–µ–π\n\n"
        f"–î–ª—è –æ–ø–ª–∞—Ç—ã –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ:"
    )
    
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", url=payment_result['confirmation_url'])],
        [types.InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data=Actions.HOME)]
    ])
    
    await callback.message.edit_text(payment_text, reply_markup=keyboard)

@dp.callback_query(F.data.startswith("buy_topup_"))
async def handle_buy_topup(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∫—É–ø–∫–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è"""
    await callback.answer()
    
    coins = int(callback.data.replace("buy_topup_", ""))
    user_id = callback.from_user.id
    
    from app.config.pricing import get_topup_pack
    pack = get_topup_pack(coins)
    
    if not pack:
        await callback.message.edit_text("‚ùå –ü–∞–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    payment_result = create_topup_payment(
        user_id=user_id,
        coins=pack.coins,
        price_rub=pack.price_rub
    )
    
    if not payment_result['success']:
        await callback.message.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞: {payment_result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}"
        )
        return
    
    total_coins = pack.coins + pack.bonus_coins
    payment_text = (
        f"üí∞ <b>–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ {total_coins} –º–æ–Ω–µ—Ç–æ–∫</b>\n\n"
        f"üí≥ –¶–µ–Ω–∞: {pack.price_rub} ‚ÇΩ\n"
    )
    if pack.bonus_coins > 0:
        payment_text += f"üéÅ –ë–æ–Ω—É—Å: {pack.bonus_coins} –º–æ–Ω–µ—Ç–æ–∫\n\n"
    else:
        payment_text += "\n"
    
    payment_text += "–î–ª—è –æ–ø–ª–∞—Ç—ã –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ:"
    
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", url=payment_result['confirmation_url'])],
        [types.InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data=Actions.HOME)]
    ])
    
    await callback.message.edit_text(payment_text, reply_markup=keyboard)

# === WEBHOOK –î–õ–Ø SORA 2 ===

async def sora2_callback(request):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –æ—Ç OpenAI SORA 2"""
    try:
        data = await request.json()
        log.info(f"üé¨ SORA 2 callback received: {data}")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –≤–∏–¥–µ–æ
        video_id = data.get("id")
        status = data.get("status")
        metadata = data.get("metadata", {})
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º user_id
        from app.services.clients.sora_client import extract_user_from_metadata
        user_id = extract_user_from_metadata(metadata)
        
        if status == "completed" and user_id:
            # –ü–æ–ª—É—á–∞–µ–º URL –≤–∏–¥–µ–æ
            video_data = data.get("output", {})
            video_url = video_data.get("url")
            
            if video_url:
                # –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                user = await users.get_user(user_id)
                user_language = user.get('language', 'ru') if user else 'ru'
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                try:
                    from app.ui.keyboards import build_video_result_menu
                    
                    await bot.send_video(
                        user_id,
                        video=video_url,
                        caption=t("video.success", cost=get_feature_cost("video_8s_audio")),
                        reply_markup=build_video_result_menu(user_language),
                        parse_mode="HTML"
                    )
                    log.info(f"‚úÖ SORA 2 video sent to user {user_id}")
                    
                except Exception as video_error:
                    log.error(f"‚ùå Failed to send SORA 2 video to user {user_id}: {video_error}")
                    
                    # Fallback - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É
                    try:
                        await bot.send_message(
                            user_id,
                            f"‚ú® <b>–í–∏–¥–µ–æ –≥–æ—Ç–æ–≤–æ!</b>\n\n"
                            f"üìπ <a href='{video_url}'>–°–º–æ—Ç—Ä–µ—Ç—å –≤–∏–¥–µ–æ</a>\n\n"
                            f"üí∞ –°–ø–∏—Å–∞–Ω–æ: {get_feature_cost('video_8s_audio')} –º–æ–Ω–µ—Ç–æ–∫",
                            parse_mode="HTML"
                        )
                    except Exception as fallback_error:
                        log.error(f"‚ùå Fallback also failed: {fallback_error}")
            else:
                log.error(f"‚ùå No video URL in SORA 2 callback for user {user_id}")
        
        elif status == "failed" and user_id:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –º–æ–Ω–µ—Ç–∫–∏
            error_data = data.get("error", {})
            error_message = error_data.get("message", "Unknown error")
            
            log.info(f"‚ùå SORA 2 generation failed for user {user_id}: {error_message}")
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –º–æ–Ω–µ—Ç–∫–∏ –Ω–∞ –±–∞–ª–∞–Ω—Å
            try:
                # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                user = await users.get_user(user_id)
                if user:
                    current_balance = user.get('videos_left', 0)
                    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤–∏–¥–µ–æ
                    cost = get_feature_cost("video_8s_audio")
                    new_balance = current_balance + cost
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
                    await users.update_user_balance(user_id, new_balance)
                    
                    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    await bot.send_message(
                        user_id,
                        f"‚ùå <b>–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ SORA 2</b>\n\n"
                        f"–ü—Ä–∏—á–∏–Ω–∞: {error_message}\n\n"
                        f"üí∞ –ú–æ–Ω–µ—Ç–∫–∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –Ω–∞ –±–∞–ª–∞–Ω—Å (+{cost})",
                        parse_mode="HTML"
                    )
                    log.info(f"‚úÖ Refunded {cost} coins to user {user_id}")
                    
            except Exception as refund_error:
                log.error(f"‚ùå Error refunding coins to user {user_id}: {refund_error}")
        
        else:
            log.info(f"‚ÑπÔ∏è SORA 2 callback status: {status} (user_id: {user_id})")
        
        return web.Response(text="OK")
        
    except Exception as e:
        log.error(f"‚ùå Error in SORA 2 callback: {e}")
        import traceback
        log.error(f"‚ùå Traceback: {traceback.format_exc()}")
        return web.Response(text="Error", status=500)

# === WEBHOOK –î–õ–Ø YOOKASSA ===

async def yookassa_webhook(request):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ webhook –æ—Ç YooKassa"""
    try:
        data = await request.json()
        log.info(f"üì• YooKassa webhook: {data}")
        
        event_type = data.get('event')
        payment_obj = data.get('object', {})
        
        if event_type == 'payment.succeeded':
            payment_id = payment_obj.get('id')
            metadata = payment_obj.get('metadata', {})
            
            user_id = int(metadata.get('user_id'))
            payment_type = metadata.get('payment_type')
            plan_or_coins = metadata.get('plan_or_coins')
            
            if payment_type == 'subscription':
                result = await billing.process_subscription_payment(
                    user_id=user_id,
                    tariff_name=plan_or_coins,
                    payment_id=payment_id
                )
                
                if result['success']:
                    try:
                        await bot.send_message(
                            user_id,
                            result['message']
                        )
                    except Exception as e:
                        log.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
                
            elif payment_type == 'topup':
                from app.config.pricing import get_topup_pack
                coins = int(plan_or_coins)
                pack = get_topup_pack(coins)
                
                if pack:
                    result = await billing.process_topup_payment(
                        user_id=user_id,
                        coins=pack.coins,
                        price_rub=pack.price_rub,
                        payment_id=payment_id,
                        bonus_coins=pack.bonus_coins
                    )
                    
                    if result['success']:
                        try:
                            await bot.send_message(
                                user_id,
                                result['message']
                            )
                        except Exception as e:
                            log.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
        
        return web.Response(text='OK')
        
    except Exception as e:
        log.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook: {e}")
        return web.Response(status=500)

# === –ö–û–ú–ê–ù–î–´ –ë–ê–õ–ê–ù–°–ê –ò –ü–†–û–§–ò–õ–Ø ===

@dp.message(Command("balance"))
async def cmd_balance(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –±–∞–ª–∞–Ω—Å –º–æ–Ω–µ—Ç–æ–∫"""
    await ensure_user_exists(message)
    user_id = message.from_user.id
    user_language = await get_user_language(user_id)
    
    status = await billing.get_user_subscription_status(user_id)
    balance = status['balance']
    
    balance_text = f"üí∞ <b>–í–∞—à –±–∞–ª–∞–Ω—Å</b>\n\n"
    balance_text += f"–ú–æ–Ω–µ—Ç–æ–∫: <b>{balance}</b>\n\n"
    
    if status['has_active']:
        balance_text += f"üìã –ü–æ–¥–ø–∏—Å–∫–∞: <b>{status['plan']}</b>\n"
        balance_text += f"–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {status['expires_at'].strftime('%d.%m.%Y')}\n"
        balance_text += f"–û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: {status['days_left']}\n"
    else:
        balance_text += f"üìã –ü–æ–¥–ø–∏—Å–∫–∞: <b>–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç</b>\n"
    
    await message.answer(balance_text)

@dp.message(Command("profile"))
async def cmd_profile(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    await ensure_user_exists(message)
    user_id = message.from_user.id
    
    user = await users.get_user(user_id)
    status = await billing.get_user_subscription_status(user_id)
    summary = await balance_manager.get_user_summary(user_id, days=30)
    
    profile_text = f"üë§ <b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å</b>\n\n"
    profile_text += f"ID: <code>{user_id}</code>\n"
    profile_text += f"–ò–º—è: {user['first_name']}\n"
    if user['username']:
        profile_text += f"Username: @{user['username']}\n"
    
    profile_text += f"\nüí∞ <b>–ú–æ–Ω–µ—Ç–∫–∏</b>\n"
    profile_text += f"–ë–∞–ª–∞–Ω—Å: <b>{status['balance']}</b>\n"
    
    if status['has_active']:
        profile_text += f"\nüìã <b>–ü–æ–¥–ø–∏—Å–∫–∞</b>\n"
        profile_text += f"–ü–ª–∞–Ω: <b>{status['plan']}</b>\n"
        profile_text += f"–î–æ: {status['expires_at'].strftime('%d.%m.%Y')}\n"
    
    stats = summary['stats']
    if stats['spend_count'] > 0:
        profile_text += f"\nüìä <b>–ó–∞ 30 –¥–Ω–µ–π</b>\n"
        profile_text += f"–ü–æ—Ç—Ä–∞—á–µ–Ω–æ: {stats['total_spent']} –º–æ–Ω–µ—Ç–æ–∫\n"
        profile_text += f"–û–ø–µ—Ä–∞—Ü–∏–π: {stats['spend_count']}\n"
    
    await message.answer(profile_text)

@dp.message(Command("tariffs"))
async def cmd_tariffs(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–∞—Ä–∏—Ñ—ã"""
    await ensure_user_exists(message)
    user_language = await get_user_language(message.from_user.id)
    
    tariffs_text = get_full_pricing_text()
    await message.answer(
        tariffs_text,
        reply_markup=tariff_selection(user_language)
    )

# === –ó–ê–ü–£–°–ö –ë–û–¢–ê ===

async def on_shutdown():
    """–î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –±–æ—Ç–∞"""
    log.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...")
    await database.close_db()
    await bot.session.close()

async def check_expired_subscriptions_task():
    """–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å—Ç–µ–∫—à–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫"""
    while True:
        try:
            await asyncio.sleep(3600)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π —á–∞—Å
            expired_count = await subscriptions.deactivate_expired_subscriptions()
            if expired_count > 0:
                log.info(f"‚úÖ –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ {expired_count} –∏—Å—Ç–µ–∫—à–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫")
        except Exception as e:
            log.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫: {e}")

def signal_handler(signum, frame):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è graceful shutdown"""
    log.info(f"üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signum}, –Ω–∞—á–∏–Ω–∞–µ–º graceful shutdown...")
    shutdown_event.set()

async def graceful_shutdown():
    """Graceful shutdown —Ñ—É–Ω–∫—Ü–∏–∏"""
    log.info("üõë –ù–∞—á–∏–Ω–∞–µ–º graceful shutdown...")
    
    if TELEGRAM_MODE == "webhook":
        try:
            await bot.delete_webhook()
            log.info("‚úÖ Webhook —É–¥–∞–ª–µ–Ω")
        except Exception as e:
            log.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è webhook: {e}")
    
    try:
        await bot.session.close()
        log.info("‚úÖ –°–µ—Å—Å–∏—è –±–æ—Ç–∞ –∑–∞–∫—Ä—ã—Ç–∞")
    except Exception as e:
        log.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–µ—Å—Å–∏–∏ –±–æ—Ç–∞: {e}")
    
    try:
        await database.close_db()
        log.info("‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î –∑–∞–∫—Ä—ã—Ç–æ")
    except Exception as e:
        log.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ë–î: {e}")
    
    log.info("‚úÖ Graceful shutdown –∑–∞–≤–µ—Ä—à–µ–Ω")

async def setup_bot():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
    log.info("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞...")
    
    db_ok = await database.init_db()
    if not db_ok:
        log.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ë–î")
        raise RuntimeError("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
    
    log.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
    log.info("‚úÖ –¢–∞–±–ª–∏—Ü—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω—ã/–æ–±–Ω–æ–≤–ª–µ–Ω—ã")
    
    asyncio.create_task(check_expired_subscriptions_task())
    log.info("‚úÖ –ó–∞–¥–∞—á–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫ –∑–∞–ø—É—â–µ–Ω–∞")

async def setup_web_app(dp, bot) -> web.Application:
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è web –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    log.info("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è web –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
    
    app = web.Application()
    
    async def telegram_webhook(request):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ Telegram webhook"""
        try:
            data = await request.json()
            update = types.Update(**data)
            await dp.feed_update(bot, update)
            return web.Response(text="OK", status=200)
        except Exception as e:
            log.exception(f"Webhook error: {e}")
            return web.Response(text="Error", status=500)
    
    app.router.add_get('/', lambda _: web.Response(text="Bot is running ‚úÖ"))
    app.router.add_post('/webhook', telegram_webhook)
    app.router.add_post('/yookassa_webhook', yookassa_webhook)
    app.router.add_post('/sora_callback', sora2_callback)  # SORA 2 callback
    
    log.info("‚úÖ Web –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ")
    return app

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        await setup_bot()
        
        if TELEGRAM_MODE == "webhook":
            app = await setup_web_app(dp, bot)
            
            webhook_url = f"{PUBLIC_URL}/webhook"
            await bot.set_webhook(webhook_url)
            log.info(f"‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {webhook_url}")
            
            runner = web.AppRunner(app)
            await runner.setup()
            site = web.TCPSite(runner, '0.0.0.0', PORT)
            await site.start()
            
            log.info(f"‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ —Ä–µ–∂–∏–º–µ webhook –Ω–∞ –ø–æ—Ä—Ç—É {PORT}")
            
            signal.signal(signal.SIGTERM, signal_handler)
            signal.signal(signal.SIGINT, signal_handler)
            
            await shutdown_event.wait()
            
            await graceful_shutdown()
        else:
            await bot.delete_webhook()
            log.info("‚úÖ Polling mode")
            
            signal.signal(signal.SIGTERM, signal_handler)
            signal.signal(signal.SIGINT, signal_handler)
            
            try:
                await dp.start_polling(bot)
            except Exception as e:
                log.error(f"‚ùå –û—à–∏–±–∫–∞ polling: {e}")
            finally:
                await graceful_shutdown()
                
    except Exception as e:
        log.exception(f"Startup failed: {e}")
        raise

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        log.info("üõë –ü–æ–ª—É—á–µ–Ω KeyboardInterrupt")
    except Exception as e:
        log.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)
