# app/handlers/commands.py
"""–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞ (/start, /help, –∏ —Ç.–¥.)"""

import logging
from aiogram import types, F
from aiogram.filters import Command, CommandStart
from aiogram.types import Message

from app.db import users
from app.services import billing
from app.ui import t
from app.ui.keyboards import build_main_menu, tariff_selection
from app.config.pricing import get_full_pricing_text
from app.core.bot import get_bot

log = logging.getLogger("kudoaibot")

def register_commands():
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥"""
    bot, dp = get_bot()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    dp.message.register(cmd_start, CommandStart())
    dp.message.register(cmd_help, Command("help"))
    dp.message.register(cmd_balance, Command("balance"))
    dp.message.register(cmd_profile, Command("profile"))
    dp.message.register(cmd_tariffs, Command("tariffs"))

# === –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ===

async def ensure_user_exists(message: Message) -> dict:
    """–£–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –ë–î"""
    user = await users.get_user(message.from_user.id)
    if not user:
        user = await users.create_user(
            user_id=message.from_user.id,
            username=message.from_user.username,
            first_name=message.from_user.first_name,
            last_name=message.from_user.last_name,
            language='ru'
        )
        log.info(f"‚úÖ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message.from_user.id}")
    return user

async def get_user_language(user_id: int) -> str:
    """–ü–æ–ª—É—á–∏—Ç—å —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user = await users.get_user(user_id)
    return user['language'] if user else 'ru'

async def get_user_data(user_id: int) -> dict:
    """–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–∫–ª—é—á–∞—è –ø–æ–¥–ø–∏—Å–∫—É"""
    user = await users.get_user(user_id)
    if not user:
        return {'subscription_type': '–ë–µ–∑ –ø–æ–¥–ø–∏—Å–∫–∏', 'videos_left': 0}
    
    status = await billing.get_user_subscription_status(user_id)
    
    return {
        'subscription_type': status.get('subscription_type', '–ë–µ–∑ –ø–æ–¥–ø–∏—Å–∫–∏'),
        'videos_left': status.get('balance', 0),
        'created_at': user.get('created_at', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
    }

# === –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î ===

async def cmd_start(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    await ensure_user_exists(message)
    user_language = await get_user_language(message.from_user.id)
    
    user_id = message.from_user.id
    name = message.from_user.first_name or "–¥—Ä—É–≥"
    
    # –ü–æ–ª—É—á–∞–µ–º dual balance
    from app.services.dual_balance import get_user_dual_balance, format_balance_display
    from app.services import billing
    
    balance = await get_user_dual_balance(user_id)
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–ø–∏—Å–∫–µ
    status = await billing.get_user_subscription_status(user_id)
    days_left = status.get('days_left', 0) if status.get('has_active') else None
    
    welcome_text = f"üëã –ü—Ä–∏–≤–µ—Ç, {name}!\n\n"
    welcome_text += f"üí∞ –ë–∞–ª–∞–Ω—Å: <b>{balance_info['total']}</b> –º–æ–Ω–µ—Ç\n"
    welcome_text += f"üéØ –û—Å—Ç–∞–ª–æ—Å—å: ~{balance_info['total'] // 5} –≤–∏–¥–µ–æ\n\n"
    welcome_text += f"üé¨ <b>–ß—Ç–æ —Ç—ã –º–æ–∂–µ—à—å —Å–¥–µ–ª–∞—Ç—å:</b>\n"
    welcome_text += f"‚Äî –°–æ–∑–¥–∞–≤–∞—Ç—å –≤–∏–¥–µ–æ —Å –ø–æ–º–æ—â—å—é –ò–ò\n"
    welcome_text += f"‚Äî –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ñ–æ—Ç–æ\n"
    welcome_text += f"‚Äî –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤–∏—Ä—Ç—É–∞–ª—å–Ω—É—é –ø—Ä–∏–º–µ—Ä–æ—á–Ω—É—é\n\n"
    welcome_text += f"–í—ã–±–µ—Ä–∏ —Ä–∞–∑–¥–µ–ª –Ω–∏–∂–µ üëá"
    
    await message.answer(
        welcome_text,
        reply_markup=build_main_menu(user_language)
    )

async def cmd_help(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    await ensure_user_exists(message)
    user_language = await get_user_language(message.from_user.id)
    
    help_text = """
ü§ñ <b>KudoAiBot - –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è</b>

<b>–†–ê–ó–î–ï–õ–´:</b>

üé¨ <b>–í–ò–î–ï–û</b>
‚Ä¢ SORA 2 - –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–¥–µ–æ —á–µ—Ä–µ–∑ OpenAI
‚Ä¢ VEO 3 - –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–¥–µ–æ —á–µ—Ä–µ–∑ Google

<b>–†–µ–∂–∏–º—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:</b>
ü§ñ –£–º–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ - –æ–ø–∏—à–∏—Ç–µ –∏–¥–µ—é, GPT —Å–æ–∑–¥–∞—Å—Ç –ø—Ä–æ–º–ø—Ç
‚úã –†—É—á–Ω–æ–π —Ä–µ–∂–∏–º - –≤–≤–µ–¥–∏—Ç–µ –≥–æ—Ç–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç
üòÑ –ú–µ–º–Ω—ã–π —Ä–µ–∂–∏–º - –±—ã—Å—Ç—Ä—ã–µ –∫–æ—Ä–æ—Ç–∫–∏–µ –º–µ–º—ã

üì∏ <b>–§–û–¢–û</b> (—Å–∫–æ—Ä–æ)
‚Ä¢ –†–∞–∑–ª–∏—á–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–æ—Ç–æ

üëó <b>–ü–†–ò–ú–ï–†–û–ß–ù–ê–Ø</b>
‚Ä¢ –í–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è –ø—Ä–∏–º–µ—Ä–æ—á–Ω–∞—è –æ–¥–µ–∂–¥—ã

üí∞ <b>–ú–æ–Ω–µ—Ç–∫–∏</b>
‚Ä¢ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–¥–µ–æ —Å—Ç–æ–∏—Ç –º–æ–Ω–µ—Ç–∫–∏
‚Ä¢ –ö—É–ø–∏—Ç—å –º–æ–∂–Ω–æ –≤ —Ä–∞–∑–¥–µ–ª–µ –ü—Ä–æ—Ñ–∏–ª—å
    """
    await message.answer(help_text)

async def cmd_balance(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –±–∞–ª–∞–Ω—Å –º–æ–Ω–µ—Ç–æ–∫"""
    await ensure_user_exists(message)
    user_id = message.from_user.id
    user_language = await get_user_language(user_id)
    
    from app.services.dual_balance import get_user_dual_balance, format_balance_display
    from app.utils.formatting import format_coins
    
    # –ü–æ–ª—É—á–∞–µ–º dual balance
    balance = await get_user_dual_balance(user_id)
    status = await billing.get_user_subscription_status(user_id)
    
    balance_text = f"üí∞ <b>–í–∞—à –±–∞–ª–∞–Ω—Å</b>\n\n"
    
    # –î–µ—Ç–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å
    if balance['subscription_coins'] > 0:
        balance_text += f"üü¢ –ü–æ–¥–ø–∏—Å–æ—á–Ω—ã–µ: {format_coins(balance['subscription_coins'])}\n"
    if balance['permanent_coins'] > 0:
        balance_text += f"üü£ –ü–æ—Å—Ç–æ—è–Ω–Ω—ã–µ: {format_coins(balance['permanent_coins'])}\n"
    
    balance_text += f"üìä <b>–ò—Ç–æ–≥–æ: {format_coins(balance['total'])}</b>\n\n"
    
    if status['has_active']:
        balance_text += f"üìã –ü–æ–¥–ø–∏—Å–∫–∞: <b>{status['plan']}</b>\n"
        balance_text += f"üîã –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {status['expires_at'].strftime('%d.%m.%Y')}\n"
        balance_text += f"üîã –û—Å—Ç–∞–ª–æ—Å—å: {status['days_left']} –¥–Ω–µ–π\n"
    else:
        balance_text += f"üìã –ü–æ–¥–ø–∏—Å–∫–∞: <b>–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç</b>\n"
    
    await message.answer(balance_text)

async def cmd_profile(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    await ensure_user_exists(message)
    user_id = message.from_user.id
    
    user = await users.get_user(user_id)
    status = await billing.get_user_subscription_status(user_id)
    from app.services.dual_balance import get_user_dual_balance
    balance_info = await get_user_dual_balance(user_id)
    
    profile_text = f"üë§ <b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å</b>\n\n"
    profile_text += f"ID: <code>{user_id}</code>\n"
    profile_text += f"–ò–º—è: {user['first_name']}\n"
    if user['username']:
        profile_text += f"Username: @{user['username']}\n"
    
    profile_text += f"\nüí∞ <b>–ú–æ–Ω–µ—Ç–∫–∏</b>\n"
    profile_text += f"–ë–∞–ª–∞–Ω—Å: <b>{status['balance']}</b>\n"
    
    if status['has_active']:
        profile_text += f"\nüìã <b>–ü–æ–¥–ø–∏—Å–∫–∞</b>\n"
        profile_text += f"–ü–ª–∞–Ω: <b>{status['plan']}</b>\n"
        profile_text += f"–î–æ: {status['expires_at'].strftime('%d.%m.%Y')}\n"
    
    await message.answer(profile_text)

async def cmd_tariffs(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–∞—Ä–∏—Ñ—ã"""
    await ensure_user_exists(message)
    user_language = await get_user_language(message.from_user.id)
    
    tariffs_text = get_full_pricing_text()
    await message.answer(
        tariffs_text,
        reply_markup=tariff_selection(user_language)
    )

