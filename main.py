"""
KudoAiBot - AI-powered Telegram bot
–û–±—ä–µ–¥–∏–Ω—è–µ—Ç Veo 3, Virtual Try-On –∏ —É–º–Ω—É—é —Å–∏—Å—Ç–µ–º—É –º–æ–Ω–µ—Ç–æ–∫
"""
import os
import logging
import asyncio
from aiogram import Bot, Dispatcher, types, F
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.filters import Command, CommandStart
from aiogram.types import Message, CallbackQuery
from aiohttp import web

# –ò–º–ø–æ—Ä—Ç—ã –º–æ–¥—É–ª–µ–π –±–æ—Ç–∞
from app.db import database, users, subscriptions
from app.services import balance_manager, billing
from app.services.yookassa_service import (
    create_subscription_payment,
    create_topup_payment,
    get_payment_status
)
from app.services.clients import generate_video_sync, virtual_tryon
from app.config.pricing import (
    TARIFFS,
    TOPUP_PACKS,
    get_full_pricing_text,
    format_tariffs_text,
    get_feature_cost
)
from translations import get_text
from utils.keyboards import (
    main_menu,
    language_selection,
    tariff_selection
)

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
BOT_TOKEN = os.getenv("BOT_TOKEN")
PUBLIC_URL = os.getenv("PUBLIC_URL")
PORT = int(os.getenv("PORT", 8080))
TELEGRAM_MODE = os.getenv("TELEGRAM_MODE", "webhook")

if not BOT_TOKEN:
    raise RuntimeError("‚ùå BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
log = logging.getLogger("kudoaibot")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

# === –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ===

async def ensure_user_exists(message: Message) -> dict:
    """–£–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –ë–î"""
    user = await users.get_user(message.from_user.id)
    if not user:
        user = await users.create_user(
            user_id=message.from_user.id,
            username=message.from_user.username,
            first_name=message.from_user.first_name,
            last_name=message.from_user.last_name,
            language='ru'
        )
        log.info(f"‚úÖ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message.from_user.id}")
    return user

async def get_user_language(user_id: int) -> str:
    """–ü–æ–ª—É—á–∏—Ç—å —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user = await users.get_user(user_id)
    return user['language'] if user else 'ru'

# === –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î ===

@dp.message(CommandStart())
async def cmd_start(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    await ensure_user_exists(message)
    user_language = await get_user_language(message.from_user.id)
    
    welcome_text = get_text(user_language, "welcome")
    await message.answer(
        welcome_text,
        reply_markup=main_menu(user_language)
    )

@dp.message(Command("balance"))
async def cmd_balance(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –±–∞–ª–∞–Ω—Å –º–æ–Ω–µ—Ç–æ–∫"""
    await ensure_user_exists(message)
    user_id = message.from_user.id
    user_language = await get_user_language(user_id)
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏ –∏ –±–∞–ª–∞–Ω—Å
    status = await billing.get_user_subscription_status(user_id)
    balance = status['balance']
    
    balance_text = f"üí∞ <b>–í–∞—à –±–∞–ª–∞–Ω—Å</b>\n\n"
    balance_text += f"–ú–æ–Ω–µ—Ç–æ–∫: <b>{balance}</b>\n\n"
    
    if status['has_active']:
        balance_text += f"üìã –ü–æ–¥–ø–∏—Å–∫–∞: <b>{status['plan']}</b>\n"
        balance_text += f"–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {status['expires_at'].strftime('%d.%m.%Y')}\n"
        balance_text += f"–û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: {status['days_left']}\n"
    else:
        balance_text += f"üìã –ü–æ–¥–ø–∏—Å–∫–∞: <b>–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç</b>\n"
    
    await message.answer(balance_text)

@dp.message(Command("profile"))
async def cmd_profile(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    await ensure_user_exists(message)
    user_id = message.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = await users.get_user(user_id)
    status = await billing.get_user_subscription_status(user_id)
    summary = await balance_manager.get_user_summary(user_id, days=30)
    
    profile_text = f"üë§ <b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å</b>\n\n"
    profile_text += f"ID: <code>{user_id}</code>\n"
    profile_text += f"–ò–º—è: {user['first_name']}\n"
    if user['username']:
        profile_text += f"Username: @{user['username']}\n"
    
    profile_text += f"\nüí∞ <b>–ú–æ–Ω–µ—Ç–∫–∏</b>\n"
    profile_text += f"–ë–∞–ª–∞–Ω—Å: <b>{status['balance']}</b>\n"
    
    if status['has_active']:
        profile_text += f"\nüìã <b>–ü–æ–¥–ø–∏—Å–∫–∞</b>\n"
        profile_text += f"–ü–ª–∞–Ω: <b>{status['plan']}</b>\n"
        profile_text += f"–î–æ: {status['expires_at'].strftime('%d.%m.%Y')}\n"
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ 30 –¥–Ω–µ–π
    stats = summary['stats']
    if stats['spend_count'] > 0:
        profile_text += f"\nüìä <b>–ó–∞ 30 –¥–Ω–µ–π</b>\n"
        profile_text += f"–ü–æ—Ç—Ä–∞—á–µ–Ω–æ: {stats['total_spent']} –º–æ–Ω–µ—Ç–æ–∫\n"
        profile_text += f"–û–ø–µ—Ä–∞—Ü–∏–π: {stats['spend_count']}\n"
    
    await message.answer(profile_text)

@dp.message(Command("tariffs"))
async def cmd_tariffs(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–∞—Ä–∏—Ñ—ã"""
    await ensure_user_exists(message)
    user_language = await get_user_language(message.from_user.id)
    
    tariffs_text = get_full_pricing_text()
    await message.answer(
        tariffs_text,
        reply_markup=tariff_selection(user_language)
    )

# === –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ü–û–ö–£–ü–ö–ò –¢–ê–†–ò–§–û–í ===

@dp.callback_query(F.data.startswith("buy_tariff_"))
async def handle_buy_tariff(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∫—É–ø–∫–∏ —Ç–∞—Ä–∏—Ñ–∞"""
    await callback.answer()
    
    tariff_name = callback.data.replace("buy_tariff_", "")
    user_id = callback.from_user.id
    
    from app.config.pricing import get_tariff_info
    tariff = get_tariff_info(tariff_name)
    
    if not tariff:
        await callback.message.edit_text("‚ùå –¢–∞—Ä–∏—Ñ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    # –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂
    payment_result = create_subscription_payment(
        user_id=user_id,
        tariff_name=tariff_name,
        price_rub=tariff.price_rub
    )
    
    if not payment_result['success']:
        await callback.message.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞: {payment_result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}"
        )
        return
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø–ª–∞—Ç—É
    payment_text = (
        f"{tariff.icon} <b>{tariff.title}</b>\n\n"
        f"üí∞ –¶–µ–Ω–∞: {tariff.price_rub} ‚ÇΩ\n"
        f"üíé –ú–æ–Ω–µ—Ç–æ–∫: {tariff.coins}\n"
        f"üìÖ –°—Ä–æ–∫: {tariff.duration_days} –¥–Ω–µ–π\n\n"
        f"–î–ª—è –æ–ø–ª–∞—Ç—ã –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ:"
    )
    
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", url=payment_result['confirmation_url'])],
        [types.InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ])
    
    await callback.message.edit_text(payment_text, reply_markup=keyboard)

@dp.callback_query(F.data.startswith("buy_topup_"))
async def handle_buy_topup(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∫—É–ø–∫–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è"""
    await callback.answer()
    
    coins = int(callback.data.replace("buy_topup_", ""))
    user_id = callback.from_user.id
    
    from app.config.pricing import get_topup_pack
    pack = get_topup_pack(coins)
    
    if not pack:
        await callback.message.edit_text("‚ùå –ü–∞–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    # –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂
    payment_result = create_topup_payment(
        user_id=user_id,
        coins=pack.coins,
        price_rub=pack.price_rub
    )
    
    if not payment_result['success']:
        await callback.message.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞: {payment_result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}"
        )
        return
    
    total_coins = pack.coins + pack.bonus_coins
    payment_text = (
        f"üí∞ <b>–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ {total_coins} –º–æ–Ω–µ—Ç–æ–∫</b>\n\n"
        f"üí≥ –¶–µ–Ω–∞: {pack.price_rub} ‚ÇΩ\n"
    )
    if pack.bonus_coins > 0:
        payment_text += f"üéÅ –ë–æ–Ω—É—Å: {pack.bonus_coins} –º–æ–Ω–µ—Ç–æ–∫\n\n"
    else:
        payment_text += "\n"
    
    payment_text += "–î–ª—è –æ–ø–ª–∞—Ç—ã –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ:"
    
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", url=payment_result['confirmation_url'])],
        [types.InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ])
    
    await callback.message.edit_text(payment_text, reply_markup=keyboard)

# === WEBHOOK –î–õ–Ø YOOKASSA ===

async def yookassa_webhook(request):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ webhook –æ—Ç YooKassa"""
    try:
        data = await request.json()
        log.info(f"üì• YooKassa webhook: {data}")
        
        event_type = data.get('event')
        payment_obj = data.get('object', {})
        
        if event_type == 'payment.succeeded':
            payment_id = payment_obj.get('id')
            metadata = payment_obj.get('metadata', {})
            
            user_id = int(metadata.get('user_id'))
            payment_type = metadata.get('payment_type')
            plan_or_coins = metadata.get('plan_or_coins')
            
            if payment_type == 'subscription':
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É
                result = await billing.process_subscription_payment(
                    user_id=user_id,
                    tariff_name=plan_or_coins,
                    payment_id=payment_id
                )
                
                if result['success']:
                    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    try:
                        await bot.send_message(
                            user_id,
                            result['message']
                        )
                    except Exception as e:
                        log.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
                
            elif payment_type == 'topup':
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ
                from app.config.pricing import get_topup_pack
                coins = int(plan_or_coins)
                pack = get_topup_pack(coins)
                
                if pack:
                    result = await billing.process_topup_payment(
                        user_id=user_id,
                        coins=pack.coins,
                        price_rub=pack.price_rub,
                        payment_id=payment_id,
                        bonus_coins=pack.bonus_coins
                    )
                    
                    if result['success']:
                        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                        try:
                            await bot.send_message(
                                user_id,
                                result['message']
                            )
                        except Exception as e:
                            log.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
        
        return web.Response(text='OK')
        
    except Exception as e:
        log.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook: {e}")
        return web.Response(status=500)

# === –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò VEO 3 –ì–ï–ù–ï–†–ê–¶–ò–ò ===

@dp.message(Command("generate"))
async def cmd_generate(message: Message):
    """–ù–∞—á–∞—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –≤–∏–¥–µ–æ"""
    await ensure_user_exists(message)
    user_language = await get_user_language(message.from_user.id)
    
    await message.answer(
        "üé¨ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∏–¥–µ–æ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å:"
    )

@dp.message(F.text & ~F.text.startswith("/"))
async def handle_text_prompt(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"""
    user_id = message.from_user.id
    prompt = message.text
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø
    access = await billing.check_access(user_id, "video_8s_mute")
    if not access['access']:
        await message.answer(access['message'])
        return
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –Ω–∞—á–∞–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    status_msg = await message.answer(
        "‚è≥ –ù–∞—á–∏–Ω–∞—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –≤–∏–¥–µ–æ...\n"
        "–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å 1-2 –º–∏–Ω—É—Ç—ã."
    )
    
    try:
        # –°–ø–∏—Å—ã–≤–∞–µ–º –º–æ–Ω–µ—Ç–∫–∏
        deduct_result = await billing.deduct_coins_for_feature(user_id, "video_8s_mute")
        if not deduct_result['success']:
            await status_msg.edit_text(deduct_result['message'])
            return
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤–∏–¥–µ–æ
        result = await asyncio.to_thread(
            generate_video_sync,
            prompt=prompt,
            duration=8,
            aspect_ratio="9:16",
            with_audio=False
        )
        
        videos = result.get('videos', [])
        if not videos:
            await status_msg.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–∏–¥–µ–æ")
            return
        
        video_file = videos[0].get('file_path')
        if video_file:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ
            with open(video_file, 'rb') as video:
                await message.answer_video(
                    video,
                    caption=f"‚úÖ –í–∏–¥–µ–æ –≥–æ—Ç–æ–≤–æ!\n\n–ü—Ä–æ–º–ø—Ç: {prompt[:100]}..."
                )
            
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–æ–æ–±—â–µ–Ω–∏–µ
            await status_msg.delete()
            
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            os.remove(video_file)
        else:
            await status_msg.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤–∏–¥–µ–æ")
    
    except Exception as e:
        log.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ: {e}")
        await status_msg.edit_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

# === –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ ===

@dp.callback_query(F.data == "main_menu")
async def handle_main_menu(callback: CallbackQuery):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await callback.answer()
    user_language = await get_user_language(callback.from_user.id)
    
    welcome_text = get_text(user_language, "welcome")
    await callback.message.edit_text(
        welcome_text,
        reply_markup=main_menu(user_language)
    )

# === –ó–ê–ü–£–°–ö –ë–û–¢–ê ===

async def on_startup():
    """–î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞"""
    log.info("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ë–î
    db_ok = await database.init_db()
    if not db_ok:
        log.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ë–î")
        return
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å—Ç–µ–∫—à–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫
    asyncio.create_task(check_expired_subscriptions_task())
    
    if TELEGRAM_MODE == "webhook":
        webhook_url = f"{PUBLIC_URL}/webhook"
        await bot.set_webhook(webhook_url)
        log.info(f"‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {webhook_url}")
    else:
        await bot.delete_webhook()
        log.info("‚úÖ Polling mode")

async def on_shutdown():
    """–î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –±–æ—Ç–∞"""
    log.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...")
    await database.close_db()
    await bot.session.close()

async def check_expired_subscriptions_task():
    """–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å—Ç–µ–∫—à–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫"""
    while True:
        try:
            await asyncio.sleep(3600)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π —á–∞—Å
            expired_count = await subscriptions.deactivate_expired_subscriptions()
            if expired_count > 0:
                log.info(f"‚úÖ –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ {expired_count} –∏—Å—Ç–µ–∫—à–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫")
        except Exception as e:
            log.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫: {e}")

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    if TELEGRAM_MODE == "webhook":
        # –ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ webhook
        app = web.Application()
        app.router.add_post('/webhook', lambda req: dp.feed_webhook_update(bot, await req.json()))
        app.router.add_post('/yookassa_webhook', yookassa_webhook)
        
        await on_startup()
        
        runner = web.AppRunner(app)
        await runner.setup()
        site = web.TCPSite(runner, '0.0.0.0', PORT)
        await site.start()
        
        log.info(f"‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ —Ä–µ–∂–∏–º–µ webhook –Ω–∞ –ø–æ—Ä—Ç—É {PORT}")
        
        # –ñ–¥–µ–º –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ
        await asyncio.Event().wait()
    else:
        # –ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ polling
        await on_startup()
        log.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ —Ä–µ–∂–∏–º–µ polling")
        await dp.start_polling(bot)

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        log.info("üëã –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
