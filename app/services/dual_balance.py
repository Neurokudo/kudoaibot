# app/services/dual_balance.py
"""
–°–∏—Å—Ç–µ–º–∞ –¥–≤—É—Ö –±–∞–ª–∞–Ω—Å–æ–≤ –º–æ–Ω–µ—Ç–æ–∫:
üü¢ –ü–æ–¥–ø–∏—Å–æ—á–Ω—ã–µ (—Å–≥–æ—Ä–∞—é—Ç —á–µ—Ä–µ–∑ 30 –¥–Ω–µ–π)
üü£ –ö—É–ø–ª–µ–Ω–Ω—ã–µ/–ü–æ—Å—Ç–æ—è–Ω–Ω—ã–µ (–Ω–µ —Å–≥–æ—Ä–∞—é—Ç –Ω–∏–∫–æ–≥–¥–∞)

–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç —Å–ø–∏—Å–∞–Ω–∏—è: —Å–Ω–∞—á–∞–ª–∞ –ø–æ–¥–ø–∏—Å–æ—á–Ω—ã–µ, –ø–æ—Ç–æ–º –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–µ
"""

import logging
from typing import Dict, Tuple
from datetime import datetime

from app.db import database

log = logging.getLogger("dual_balance")

async def get_user_dual_balance(user_id: int) -> Dict[str, int]:
    """
    –ü–æ–ª—É—á–∏—Ç—å –æ–±–∞ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    Returns:
        {
            'subscription_coins': int,  # üü¢ –ü–æ–¥–ø–∏—Å–æ—á–Ω—ã–µ
            'permanent_coins': int,     # üü£ –ü–æ—Å—Ç–æ—è–Ω–Ω—ã–µ
            'total': int                # –û–±—â–∏–π –±–∞–ª–∞–Ω—Å
        }
    """
    pool = database.get_db_pool()
    if not pool:
        raise RuntimeError("Database pool not initialized")
    
    async with pool.acquire() as conn:
        result = await conn.fetchrow("""
            SELECT 
                COALESCE(subscription_coins, 0) as subscription_coins,
                COALESCE(permanent_coins, 0) as permanent_coins
            FROM users
            WHERE user_id = $1
        """, user_id)
        
        if not result:
            return {
                'subscription_coins': 0,
                'permanent_coins': 0,
                'total': 0
            }
        
        return {
            'subscription_coins': result['subscription_coins'],
            'permanent_coins': result['permanent_coins'],
            'total': result['subscription_coins'] + result['permanent_coins']
        }

async def deduct_coins(user_id: int, coins: int) -> Dict:
    """
    –°–ø–∏—Å–∞—Ç—å –º–æ–Ω–µ—Ç–∫–∏ —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º: —Å–Ω–∞—á–∞–ª–∞ –ø–æ–¥–ø–∏—Å–æ—á–Ω—ã–µ, –ø–æ—Ç–æ–º –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–µ
    
    Args:
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        coins: –°–∫–æ–ª—å–∫–æ –º–æ–Ω–µ—Ç–æ–∫ —Å–ø–∏—Å–∞—Ç—å
    
    Returns:
        {
            'success': bool,
            'deducted_from_subscription': int,
            'deducted_from_permanent': int,
            'new_balance': dict
        }
    """
    pool = database.get_db_pool()
    if not pool:
        raise RuntimeError("Database pool not initialized")
    
    async with pool.acquire() as conn:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –±–∞–ª–∞–Ω—Å—ã
        user = await conn.fetchrow("""
            SELECT subscription_coins, permanent_coins
            FROM users
            WHERE user_id = $1
        """, user_id)
        
        if not user:
            return {'success': False, 'error': 'User not found'}
        
        sub_coins = user['subscription_coins'] or 0
        perm_coins = user['permanent_coins'] or 0
        total = sub_coins + perm_coins
        
        if total < coins:
            return {
                'success': False,
                'error': 'Insufficient balance',
                'needed': coins,
                'available': total
            }
        
        # –°–ø–∏—Å—ã–≤–∞–µ–º —Å–Ω–∞—á–∞–ª–∞ —Å –ø–æ–¥–ø–∏—Å–æ—á–Ω—ã—Ö
        deducted_sub = min(coins, sub_coins)
        remaining = coins - deducted_sub
        
        # –ï—Å–ª–∏ –Ω–µ —Ö–≤–∞—Ç–∏–ª–æ –ø–æ–¥–ø–∏—Å–æ—á–Ω—ã—Ö, —Å–ø–∏—Å—ã–≤–∞–µ–º —Å –ø–æ—Å—Ç–æ—è–Ω–Ω—ã—Ö
        deducted_perm = min(remaining, perm_coins) if remaining > 0 else 0
        
        new_sub = sub_coins - deducted_sub
        new_perm = perm_coins - deducted_perm
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å—ã
        await conn.execute("""
            UPDATE users
            SET subscription_coins = $2,
                permanent_coins = $3,
                balance = $4,
                updated_at = NOW()
            WHERE user_id = $1
        """, user_id, new_sub, new_perm, new_sub + new_perm)
        
        log.info(
            f"üí∞ –°–ø–∏—Å–∞–Ω–æ {coins} –º–æ–Ω–µ—Ç —É user {user_id}: "
            f"{deducted_sub} –ø–æ–¥–ø–∏—Å–æ—á–Ω—ã—Ö + {deducted_perm} –ø–æ—Å—Ç–æ—è–Ω–Ω—ã—Ö"
        )
        
        return {
            'success': True,
            'deducted_from_subscription': deducted_sub,
            'deducted_from_permanent': deducted_perm,
            'new_balance': {
                'subscription_coins': new_sub,
                'permanent_coins': new_perm,
                'total': new_sub + new_perm
            }
        }

async def add_subscription_coins(user_id: int, coins: int) -> Dict:
    """
    –î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–ø–∏—Å–æ—á–Ω—ã–µ –º–æ–Ω–µ—Ç–∫–∏ (—Å–≥–æ—Ä–∞—é—Ç —á–µ—Ä–µ–∑ 30 –¥–Ω–µ–π)
    
    Args:
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        coins: –°–∫–æ–ª—å–∫–æ –º–æ–Ω–µ—Ç–æ–∫ –¥–æ–±–∞–≤–∏—Ç—å
    
    Returns:
        {'success': bool, 'new_balance': dict}
    """
    pool = database.get_db_pool()
    if not pool:
        raise RuntimeError("Database pool not initialized")
    
    async with pool.acquire() as conn:
        await conn.execute("""
            UPDATE users
            SET subscription_coins = COALESCE(subscription_coins, 0) + $2,
                balance = COALESCE(balance, 0) + $2,
                updated_at = NOW()
            WHERE user_id = $1
        """, user_id, coins)
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å
        balance = await get_user_dual_balance(user_id)
        
        log.info(f"üü¢ –î–æ–±–∞–≤–ª–µ–Ω–æ {coins} –ø–æ–¥–ø–∏—Å–æ—á–Ω—ã—Ö –º–æ–Ω–µ—Ç user {user_id}")
        
        return {
            'success': True,
            'coins_added': coins,
            'new_balance': balance
        }

async def add_permanent_coins(user_id: int, coins: int) -> Dict:
    """
    –î–æ–±–∞–≤–∏—Ç—å –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–µ –º–æ–Ω–µ—Ç–∫–∏ (–ù–ï —Å–≥–æ—Ä–∞—é—Ç)
    
    Args:
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        coins: –°–∫–æ–ª—å–∫–æ –º–æ–Ω–µ—Ç–æ–∫ –¥–æ–±–∞–≤–∏—Ç—å
    
    Returns:
        {'success': bool, 'new_balance': dict}
    """
    pool = database.get_db_pool()
    if not pool:
        raise RuntimeError("Database pool not initialized")
    
    async with pool.acquire() as conn:
        await conn.execute("""
            UPDATE users
            SET permanent_coins = COALESCE(permanent_coins, 0) + $2,
                balance = COALESCE(balance, 0) + $2,
                updated_at = NOW()
            WHERE user_id = $1
        """, user_id, coins)
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å
        balance = await get_user_dual_balance(user_id)
        
        log.info(f"üü£ –î–æ–±–∞–≤–ª–µ–Ω–æ {coins} –ø–æ—Å—Ç–æ—è–Ω–Ω—ã—Ö –º–æ–Ω–µ—Ç user {user_id}")
        
        return {
            'success': True,
            'coins_added': coins,
            'new_balance': balance
        }

async def reset_subscription_coins(user_id: int) -> Dict:
    """
    –°–±—Ä–æ—Å–∏—Ç—å –ø–æ–¥–ø–∏—Å–æ—á–Ω—ã–µ –º–æ–Ω–µ—Ç–∫–∏ (–ø—Ä–∏ –∏—Å—Ç–µ—á–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏)
    
    Args:
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    Returns:
        {'success': bool, 'coins_removed': int}
    """
    pool = database.get_db_pool()
    if not pool:
        raise RuntimeError("Database pool not initialized")
    
    async with pool.acquire() as conn:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –ø–æ–¥–ø–∏—Å–æ—á–Ω—ã–µ –º–æ–Ω–µ—Ç–∫–∏
        old_sub = await conn.fetchval("""
            SELECT COALESCE(subscription_coins, 0)
            FROM users
            WHERE user_id = $1
        """, user_id)
        
        if old_sub and old_sub > 0:
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–æ–¥–ø–∏—Å–æ—á–Ω—ã–µ, –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–∏–π –±–∞–ª–∞–Ω—Å
            await conn.execute("""
                UPDATE users
                SET subscription_coins = 0,
                    balance = COALESCE(permanent_coins, 0),
                    updated_at = NOW()
                WHERE user_id = $1
            """, user_id)
            
            log.info(f"üî• –°–≥–æ—Ä–µ–ª–æ {old_sub} –ø–æ–¥–ø–∏—Å–æ—á–Ω—ã—Ö –º–æ–Ω–µ—Ç —É user {user_id}")
            
            return {
                'success': True,
                'coins_removed': old_sub
            }
        
        return {
            'success': True,
            'coins_removed': 0
        }

async def check_can_spend(user_id: int, coins: int) -> Dict:
    """
    –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ –º–æ–Ω–µ—Ç–æ–∫ –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–∏
    
    Args:
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        coins: –°–∫–æ–ª—å–∫–æ –Ω—É–∂–Ω–æ –º–æ–Ω–µ—Ç–æ–∫
    
    Returns:
        {
            'can_spend': bool,
            'current_balance': dict,
            'needed': int
        }
    """
    balance = await get_user_dual_balance(user_id)
    
    return {
        'can_spend': balance['total'] >= coins,
        'current_balance': balance,
        'needed': coins,
        'shortage': max(0, coins - balance['total'])
    }

def format_balance_display(balance: Dict, days_left: int = None) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –±–∞–ª–∞–Ω—Å –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    
    Args:
        balance: –°–ª–æ–≤–∞—Ä—å —Å –±–∞–ª–∞–Ω—Å–∞–º–∏
        days_left: –î–Ω–µ–π –¥–æ –∏—Å—Ç–µ—á–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    
    Returns:
        –¢–µ–∫—Å—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    """
    from app.utils.formatting import format_coins
    
    total = balance['total']
    sub = balance['subscription_coins']
    perm = balance['permanent_coins']
    
    lines = []
    
    if sub > 0 and perm > 0:
        lines.append(f"üí∞ <b>–ë–∞–ª–∞–Ω—Å: {format_coins(total)}</b>")
        lines.append(f"‚îú üü¢ –ü–æ–¥–ø–∏—Å–æ—á–Ω—ã–µ: {format_coins(sub, short=True)}")
        lines.append(f"‚îî üü£ –ü–æ—Å—Ç–æ—è–Ω–Ω—ã–µ: {format_coins(perm, short=True)}")
    elif sub > 0:
        lines.append(f"üí∞ <b>–ë–∞–ª–∞–Ω—Å: {format_coins(total)}</b>")
        lines.append(f"‚îî üü¢ –ü–æ–¥–ø–∏—Å–æ—á–Ω—ã–µ –º–æ–Ω–µ—Ç–∫–∏")
    elif perm > 0:
        lines.append(f"üí∞ <b>–ë–∞–ª–∞–Ω—Å: {format_coins(total)}</b>")
        lines.append(f"‚îî üü£ –ü–æ—Å—Ç–æ—è–Ω–Ω—ã–µ –º–æ–Ω–µ—Ç–∫–∏")
    else:
        lines.append(f"üí∞ <b>–ë–∞–ª–∞–Ω—Å: 0 –º–æ–Ω–µ—Ç–æ–∫</b>")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–ø–∏—Å–∫–µ –µ—Å–ª–∏ –µ—Å—Ç—å
    if days_left is not None and days_left > 0:
        lines.append(f"üîã <b>–û—Å—Ç–∞–ª–æ—Å—å –ø–æ –ø–æ–¥–ø–∏—Å–∫–µ: {days_left} –¥–Ω–µ–π</b>")
    
    lines.append(f"üìä <b>–ò—Ç–æ–≥–æ –º–æ–Ω–µ—Ç–æ–∫: {total}</b>")
    
    return "\n".join(lines)

