#!/usr/bin/env python3
"""
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ Railway –¥–µ–ø–ª–æ—è —Å AI-–∞–Ω–∞–ª–∏–∑–æ–º –æ—à–∏–±–æ–∫
"""

import asyncio
import os
import re
import sys
import subprocess
import json
from datetime import datetime
from pathlib import Path
from typing import Optional, Dict, List
import anthropic


class RailwayMonitor:
    """–ú–æ–Ω–∏—Ç–æ—Ä –¥–µ–ø–ª–æ—è Railway —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ–º –∏ –∞–Ω–∞–ª–∏–∑–æ–º –æ—à–∏–±–æ–∫"""
    
    def __init__(self, anthropic_api_key: Optional[str] = None):
        self.project_root = Path(__file__).parent.parent
        self.logs_dir = self.project_root / "logs" / "deploy"
        self.logs_dir.mkdir(parents=True, exist_ok=True)
        
        # AI –∫–ª–∏–µ–Ω—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –æ—à–∏–±–æ–∫
        self.anthropic_client = None
        if anthropic_api_key:
            self.anthropic_client = anthropic.Anthropic(api_key=anthropic_api_key)
        
        self.error_patterns = [
            r"Error:",
            r"Exception:",
            r"Traceback",
            r"FATAL",
            r"CRITICAL",
            r"failed",
            r"crash",
            r"\[ERROR\]",
        ]
    
    def check_railway_cli(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–∏ Railway CLI"""
        try:
            result = subprocess.run(
                ["railway", "--version"],
                capture_output=True,
                text=True,
                timeout=5
            )
            return result.returncode == 0
        except (subprocess.TimeoutExpired, FileNotFoundError):
            return False
    
    def get_deployment_logs(self, lines: int = 500) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ª–æ–≥–æ–≤ Railway"""
        try:
            print("üì• –ü–æ–ª—É—á–∞—é –ª–æ–≥–∏ Railway...")
            result = subprocess.run(
                ["railway", "logs", "--lines", str(lines)],
                capture_output=True,
                text=True,
                timeout=30,
                cwd=self.project_root
            )
            
            if result.returncode == 0:
                return result.stdout
            else:
                return f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–æ–≤: {result.stderr}"
        except subprocess.TimeoutExpired:
            return "‚è±Ô∏è –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ª–æ–≥–æ–≤"
        except Exception as e:
            return f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"
    
    def get_deployment_status(self) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –¥–µ–ø–ª–æ—è"""
        try:
            result = subprocess.run(
                ["railway", "status"],
                capture_output=True,
                text=True,
                timeout=10,
                cwd=self.project_root
            )
            
            status_info = {
                "success": result.returncode == 0,
                "output": result.stdout,
                "error": result.stderr,
                "timestamp": datetime.now().isoformat()
            }
            return status_info
        except Exception as e:
            return {
                "success": False,
                "error": str(e),
                "timestamp": datetime.now().isoformat()
            }
    
    def detect_errors_in_logs(self, logs: str) -> List[Dict]:
        """–û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –æ—à–∏–±–æ–∫ –≤ –ª–æ–≥–∞—Ö"""
        errors = []
        lines = logs.split('\n')
        
        for i, line in enumerate(lines):
            for pattern in self.error_patterns:
                if re.search(pattern, line, re.IGNORECASE):
                    # –°–æ–±–∏—Ä–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤–æ–∫—Ä—É–≥ –æ—à–∏–±–∫–∏
                    context_start = max(0, i - 5)
                    context_end = min(len(lines), i + 10)
                    context = '\n'.join(lines[context_start:context_end])
                    
                    errors.append({
                        "line_number": i + 1,
                        "error_line": line.strip(),
                        "context": context,
                        "pattern_matched": pattern
                    })
                    break  # –û–¥–Ω–∞ –æ—à–∏–±–∫–∞ –Ω–∞ —Å—Ç—Ä–æ–∫—É
        
        return errors
    
    def extract_traceback(self, logs: str) -> Optional[str]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ traceback –∏–∑ –ª–æ–≥–æ–≤"""
        traceback_pattern = r"Traceback \(most recent call last\):.*?(?=\n\n|\Z)"
        matches = re.findall(traceback_pattern, logs, re.DOTALL)
        
        if matches:
            return matches[-1]  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π traceback
        return None
    
    async def analyze_error_with_ai(self, error_info: Dict, full_logs: str) -> Optional[Dict]:
        """–ê–Ω–∞–ª–∏–∑ –æ—à–∏–±–∫–∏ —Å –ø–æ–º–æ—â—å—é Claude AI"""
        if not self.anthropic_client:
            return None
        
        traceback = self.extract_traceback(full_logs)
        
        prompt = f"""–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç—É –æ—à–∏–±–∫—É –∏–∑ Railway deployment –ª–æ–≥–æ–≤:

–û–®–ò–ë–ö–ê:
{error_info['error_line']}

–ö–û–ù–¢–ï–ö–°–¢:
{error_info['context']}

{f"–ü–û–õ–ù–´–ô TRACEBACK:\n{traceback}\n" if traceback else ""}

–ü—Ä–æ–µ–∫—Ç: Telegram –±–æ—Ç –Ω–∞ aiogram 3.x —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π —Ä–∞–∑–ª–∏—á–Ω—ã—Ö AI —Å–µ—Ä–≤–∏—Å–æ–≤.

–ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å:
1. –ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã
2. –í–µ—Ä–æ—è—Ç–Ω—É—é –ø—Ä–∏—á–∏–Ω—É
3. –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –≥–¥–µ —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ –æ—à–∏–±–∫–∞
4. –ö–æ–¥ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è (–µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å)
5. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—é –ø–æ–¥–æ–±–Ω—ã—Ö –æ—à–∏–±–æ–∫

–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ - JSON:
{{
    "summary": "–∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ",
    "cause": "–ø—Ä–∏—á–∏–Ω–∞",
    "file_path": "–ø—É—Ç—å/–∫/—Ñ–∞–π–ª—É.py",
    "line_number": —á–∏—Å–ª–æ –∏–ª–∏ null,
    "fix_code": "–∫–æ–¥ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è" –∏–ª–∏ null,
    "recommendations": ["—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è 1", "—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è 2"]
}}
"""
        
        try:
            message = self.anthropic_client.messages.create(
                model="claude-3-5-sonnet-20241022",
                max_tokens=2000,
                messages=[{
                    "role": "user",
                    "content": prompt
                }]
            )
            
            # –ü–∞—Ä—Å–∏–º JSON –∏–∑ –æ—Ç–≤–µ—Ç–∞
            response_text = message.content[0].text
            
            # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å JSON –∏–∑ –æ—Ç–≤–µ—Ç–∞
            json_match = re.search(r'\{.*\}', response_text, re.DOTALL)
            if json_match:
                analysis = json.loads(json_match.group())
                return analysis
            else:
                return {
                    "summary": response_text,
                    "cause": "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å",
                    "file_path": None,
                    "line_number": None,
                    "fix_code": None,
                    "recommendations": []
                }
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ AI-–∞–Ω–∞–ª–∏–∑–∞: {e}")
            return None
    
    def save_error_report(self, errors: List[Dict], analyses: List[Dict]) -> Path:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –æ–± –æ—à–∏–±–∫–∞—Ö"""
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        report_path = self.logs_dir / f"error_report_{timestamp}.json"
        
        report = {
            "timestamp": datetime.now().isoformat(),
            "total_errors": len(errors),
            "errors": errors,
            "ai_analyses": analyses
        }
        
        with open(report_path, 'w', encoding='utf-8') as f:
            json.dump(report, f, indent=2, ensure_ascii=False)
        
        # –¢–∞–∫–∂–µ —Å–æ–∑–¥–∞–µ–º —á–∏—Ç–∞–µ–º—ã–π markdown –æ—Ç—á–µ—Ç
        md_path = self.logs_dir / f"error_report_{timestamp}.md"
        self.create_markdown_report(md_path, errors, analyses)
        
        return report_path
    
    def create_markdown_report(self, path: Path, errors: List[Dict], analyses: List[Dict]):
        """–°–æ–∑–¥–∞–Ω–∏–µ Markdown –æ—Ç—á–µ—Ç–∞"""
        with open(path, 'w', encoding='utf-8') as f:
            f.write(f"# üîç –û—Ç—á–µ—Ç –æ–± –æ—à–∏–±–∫–∞—Ö –¥–µ–ø–ª–æ—è\n\n")
            f.write(f"**–î–∞—Ç–∞:** {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n\n")
            f.write(f"**–í—Å–µ–≥–æ –æ—à–∏–±–æ–∫ –Ω–∞–π–¥–µ–Ω–æ:** {len(errors)}\n\n")
            f.write("---\n\n")
            
            for i, (error, analysis) in enumerate(zip(errors, analyses), 1):
                f.write(f"## ‚ùå –û—à–∏–±–∫–∞ #{i}\n\n")
                f.write(f"**–°—Ç—Ä–æ–∫–∞ –ª–æ–≥–∞:** {error['line_number']}\n\n")
                f.write(f"```\n{error['error_line']}\n```\n\n")
                
                if analysis:
                    f.write(f"### ü§ñ AI –ê–Ω–∞–ª–∏–∑\n\n")
                    f.write(f"**–û–ø–∏—Å–∞–Ω–∏–µ:** {analysis.get('summary', 'N/A')}\n\n")
                    f.write(f"**–ü—Ä–∏—á–∏–Ω–∞:** {analysis.get('cause', 'N/A')}\n\n")
                    
                    if analysis.get('file_path'):
                        f.write(f"**–§–∞–π–ª:** `{analysis['file_path']}`")
                        if analysis.get('line_number'):
                            f.write(f" (—Å—Ç—Ä–æ–∫–∞ {analysis['line_number']})")
                        f.write("\n\n")
                    
                    if analysis.get('fix_code'):
                        f.write(f"**–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:**\n\n")
                        f.write(f"```python\n{analysis['fix_code']}\n```\n\n")
                    
                    if analysis.get('recommendations'):
                        f.write(f"**–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**\n\n")
                        for rec in analysis['recommendations']:
                            f.write(f"- {rec}\n")
                        f.write("\n")
                
                f.write(f"### üìù –ö–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –ª–æ–≥–æ–≤\n\n")
                f.write(f"```\n{error['context']}\n```\n\n")
                f.write("---\n\n")
    
    def create_auto_fix_file(self, analyses: List[Dict]) -> Optional[Path]:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏"""
        fixes = [a for a in analyses if a and a.get('fix_code')]
        
        if not fixes:
            return None
        
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        fix_path = self.logs_dir / f"auto_fixes_{timestamp}.md"
        
        with open(fix_path, 'w', encoding='utf-8') as f:
            f.write("# üîß –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è\n\n")
            f.write(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n\n")
            f.write("‚ö†Ô∏è **–í–ù–ò–ú–ê–ù–ò–ï:** –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–∞–∂–¥–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ–º!\n\n")
            f.write("---\n\n")
            
            for i, fix in enumerate(fixes, 1):
                f.write(f"## –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ #{i}\n\n")
                f.write(f"**–§–∞–π–ª:** `{fix['file_path']}`\n\n")
                f.write(f"**–ü—Ä–æ–±–ª–µ–º–∞:** {fix['summary']}\n\n")
                f.write(f"**–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:**\n\n")
                f.write(f"```python\n{fix['fix_code']}\n```\n\n")
                f.write("---\n\n")
        
        return fix_path
    
    async def monitor_deployment(self, watch: bool = False, interval: int = 30):
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –¥–µ–ø–ª–æ—è"""
        print("üöÄ –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ Railway –¥–µ–ø–ª–æ—è...\n")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ Railway CLI
        if not self.check_railway_cli():
            print("‚ùå Railway CLI –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
            print("üì• –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: npm i -g @railway/cli")
            return
        
        print("‚úÖ Railway CLI –Ω–∞–π–¥–µ–Ω\n")
        
        iteration = 0
        while True:
            iteration += 1
            print(f"\n{'='*60}")
            print(f"üîÑ –ò—Ç–µ—Ä–∞—Ü–∏—è #{iteration} - {datetime.now().strftime('%H:%M:%S')}")
            print(f"{'='*60}\n")
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å
            status = self.get_deployment_status()
            print(f"üìä –°—Ç–∞—Ç—É—Å: {'‚úÖ OK' if status['success'] else '‚ùå –û—à–∏–±–∫–∞'}")
            
            # –ü–æ–ª—É—á–∞–µ–º –ª–æ–≥–∏
            logs = self.get_deployment_logs(lines=1000)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–≥–∏
            log_file = self.logs_dir / f"railway_logs_{datetime.now().strftime('%Y%m%d_%H%M%S')}.txt"
            with open(log_file, 'w', encoding='utf-8') as f:
                f.write(logs)
            print(f"üíæ –õ–æ–≥–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {log_file.name}")
            
            # –û–±–Ω–∞—Ä—É–∂–∏–≤–∞–µ–º –æ—à–∏–±–∫–∏
            errors = self.detect_errors_in_logs(logs)
            
            if errors:
                print(f"\n‚ö†Ô∏è  –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –æ—à–∏–±–æ–∫: {len(errors)}")
                
                # AI –∞–Ω–∞–ª–∏–∑ –∫–∞–∂–¥–æ–π –æ—à–∏–±–∫–∏
                analyses = []
                for i, error in enumerate(errors[:5], 1):  # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–æ 5 –æ—à–∏–±–æ–∫
                    print(f"\nü§ñ AI-–∞–Ω–∞–ª–∏–∑ –æ—à–∏–±–∫–∏ #{i}...")
                    analysis = await self.analyze_error_with_ai(error, logs)
                    analyses.append(analysis)
                    
                    if analysis:
                        print(f"   ‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω")
                        if analysis.get('file_path'):
                            print(f"   üìÅ –§–∞–π–ª: {analysis['file_path']}")
                        if analysis.get('summary'):
                            print(f"   üí° {analysis['summary'][:100]}...")
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
                report_path = self.save_error_report(errors, analyses)
                print(f"\nüìä –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {report_path}")
                print(f"üìä Markdown –æ—Ç—á–µ—Ç: {report_path.with_suffix('.md')}")
                
                # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏
                fix_file = self.create_auto_fix_file(analyses)
                if fix_file:
                    print(f"üîß –§–∞–π–ª –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π: {fix_file}")
                
                print("\n" + "="*60)
                print("üéØ –î–ï–ô–°–¢–í–ò–Ø:")
                print("="*60)
                print(f"1. –û—Ç–∫—Ä–æ–π—Ç–µ –æ—Ç—á–µ—Ç: {report_path.with_suffix('.md')}")
                print("2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
                print("3. –ü—Ä–∏–º–µ–Ω–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è")
                print("4. –°–¥–µ–ª–∞–π—Ç–µ –Ω–æ–≤—ã–π –¥–µ–ø–ª–æ–π")
                print("="*60)
                
            else:
                print("‚úÖ –û—à–∏–±–æ–∫ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ!")
            
            if not watch:
                break
            
            print(f"\n‚è≥ –°–ª–µ–¥—É—é—â–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ {interval} —Å–µ–∫—É–Ω–¥...")
            print("   (Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏)")
            await asyncio.sleep(interval)


async def main():
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞"""
    import argparse
    
    parser = argparse.ArgumentParser(
        description="–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ Railway –¥–µ–ø–ª–æ—è —Å AI-–∞–Ω–∞–ª–∏–∑–æ–º"
    )
    parser.add_argument(
        "--watch",
        action="store_true",
        help="–ù–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: –æ–¥–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞)"
    )
    parser.add_argument(
        "--interval",
        type=int,
        default=30,
        help="–ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 30)"
    )
    parser.add_argument(
        "--anthropic-key",
        type=str,
        default=os.getenv("ANTHROPIC_API_KEY"),
        help="Anthropic API –∫–ª—é—á –¥–ª—è AI-–∞–Ω–∞–ª–∏–∑–∞"
    )
    
    args = parser.parse_args()
    
    if not args.anthropic_key:
        print("‚ö†Ô∏è  ANTHROPIC_API_KEY –Ω–µ —É–∫–∞–∑–∞–Ω - AI-–∞–Ω–∞–ª–∏–∑ –±—É–¥–µ—Ç –æ—Ç–∫–ª—é—á–µ–Ω")
        print("   –£–∫–∞–∂–∏—Ç–µ —á–µ—Ä–µ–∑ --anthropic-key –∏–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        print()
    
    monitor = RailwayMonitor(anthropic_api_key=args.anthropic_key)
    
    try:
        await monitor.monitor_deployment(
            watch=args.watch,
            interval=args.interval
        )
    except KeyboardInterrupt:
        print("\n\nüëã –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    asyncio.run(main())


