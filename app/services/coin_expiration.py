# app/services/coin_expiration.py
"""
Cron-–æ—á–∏—Å—Ç–∫–∞ –ø–æ–¥–ø–∏—Å–æ—á–Ω—ã—Ö –º–æ–Ω–µ—Ç —á–µ—Ä–µ–∑ 30 –¥–Ω–µ–π
–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–≥–æ—Ä–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–æ—á–Ω—ã—Ö –º–æ–Ω–µ—Ç–æ–∫
"""

import logging
import asyncio
from datetime import datetime, timedelta
from typing import List, Dict

from app.db import database
from app.core.bot import bot

log = logging.getLogger("coin_expiration")

async def expire_subscription_coins():
    """
    –£–¥–∞–ª–∏—Ç—å –≤—Å–µ –ø–æ–¥–ø–∏—Å–æ—á–Ω—ã–µ –º–æ–Ω–µ—Ç–∫–∏ —Å—Ç–∞—Ä—à–µ 30 –¥–Ω–µ–π
    
    –õ–æ–≥–∏–∫–∞:
    1. –ù–∞–π—Ç–∏ –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏ —Å—Ç–∞—Ä—à–µ 30 –¥–Ω–µ–π
    2. –°–±—Ä–æ—Å–∏—Ç—å subscription_coins —É —ç—Ç–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    3. –£–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ —Å–≥–æ—Ä–∞–Ω–∏–∏
    """
    try:
        pool = database.get_db_pool()
        
        async with pool.acquire() as conn:
            # –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∏—Å—Ç—ë–∫—à–∏–º–∏ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏
            expired_users = await conn.fetch("""
                SELECT 
                    u.user_id,
                    u.subscription_coins,
                    u.permanent_coins,
                    s.end_date,
                    u.language
                FROM users u
                INNER JOIN subscriptions s ON u.user_id = s.user_id
                WHERE s.is_active = TRUE
                  AND s.end_date < NOW()
                  AND u.subscription_coins > 0
            """)
            
            if not expired_users:
                log.info("‚úÖ –ù–µ—Ç –ø–æ–¥–ø–∏—Å–æ—á–Ω—ã—Ö –º–æ–Ω–µ—Ç –¥–ª—è —Å–≥–æ—Ä–∞–Ω–∏—è")
                return 0
            
            expired_count = 0
            
            for user in expired_users:
                user_id = user['user_id']
                expired_coins = user['subscription_coins']
                permanent_coins = user['permanent_coins']
                language = user['language'] or 'ru'
                
                # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–æ–¥–ø–∏—Å–æ—á–Ω—ã–µ –º–æ–Ω–µ—Ç–∫–∏
                await conn.execute("""
                    UPDATE users
                    SET subscription_coins = 0,
                        balance = COALESCE(permanent_coins, 0),
                        updated_at = NOW()
                    WHERE user_id = $1
                """, user_id)
                
                # –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å–∫—É
                await conn.execute("""
                    UPDATE subscriptions
                    SET is_active = FALSE,
                        updated_at = NOW()
                    WHERE user_id = $1 AND is_active = TRUE
                """, user_id)
                
                expired_count += 1
                
                log.info(f"üî• –°–≥–æ—Ä–µ–ª–æ {expired_coins} –ø–æ–¥–ø–∏—Å–æ—á–Ω—ã—Ö –º–æ–Ω–µ—Ç —É user {user_id}")
                
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                try:
                    message_text = (
                        f"‚è∞ <b>–ü–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞</b>\n\n"
                        f"üî• –°–≥–æ—Ä–µ–ª–æ: {expired_coins} –ø–æ–¥–ø–∏—Å–æ—á–Ω—ã—Ö –º–æ–Ω–µ—Ç\n"
                        f"üíö –û—Å—Ç–∞–ª–æ—Å—å: {permanent_coins} –ø–æ—Å—Ç–æ—è–Ω–Ω—ã—Ö –º–æ–Ω–µ—Ç\n\n"
                        f"üí° –ü—Ä–æ–¥–ª–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—ã–µ –º–æ–Ω–µ—Ç–∫–∏!\n"
                        f"–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–µ –º–æ–Ω–µ—Ç–∫–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–π."
                    )
                    
                    await bot.send_message(user_id, message_text, parse_mode="HTML")
                    log.info(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ user {user_id}")
                    
                except Exception as e:
                    log.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è user {user_id}: {e}")
            
            log.info(f"üî• –°–≥–æ—Ä–µ–ª–æ –ø–æ–¥–ø–∏—Å–æ—á–Ω—ã—Ö –º–æ–Ω–µ—Ç —É {expired_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
            return expired_count
            
    except Exception as e:
        log.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –ø–æ–¥–ø–∏—Å–æ—á–Ω—ã—Ö –º–æ–Ω–µ—Ç: {e}")
        return 0

async def check_expiring_soon(days_before: int = 3):
    """
    –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –∏—Å—Ç–µ–∫–∞—é—Ç –≤ –±–ª–∏–∂–∞–π—à–∏–µ N –¥–Ω–µ–π
    –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
    
    Args:
        days_before: –ó–∞ —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –¥–æ –∏—Å—Ç–µ—á–µ–Ω–∏—è –ø—Ä–µ–¥—É–ø—Ä–µ–¥–∏—Ç—å
    """
    try:
        pool = database.get_db_pool()
        
        async with pool.acquire() as conn:
            # –ù–∞—Ö–æ–¥–∏–º –ø–æ–¥–ø–∏—Å–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –∏—Å—Ç–µ–∫–∞—é—Ç —Å–∫–æ—Ä–æ
            expiring_soon = await conn.fetch("""
                SELECT 
                    u.user_id,
                    u.subscription_coins,
                    s.end_date,
                    s.plan,
                    u.language
                FROM users u
                INNER JOIN subscriptions s ON u.user_id = s.user_id
                WHERE s.is_active = TRUE
                  AND s.end_date BETWEEN NOW() AND NOW() + INTERVAL '%s days'
                  AND u.subscription_coins > 0
            """ % days_before)
            
            for user in expiring_soon:
                user_id = user['user_id']
                coins = user['subscription_coins']
                end_date = user['end_date']
                plan = user['plan']
                language = user['language'] or 'ru'
                
                days_left = (end_date - datetime.now()).days
                
                try:
                    message_text = (
                        f"‚ö†Ô∏è <b>–ü–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ {days_left} –¥–Ω–µ–π!</b>\n\n"
                        f"üìä –¢–∞—Ä–∏—Ñ: {plan}\n"
                        f"üî• –°–≥–æ—Ä–∏—Ç: {coins} –ø–æ–¥–ø–∏—Å–æ—á–Ω—ã—Ö –º–æ–Ω–µ—Ç\n"
                        f"üìÖ –î–∞—Ç–∞ –∏—Å—Ç–µ—á–µ–Ω–∏—è: {end_date.strftime('%d.%m.%Y')}\n\n"
                        f"üí° –ü—Ä–æ–¥–ª–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É, —á—Ç–æ–±—ã –Ω–µ –ø–æ—Ç–µ—Ä—è—Ç—å –º–æ–Ω–µ—Ç–∫–∏!"
                    )
                    
                    await bot.send_message(user_id, message_text, parse_mode="HTML")
                    log.info(f"‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ user {user_id} ({days_left} –¥–Ω–µ–π)")
                    
                except Exception as e:
                    log.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è user {user_id}: {e}")
            
            log.info(f"‚ö†Ô∏è –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {len(expiring_soon)} –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π –æ–± –∏—Å—Ç–µ—á–µ–Ω–∏–∏")
            
    except Exception as e:
        log.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å—Ç–µ–∫–∞—é—â–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫: {e}")

async def coin_expiration_task():
    """
    –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç—ë–∫—à–∏—Ö –ø–æ–¥–ø–∏—Å–æ—á–Ω—ã—Ö –º–æ–Ω–µ—Ç
    –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∫–∞–∂–¥—ã–π —á–∞—Å
    """
    while True:
        try:
            log.info("üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç—ë–∫—à–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫...")
            
            # –û—á–∏—â–∞–µ–º –∏—Å—Ç—ë–∫—à–∏–µ –ø–æ–¥–ø–∏—Å–æ—á–Ω—ã–µ –º–æ–Ω–µ—Ç–∫–∏
            expired = await expire_subscription_coins()
            
            if expired > 0:
                log.info(f"üî• –û—á–∏—â–µ–Ω–æ –ø–æ–¥–ø–∏—Å–æ—á–Ω—ã—Ö –º–æ–Ω–µ—Ç —É {expired} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫–∏, –∏—Å—Ç–µ–∫–∞—é—â–∏–µ –≤ –±–ª–∏–∂–∞–π—à–∏–µ 3 –¥–Ω—è
            await check_expiring_soon(days_before=3)
            
            # –ñ–¥—ë–º 1 —á–∞—Å –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
            await asyncio.sleep(3600)
            
        except Exception as e:
            log.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∑–∞–¥–∞—á–µ –æ—á–∏—Å—Ç–∫–∏ –º–æ–Ω–µ—Ç: {e}")
            await asyncio.sleep(3600)  # –ñ–¥—ë–º —á–∞—Å –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ

