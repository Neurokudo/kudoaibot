#!/usr/bin/env python3
"""
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –ø–µ—Ä–µ–¥ –∫–æ–º–º–∏—Ç–æ–º
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –º–µ–∂–¥—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–µ–π –∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º —Ñ—É–Ω–∫—Ü–∏–π
"""

import os
import re
import sys
from pathlib import Path

def check_handlers():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –≤ callbacks.py"""
    callbacks_file = Path("app/handlers/callbacks.py")
    
    if not callbacks_file.exists():
        print("‚ùå –§–∞–π–ª app/handlers/callbacks.py –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
    with open(callbacks_file, 'r', encoding='utf-8') as f:
        content = f.read()
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Å–µ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
    registered_pattern = r'dp\.callback_query\.register\(callback_([a-z_0-9]+)'
    registered_functions = set(re.findall(registered_pattern, content))
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Å–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ handlers
    defined_functions = set()
    handlers_dir = Path("app/handlers")
    
    for py_file in handlers_dir.glob("*.py"):
        if py_file.name == "__init__.py":
            continue
            
        with open(py_file, 'r', encoding='utf-8') as f:
            file_content = f.read()
        
        defined_pattern = r'^async def callback_([a-z_0-9]+)'
        file_functions = re.findall(defined_pattern, file_content, re.MULTILINE)
        defined_functions.update(file_functions)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ
    missing_definitions = registered_functions - defined_functions
    unused_definitions = defined_functions - registered_functions
    
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤:")
    print(f"   –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ: {len(registered_functions)}")
    print(f"   –û–ø—Ä–µ–¥–µ–ª–µ–Ω–æ: {len(defined_functions)}")
    
    if missing_definitions:
        print(f"\n‚ùå –û–®–ò–ë–ö–ê: –§—É–Ω–∫—Ü–∏–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã, –Ω–æ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã:")
        for func in sorted(missing_definitions):
            print(f"   - callback_{func}")
        return False
    
    if unused_definitions:
        print(f"\n‚ö†Ô∏è  –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: –§—É–Ω–∫—Ü–∏–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã, –Ω–æ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã:")
        for func in sorted(unused_definitions):
            print(f"   - callback_{func}")
    
    print("\n‚úÖ –í—Å–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–º–µ—é—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è!")
    return True

def check_imports():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–æ–≤ –≤ handlers/__init__.py"""
    init_file = Path("app/handlers/__init__.py")
    
    if not init_file.exists():
        print("‚ùå –§–∞–π–ª app/handlers/__init__.py –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    with open(init_file, 'r', encoding='utf-8') as f:
        content = f.read()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–º–ø–æ—Ä—Ç—ã
    import_pattern = r'from \. import ([a-z_]+)'
    imports = re.findall(import_pattern, content)
    
    print(f"\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–æ–≤:")
    print(f"   –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –º–æ–¥—É–ª–µ–π: {len(imports)}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –º–æ–¥—É–ª–µ–π
    handlers_dir = Path("app/handlers")
    missing_modules = []
    
    for module in imports:
        module_file = handlers_dir / f"{module}.py"
        if not module_file.exists():
            missing_modules.append(module)
    
    if missing_modules:
        print(f"\n‚ùå –û–®–ò–ë–ö–ê: –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º—ã–µ –º–æ–¥—É–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã:")
        for module in missing_modules:
            print(f"   - {module}.py")
        return False
    
    print("‚úÖ –í—Å–µ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º—ã–µ –º–æ–¥—É–ª–∏ —Å—É—â–µ—Å—Ç–≤—É—é—Ç!")
    return True

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏"""
    print("üöÄ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤...")
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞
    project_root = Path(__file__).parent.parent
    os.chdir(project_root)
    
    success = True
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    if not check_handlers():
        success = False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–º–ø–æ—Ä—Ç—ã
    if not check_imports():
        success = False
    
    if success:
        print("\nüéâ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã! –ú–æ–∂–Ω–æ –∫–æ–º–º–∏—Ç–∏—Ç—å.")
        sys.exit(0)
    else:
        print("\nüí• –ù–∞–π–¥–µ–Ω—ã –æ—à–∏–±–∫–∏! –ò—Å–ø—Ä–∞–≤—å—Ç–µ –∏—Ö –ø–µ—Ä–µ–¥ –∫–æ–º–º–∏—Ç–æ–º.")
        sys.exit(1)

if __name__ == "__main__":
    main()
